# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BlockDeviceConstraintArgs',
    'BlockDeviceLinkArgs',
    'BlockDeviceSnapshotArgs',
    'BlockDeviceSnapshotLinkArgs',
    'BlockDeviceTagArgs',
    'BlueprintValidationMessageArgs',
    'CatalogItemEntitlementDefinitionArgs',
    'CatalogSourceEntitlementDefinitionArgs',
    'CloudAccountAwsLinkArgs',
    'CloudAccountAwsTagArgs',
    'CloudAccountAzureLinkArgs',
    'CloudAccountAzureTagArgs',
    'CloudAccountGcpLinkArgs',
    'CloudAccountGcpTagArgs',
    'CloudAccountNsxtLinkArgs',
    'CloudAccountNsxtTagArgs',
    'CloudAccountNsxvLinkArgs',
    'CloudAccountNsxvTagArgs',
    'CloudAccountVmcLinkArgs',
    'CloudAccountVmcTagArgs',
    'CloudAccountVsphereLinkArgs',
    'CloudAccountVsphereTagArgs',
    'ContentSourceConfigArgs',
    'DeploymentExpenseArgs',
    'DeploymentLastRequestArgs',
    'DeploymentProjectArgs',
    'DeploymentResourceArgs',
    'DeploymentResourceExpenseArgs',
    'FabricComputeLinkArgs',
    'FabricComputeTagArgs',
    'FabricDatastoreVsphereLinkArgs',
    'FabricDatastoreVsphereTagArgs',
    'FabricNetworkVsphereLinkArgs',
    'FabricNetworkVsphereTagArgs',
    'FlavorProfileFlavorMappingArgs',
    'FlavorProfileLinkArgs',
    'ImageProfileImageMappingArgs',
    'ImageProfileImageMappingConstraintArgs',
    'LoadBalancerLinkArgs',
    'LoadBalancerNicArgs',
    'LoadBalancerRouteArgs',
    'LoadBalancerRouteHealthCheckConfigurationArgs',
    'LoadBalancerTagArgs',
    'LoadBalancerTargetArgs',
    'MachineBootConfigArgs',
    'MachineConstraintArgs',
    'MachineDiskArgs',
    'MachineDisksListArgs',
    'MachineImageDiskConstraintArgs',
    'MachineLinkArgs',
    'MachineNicArgs',
    'MachineTagArgs',
    'NetworkConstraintArgs',
    'NetworkIpRangeLinkArgs',
    'NetworkIpRangeTagArgs',
    'NetworkLinkArgs',
    'NetworkProfileLinkArgs',
    'NetworkProfileTagArgs',
    'NetworkTagArgs',
    'ProjectAdministratorRoleArgs',
    'ProjectConstraintsArgs',
    'ProjectConstraintsExtensibilityArgs',
    'ProjectConstraintsNetworkArgs',
    'ProjectConstraintsStorageArgs',
    'ProjectMemberRoleArgs',
    'ProjectViewerRoleArgs',
    'ProjectZoneAssignmentArgs',
    'StorageProfileAwsLinkArgs',
    'StorageProfileAwsTagArgs',
    'StorageProfileAzureLinkArgs',
    'StorageProfileAzureTagArgs',
    'StorageProfileLinkArgs',
    'StorageProfileTagArgs',
    'StorageProfileVsphereLinkArgs',
    'StorageProfileVsphereTagArgs',
    'ZoneLinkArgs',
    'ZoneTagArgs',
    'ZoneTagsToMatchArgs',
    'GetBlockDeviceTagArgs',
    'GetCloudAccountAwsTagArgs',
    'GetCloudAccountAzureTagArgs',
    'GetCloudAccountGcpTagArgs',
    'GetCloudAccountNsxtTagArgs',
    'GetCloudAccountNsxvTagArgs',
    'GetCloudAccountVmcTagArgs',
    'GetCloudAccountVsphereTagArgs',
    'GetFabricComputeTagArgs',
    'GetFabricDatastoreVsphereTagArgs',
    'GetFabricNetworkTagArgs',
    'GetImageProfileImageMappingArgs',
    'GetImageProfileImageMappingConstraintArgs',
    'GetMachineTagArgs',
    'GetNetworkConstraintArgs',
    'GetNetworkDomainTagArgs',
    'GetNetworkProfileTagArgs',
    'GetNetworkTagArgs',
    'GetProjectAdministratorRoleArgs',
    'GetProjectConstraintsArgs',
    'GetProjectConstraintsExtensibilityArgs',
    'GetProjectConstraintsNetworkArgs',
    'GetProjectConstraintsStorageArgs',
    'GetProjectMemberRoleArgs',
    'GetProjectViewerRoleArgs',
    'GetProjectZoneAssignmentArgs',
    'GetSecurityGroupRuleArgs',
    'GetStorageProfileAwsTagArgs',
    'GetStorageProfileAzureTagArgs',
    'GetStorageProfileTagArgs',
    'GetStorageProfileVsphereTagArgs',
    'GetZoneTagArgs',
    'GetZoneTagsToMatchArgs',
]

@pulumi.input_type
class BlockDeviceConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class BlockDeviceLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class BlockDeviceSnapshotArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] id: ID of the block device snapshot.
        :param pulumi.Input[bool] is_current: Indicates whether snapshot on block device is current.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotLinkArgs']]] links: HATEOAS of the entity
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that block device snapshot belongs to.
        :param pulumi.Input[str] owner: Email of block device snapshot owner.
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the block device snapshot.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether snapshot on block device is current.
        """
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotLinkArgs']]]]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that block device snapshot belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of block device snapshot owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class BlockDeviceSnapshotLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class BlockDeviceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BlueprintValidationMessageArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CatalogItemEntitlementDefinitionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 icon_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_items: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description of the catalog item.
        :param pulumi.Input[str] icon_id: Icon id of associated catalog item.
        :param pulumi.Input[str] id: Id of the catalog item.
        :param pulumi.Input[str] name: Name of the catalog item.
        :param pulumi.Input[int] number_of_items: Number of items in the associated catalog source.
        :param pulumi.Input[str] source_name: Catalog source name.
        :param pulumi.Input[str] source_type: Catalog source type.
        :param pulumi.Input[str] type: Content definition type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon_id is not None:
            pulumi.set(__self__, "icon_id", icon_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_items is not None:
            pulumi.set(__self__, "number_of_items", number_of_items)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the catalog item.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> Optional[pulumi.Input[str]]:
        """
        Icon id of associated catalog item.
        """
        return pulumi.get(self, "icon_id")

    @icon_id.setter
    def icon_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the catalog item.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the catalog item.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> Optional[pulumi.Input[int]]:
        """
        Number of items in the associated catalog source.
        """
        return pulumi.get(self, "number_of_items")

    @number_of_items.setter
    def number_of_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_items", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog source name.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog source type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Content definition type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CatalogSourceEntitlementDefinitionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 icon_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_items: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon_id is not None:
            pulumi.set(__self__, "icon_id", icon_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_items is not None:
            pulumi.set(__self__, "number_of_items", number_of_items)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_id")

    @icon_id.setter
    def icon_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_items")

    @number_of_items.setter
    def number_of_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_items", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudAccountAwsLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountAwsTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountAzureLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountAzureTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountGcpLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountGcpTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountNsxtLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountNsxtTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountNsxvLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountNsxvTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountVmcLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountVmcTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudAccountVsphereLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class CloudAccountVsphereTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContentSourceConfigArgs:
    def __init__(__self__, *,
                 integration_id: pulumi.Input[str],
                 path: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] integration_id: Content source integration id as seen in vRA integrations.
        :param pulumi.Input[str] path: Path to refer to in the content source repository and branch.
        :param pulumi.Input[str] project_name: Name of the project.
        :param pulumi.Input[str] branch: Content source branch name.
        :param pulumi.Input[str] content_type: Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        :param pulumi.Input[str] repository: Content source repository.
        """
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_name", project_name)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Input[str]:
        """
        Content source integration id as seen in vRA integrations.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path to refer to in the content source repository and branch.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        Name of the project.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        Content source branch name.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Content source repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)


@pulumi.input_type
class DeploymentExpenseArgs:
    def __init__(__self__, *,
                 additional_expense: Optional[pulumi.Input[float]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 compute_expense: Optional[pulumi.Input[float]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 network_expense: Optional[pulumi.Input[float]] = None,
                 storage_expense: Optional[pulumi.Input[float]] = None,
                 total_expense: Optional[pulumi.Input[float]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] additional_expense: Additional expense incurred for the resource.
        :param pulumi.Input[str] code: Expense sync message code if any.
        :param pulumi.Input[float] compute_expense: Compute expense of the entity.
        :param pulumi.Input[str] last_update_time: Last expense sync time.
        :param pulumi.Input[str] message: Expense sync message if any.
        :param pulumi.Input[float] network_expense: Network expense of the entity.
        :param pulumi.Input[float] storage_expense: Storage expense of the entity.
        :param pulumi.Input[float] total_expense: Total expense of the entity.
        :param pulumi.Input[str] unit: Monetary unit.
        """
        if additional_expense is not None:
            pulumi.set(__self__, "additional_expense", additional_expense)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compute_expense is not None:
            pulumi.set(__self__, "compute_expense", compute_expense)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if network_expense is not None:
            pulumi.set(__self__, "network_expense", network_expense)
        if storage_expense is not None:
            pulumi.set(__self__, "storage_expense", storage_expense)
        if total_expense is not None:
            pulumi.set(__self__, "total_expense", total_expense)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @additional_expense.setter
    def additional_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "additional_expense", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @compute_expense.setter
    def compute_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "compute_expense", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @network_expense.setter
    def network_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "network_expense", value)

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @storage_expense.setter
    def storage_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_expense", value)

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @total_expense.setter
    def total_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_expense", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class DeploymentLastRequestArgs:
    def __init__(__self__, *,
                 action_id: Optional[pulumi.Input[str]] = None,
                 approved_at: Optional[pulumi.Input[str]] = None,
                 blueprint_id: Optional[pulumi.Input[str]] = None,
                 cancelable: Optional[pulumi.Input[bool]] = None,
                 catalog_item_id: Optional[pulumi.Input[str]] = None,
                 completed_at: Optional[pulumi.Input[str]] = None,
                 completed_tasks: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[str]] = None,
                 dismissed: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 initialized_at: Optional[pulumi.Input[str]] = None,
                 inputs: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outputs: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requested_by: Optional[pulumi.Input[str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 total_tasks: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_id: Identifier of the requested action.
        :param pulumi.Input[str] approved_at: Time at which the request was approved.
        :param pulumi.Input[str] blueprint_id: Identifier of the requested blueprint in the form ‘UUID:version’.
        :param pulumi.Input[bool] cancelable: Indicates whether request can be canceled or not.
        :param pulumi.Input[str] catalog_item_id: The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.
        :param pulumi.Input[str] completed_at: Time at which the request completed.
        :param pulumi.Input[int] completed_tasks: The number of tasks completed while fulfilling this request.
        :param pulumi.Input[str] created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param pulumi.Input[str] details: Longer user-friendly details of the request.
        :param pulumi.Input[bool] dismissed: Indicates whether request is in dismissed state.
        :param pulumi.Input[str] id: Unique identifier of the resource.
        :param pulumi.Input[str] initialized_at: Time at which the request was initialized.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] inputs: Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] outputs: Request outputs.
        :param pulumi.Input[str] requested_by: The user that initiated the request.
        :param pulumi.Input[str] status: Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        :param pulumi.Input[str] updated_at: Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if approved_at is not None:
            pulumi.set(__self__, "approved_at", approved_at)
        if blueprint_id is not None:
            pulumi.set(__self__, "blueprint_id", blueprint_id)
        if cancelable is not None:
            pulumi.set(__self__, "cancelable", cancelable)
        if catalog_item_id is not None:
            pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if completed_tasks is not None:
            pulumi.set(__self__, "completed_tasks", completed_tasks)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if dismissed is not None:
            pulumi.set(__self__, "dismissed", dismissed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initialized_at is not None:
            pulumi.set(__self__, "initialized_at", initialized_at)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if requested_by is not None:
            pulumi.set(__self__, "requested_by", requested_by)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_tasks is not None:
            pulumi.set(__self__, "total_tasks", total_tasks)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the requested action.
        """
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="approvedAt")
    def approved_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the request was approved.
        """
        return pulumi.get(self, "approved_at")

    @approved_at.setter
    def approved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "approved_at", value)

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the requested blueprint in the form ‘UUID:version’.
        """
        return pulumi.get(self, "blueprint_id")

    @blueprint_id.setter
    def blueprint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_id", value)

    @property
    @pulumi.getter
    def cancelable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether request can be canceled or not.
        """
        return pulumi.get(self, "cancelable")

    @cancelable.setter
    def cancelable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cancelable", value)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.
        """
        return pulumi.get(self, "catalog_item_id")

    @catalog_item_id.setter
    def catalog_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_item_id", value)

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the request completed.
        """
        return pulumi.get(self, "completed_at")

    @completed_at.setter
    def completed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed_at", value)

    @property
    @pulumi.getter(name="completedTasks")
    def completed_tasks(self) -> Optional[pulumi.Input[int]]:
        """
        The number of tasks completed while fulfilling this request.
        """
        return pulumi.get(self, "completed_tasks")

    @completed_tasks.setter
    def completed_tasks(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "completed_tasks", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        """
        Longer user-friendly details of the request.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def dismissed(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether request is in dismissed state.
        """
        return pulumi.get(self, "dismissed")

    @dismissed.setter
    def dismissed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dismissed", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="initializedAt")
    def initialized_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the request was initialized.
        """
        return pulumi.get(self, "initialized_at")

    @initialized_at.setter
    def initialized_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initialized_at", value)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Request outputs.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "outputs", value)

    @property
    @pulumi.getter(name="requestedBy")
    def requested_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that initiated the request.
        """
        return pulumi.get(self, "requested_by")

    @requested_by.setter
    def requested_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested_by", value)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="totalTasks")
    def total_tasks(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total_tasks")

    @total_tasks.setter
    def total_tasks(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_tasks", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class DeploymentProjectArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] id: Unique identifier of the resource.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] version: Version of the entity, if applicable.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the entity, if applicable.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeploymentResourceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 created_at: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expenses: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentResourceExpenseArgs']]]] = None,
                 properties_json: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sync_status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Unique identifier of the resource.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: A list of other resources this resource depends on.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[Sequence[pulumi.Input['DeploymentResourceExpenseArgs']]] expenses: Expense incurred for the deployment.
        :param pulumi.Input[str] properties_json: List of properties in the encoded JSON string format.
        :param pulumi.Input[str] state: The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        :param pulumi.Input[str] sync_status: The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        :param pulumi.Input[str] type: Type of the resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expenses is not None:
            pulumi.set(__self__, "expenses", expenses)
        if properties_json is not None:
            pulumi.set(__self__, "properties_json", properties_json)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sync_status is not None:
            pulumi.set(__self__, "sync_status", sync_status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of other resources this resource depends on.
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentResourceExpenseArgs']]]]:
        """
        Expense incurred for the deployment.
        """
        return pulumi.get(self, "expenses")

    @expenses.setter
    def expenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentResourceExpenseArgs']]]]):
        pulumi.set(self, "expenses", value)

    @property
    @pulumi.getter(name="propertiesJson")
    def properties_json(self) -> Optional[pulumi.Input[str]]:
        """
        List of properties in the encoded JSON string format.
        """
        return pulumi.get(self, "properties_json")

    @properties_json.setter
    def properties_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "properties_json", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[pulumi.Input[str]]:
        """
        The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        """
        return pulumi.get(self, "sync_status")

    @sync_status.setter
    def sync_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeploymentResourceExpenseArgs:
    def __init__(__self__, *,
                 additional_expense: Optional[pulumi.Input[float]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 compute_expense: Optional[pulumi.Input[float]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 network_expense: Optional[pulumi.Input[float]] = None,
                 storage_expense: Optional[pulumi.Input[float]] = None,
                 total_expense: Optional[pulumi.Input[float]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] additional_expense: Additional expense incurred for the resource.
        :param pulumi.Input[str] code: Expense sync message code if any.
        :param pulumi.Input[float] compute_expense: Compute expense of the entity.
        :param pulumi.Input[str] last_update_time: Last expense sync time.
        :param pulumi.Input[str] message: Expense sync message if any.
        :param pulumi.Input[float] network_expense: Network expense of the entity.
        :param pulumi.Input[float] storage_expense: Storage expense of the entity.
        :param pulumi.Input[float] total_expense: Total expense of the entity.
        :param pulumi.Input[str] unit: Monetary unit.
        """
        if additional_expense is not None:
            pulumi.set(__self__, "additional_expense", additional_expense)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compute_expense is not None:
            pulumi.set(__self__, "compute_expense", compute_expense)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if network_expense is not None:
            pulumi.set(__self__, "network_expense", network_expense)
        if storage_expense is not None:
            pulumi.set(__self__, "storage_expense", storage_expense)
        if total_expense is not None:
            pulumi.set(__self__, "total_expense", total_expense)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @additional_expense.setter
    def additional_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "additional_expense", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @compute_expense.setter
    def compute_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "compute_expense", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @network_expense.setter
    def network_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "network_expense", value)

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @storage_expense.setter
    def storage_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storage_expense", value)

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> Optional[pulumi.Input[float]]:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @total_expense.setter
    def total_expense(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_expense", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class FabricComputeLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class FabricComputeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FabricDatastoreVsphereLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class FabricDatastoreVsphereTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FabricNetworkVsphereLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class FabricNetworkVsphereTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FlavorProfileFlavorMappingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cpu_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "name", name)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class FlavorProfileLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class ImageProfileImageMappingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cloud_config: Optional[pulumi.Input[str]] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['ImageProfileImageMappingConstraintArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The external regionId of the resource.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "name", name)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if private is not None:
            pulumi.set(__self__, "private", private)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageProfileImageMappingConstraintArgs']]]]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageProfileImageMappingConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)


@pulumi.input_type
class ImageProfileImageMappingConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class LoadBalancerLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class LoadBalancerNicArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[str],
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_index: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "network_id", network_id)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_index")

    @device_index.setter
    def device_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class LoadBalancerRouteArgs:
    def __init__(__self__, *,
                 member_port: pulumi.Input[str],
                 member_protocol: pulumi.Input[str],
                 port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 health_check_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteHealthCheckConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[str] member_port: Member port where the traffic is routed to.
        :param pulumi.Input[str] member_protocol: The protocol of the member traffic.
        :param pulumi.Input[str] port: Port which the load balancer is listening to.
        :param pulumi.Input[str] protocol: The protocol of the incoming load balancer requests.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteHealthCheckConfigurationArgs']]] health_check_configurations: Load balancer health check configuration.
        """
        pulumi.set(__self__, "member_port", member_port)
        pulumi.set(__self__, "member_protocol", member_protocol)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if health_check_configurations is not None:
            pulumi.set(__self__, "health_check_configurations", health_check_configurations)

    @property
    @pulumi.getter(name="memberPort")
    def member_port(self) -> pulumi.Input[str]:
        """
        Member port where the traffic is routed to.
        """
        return pulumi.get(self, "member_port")

    @member_port.setter
    def member_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_port", value)

    @property
    @pulumi.getter(name="memberProtocol")
    def member_protocol(self) -> pulumi.Input[str]:
        """
        The protocol of the member traffic.
        """
        return pulumi.get(self, "member_protocol")

    @member_protocol.setter
    def member_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_protocol", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Port which the load balancer is listening to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol of the incoming load balancer requests.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="healthCheckConfigurations")
    def health_check_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteHealthCheckConfigurationArgs']]]]:
        """
        Load balancer health check configuration.
        """
        return pulumi.get(self, "health_check_configurations")

    @health_check_configurations.setter
    def health_check_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteHealthCheckConfigurationArgs']]]]):
        pulumi.set(self, "health_check_configurations", value)


@pulumi.input_type
class LoadBalancerRouteHealthCheckConfigurationArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 healthy_threshold: Optional[pulumi.Input[int]] = None,
                 interval_seconds: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[int]] = None,
                 url_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port: Port which the load balancer is listening to.
        :param pulumi.Input[str] protocol: The protocol of the incoming load balancer requests.
        :param pulumi.Input[int] healthy_threshold: Number of consecutive successful checks before considering a particular back-end instance as healthy.
        :param pulumi.Input[int] interval_seconds: Interval (in seconds) at which the health checks will be performed.
        :param pulumi.Input[int] timeout_seconds: Timeout (in seconds) to wait for a response from the back-end instance.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        Port which the load balancer is listening to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        The protocol of the incoming load balancer requests.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive successful checks before considering a particular back-end instance as healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (in seconds) at which the health checks will be performed.
        """
        return pulumi.get(self, "interval_seconds")

    @interval_seconds.setter
    def interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_seconds", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout (in seconds) to wait for a response from the back-end instance.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_threshold", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)


@pulumi.input_type
class LoadBalancerTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoadBalancerTargetArgs:
    def __init__(__self__, *,
                 machine_id: pulumi.Input[str],
                 network_interface_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "machine_id", machine_id)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "machine_id")

    @machine_id.setter
    def machine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_id", value)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface_id", value)


@pulumi.input_type
class MachineBootConfigArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Calid cloud config data in json-escaped yaml syntax.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Calid cloud config data in json-escaped yaml syntax.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


@pulumi.input_type
class MachineConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] expression: Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        :param pulumi.Input[bool] mandatory: Indicates whether this constraint should be strictly enforced or not.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        """
        Indicates whether this constraint should be strictly enforced or not.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class MachineDiskArgs:
    def __init__(__self__, *,
                 block_device_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_device_id: ID of the existing block device.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "block_device_id", block_device_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="blockDeviceId")
    def block_device_id(self) -> pulumi.Input[str]:
        """
        ID of the existing block device.
        """
        return pulumi.get(self, "block_device_id")

    @block_device_id.setter
    def block_device_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "block_device_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MachineDisksListArgs:
    def __init__(__self__, *,
                 block_device_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_device_id: ID of the existing block device.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "block_device_id", block_device_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="blockDeviceId")
    def block_device_id(self) -> pulumi.Input[str]:
        """
        ID of the existing block device.
        """
        return pulumi.get(self, "block_device_id")

    @block_device_id.setter
    def block_device_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "block_device_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MachineImageDiskConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] expression: Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        :param pulumi.Input[bool] mandatory: Indicates whether this constraint should be strictly enforced or not.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        """
        Indicates whether this constraint should be strictly enforced or not.
        """
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class MachineLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class MachineNicArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[str],
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_index: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] network_id: ID of the network instance that this network interface plugs into.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] addresses: List of IP addresses allocated or in use by this network interface.
               example:[ "10.1.2.190" ]
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional properties that may be used to extend the base type.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[int] device_index: The device index of this network interface.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: List of security group ids which this network interface will be assigned to.
        """
        pulumi.set(__self__, "network_id", network_id)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        ID of the network instance that this network interface plugs into.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IP addresses allocated or in use by this network interface.
        example:[ "10.1.2.190" ]
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional properties that may be used to extend the base type.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[pulumi.Input[int]]:
        """
        The device index of this network interface.
        """
        return pulumi.get(self, "device_index")

    @device_index.setter
    def device_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of security group ids which this network interface will be assigned to.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class MachineTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class NetworkIpRangeLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class NetworkIpRangeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class NetworkProfileLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class NetworkProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProjectAdministratorRoleArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProjectConstraintsArgs:
    def __init__(__self__, *,
                 extensibilities: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsExtensibilityArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsNetworkArgs']]]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsStorageArgs']]]] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsExtensibilityArgs']]]]:
        return pulumi.get(self, "extensibilities")

    @extensibilities.setter
    def extensibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsExtensibilityArgs']]]]):
        pulumi.set(self, "extensibilities", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsStorageArgs']]]]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConstraintsStorageArgs']]]]):
        pulumi.set(self, "storages", value)


@pulumi.input_type
class ProjectConstraintsExtensibilityArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class ProjectConstraintsNetworkArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class ProjectConstraintsStorageArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class ProjectMemberRoleArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProjectViewerRoleArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ProjectZoneAssignmentArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[str],
                 cpu_limit: Optional[pulumi.Input[int]] = None,
                 max_instances: Optional[pulumi.Input[int]] = None,
                 memory_limit_mb: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 storage_limit_gb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "zone_id", zone_id)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if max_instances is not None:
            pulumi.set(__self__, "max_instances", max_instances)
        if memory_limit_mb is not None:
            pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if storage_limit_gb is not None:
            pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_instances")

    @max_instances.setter
    def max_instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_instances", value)

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_limit_mb")

    @memory_limit_mb.setter
    def memory_limit_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit_mb", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "storage_limit_gb")

    @storage_limit_gb.setter
    def storage_limit_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_limit_gb", value)


@pulumi.input_type
class StorageProfileAwsLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class StorageProfileAwsTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StorageProfileAzureLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class StorageProfileAzureTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StorageProfileLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class StorageProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StorageProfileVsphereLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class StorageProfileVsphereTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ZoneLinkArgs:
    def __init__(__self__, *,
                 rel: pulumi.Input[str],
                 href: Optional[pulumi.Input[str]] = None,
                 hrefs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: pulumi.Input[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hrefs")

    @hrefs.setter
    def hrefs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hrefs", value)


@pulumi.input_type
class ZoneTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ZoneTagsToMatchArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag’s key.
        :param pulumi.Input[str] value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetBlockDeviceTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountAwsTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountAzureTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountGcpTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountNsxtTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountNsxvTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountVmcTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetCloudAccountVsphereTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetFabricComputeTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetFabricDatastoreVsphereTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetFabricNetworkTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetImageProfileImageMappingArgs:
    def __init__(__self__, *,
                 description: str,
                 external_id: str,
                 external_region_id: str,
                 name: str,
                 organization: str,
                 os_family: str,
                 owner: str,
                 private: bool,
                 cloud_config: Optional[str] = None,
                 constraints: Optional[Sequence['GetImageProfileImageMappingConstraintArgs']] = None,
                 image_id: Optional[str] = None,
                 image_name: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str external_region_id: The external regionId of the resource.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "external_region_id", external_region_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "private", private)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: str):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: str):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: str):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: str):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: str):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: bool):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[str]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[Sequence['GetImageProfileImageMappingConstraintArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[Sequence['GetImageProfileImageMappingConstraintArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[str]):
        pulumi.set(self, "image_name", value)


@pulumi.input_type
class GetImageProfileImageMappingConstraintArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetMachineTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetNetworkConstraintArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetNetworkDomainTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetNetworkProfileTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetNetworkTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetProjectAdministratorRoleArgs:
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: str):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetProjectConstraintsArgs:
    def __init__(__self__, *,
                 extensibilities: Optional[Sequence['GetProjectConstraintsExtensibilityArgs']] = None,
                 networks: Optional[Sequence['GetProjectConstraintsNetworkArgs']] = None,
                 storages: Optional[Sequence['GetProjectConstraintsStorageArgs']] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[Sequence['GetProjectConstraintsExtensibilityArgs']]:
        return pulumi.get(self, "extensibilities")

    @extensibilities.setter
    def extensibilities(self, value: Optional[Sequence['GetProjectConstraintsExtensibilityArgs']]):
        pulumi.set(self, "extensibilities", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['GetProjectConstraintsNetworkArgs']]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[Sequence['GetProjectConstraintsNetworkArgs']]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['GetProjectConstraintsStorageArgs']]:
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[Sequence['GetProjectConstraintsStorageArgs']]):
        pulumi.set(self, "storages", value)


@pulumi.input_type
class GetProjectConstraintsExtensibilityArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetProjectConstraintsNetworkArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetProjectConstraintsStorageArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetProjectMemberRoleArgs:
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: str):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetProjectViewerRoleArgs:
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: str):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetProjectZoneAssignmentArgs:
    def __init__(__self__, *,
                 cpu_limit: int,
                 max_instances: int,
                 memory_limit_mb: int,
                 priority: int,
                 storage_limit_gb: int,
                 zone_id: str):
        pulumi.set(__self__, "cpu_limit", cpu_limit)
        pulumi.set(__self__, "max_instances", max_instances)
        pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> int:
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: int):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> int:
        return pulumi.get(self, "max_instances")

    @max_instances.setter
    def max_instances(self, value: int):
        pulumi.set(self, "max_instances", value)

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> int:
        return pulumi.get(self, "memory_limit_mb")

    @memory_limit_mb.setter
    def memory_limit_mb(self, value: int):
        pulumi.set(self, "memory_limit_mb", value)

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: int):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> int:
        return pulumi.get(self, "storage_limit_gb")

    @storage_limit_gb.setter
    def storage_limit_gb(self, value: int):
        pulumi.set(self, "storage_limit_gb", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: str):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class GetSecurityGroupRuleArgs:
    def __init__(__self__, *,
                 access: str,
                 direction: str,
                 ip_range_cidr: int,
                 ports: str,
                 protocol: str,
                 name: Optional[str] = None,
                 service: Optional[str] = None):
        """
        :param str name: Name of the security group.
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ip_range_cidr", ip_range_cidr)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def access(self) -> str:
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: str):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: str):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="ipRangeCidr")
    def ip_range_cidr(self) -> int:
        return pulumi.get(self, "ip_range_cidr")

    @ip_range_cidr.setter
    def ip_range_cidr(self, value: int):
        pulumi.set(self, "ip_range_cidr", value)

    @property
    @pulumi.getter
    def ports(self) -> str:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: str):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: str):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the security group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[str]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class GetStorageProfileAwsTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetStorageProfileAzureTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetStorageProfileTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetStorageProfileVsphereTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetZoneTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetZoneTagsToMatchArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


