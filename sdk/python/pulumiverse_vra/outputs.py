# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'BlockDeviceConstraint',
    'BlockDeviceLink',
    'BlockDeviceSnapshot',
    'BlockDeviceSnapshotLink',
    'BlockDeviceTag',
    'BlueprintValidationMessage',
    'CatalogItemEntitlementDefinition',
    'CatalogSourceEntitlementDefinition',
    'CloudAccountAwsLink',
    'CloudAccountAwsTag',
    'CloudAccountAzureLink',
    'CloudAccountAzureTag',
    'CloudAccountGcpLink',
    'CloudAccountGcpTag',
    'CloudAccountNsxtLink',
    'CloudAccountNsxtTag',
    'CloudAccountNsxvLink',
    'CloudAccountNsxvTag',
    'CloudAccountVmcLink',
    'CloudAccountVmcTag',
    'CloudAccountVsphereLink',
    'CloudAccountVsphereTag',
    'ContentSourceConfig',
    'DeploymentExpense',
    'DeploymentLastRequest',
    'DeploymentProject',
    'DeploymentResource',
    'DeploymentResourceExpense',
    'FabricComputeLink',
    'FabricComputeTag',
    'FabricDatastoreVsphereLink',
    'FabricDatastoreVsphereTag',
    'FabricNetworkVsphereLink',
    'FabricNetworkVsphereTag',
    'FlavorProfileFlavorMapping',
    'FlavorProfileLink',
    'ImageProfileImageMapping',
    'ImageProfileImageMappingConstraint',
    'LoadBalancerLink',
    'LoadBalancerNic',
    'LoadBalancerRoute',
    'LoadBalancerRouteHealthCheckConfiguration',
    'LoadBalancerTag',
    'LoadBalancerTarget',
    'MachineBootConfig',
    'MachineConstraint',
    'MachineDisk',
    'MachineDisksList',
    'MachineImageDiskConstraint',
    'MachineLink',
    'MachineNic',
    'MachineTag',
    'NetworkConstraint',
    'NetworkIpRangeLink',
    'NetworkIpRangeTag',
    'NetworkLink',
    'NetworkProfileLink',
    'NetworkProfileTag',
    'NetworkTag',
    'ProjectAdministratorRole',
    'ProjectConstraints',
    'ProjectConstraintsExtensibility',
    'ProjectConstraintsNetwork',
    'ProjectConstraintsStorage',
    'ProjectMemberRole',
    'ProjectViewerRole',
    'ProjectZoneAssignment',
    'StorageProfileAwsLink',
    'StorageProfileAwsTag',
    'StorageProfileAzureLink',
    'StorageProfileAzureTag',
    'StorageProfileLink',
    'StorageProfileTag',
    'StorageProfileVsphereLink',
    'StorageProfileVsphereTag',
    'ZoneLink',
    'ZoneTag',
    'ZoneTagsToMatch',
    'GetBlockDeviceLinkResult',
    'GetBlockDeviceSnapshotResult',
    'GetBlockDeviceSnapshotLinkResult',
    'GetBlockDeviceSnapshotsSnapshotResult',
    'GetBlockDeviceSnapshotsSnapshotLinkResult',
    'GetBlockDeviceTagResult',
    'GetBlueprintValidationMessageResult',
    'GetCatalogItemEntitlementDefinitionResult',
    'GetCatalogItemProjectResult',
    'GetCatalogItemTypeResult',
    'GetCatalogItemVersionResult',
    'GetCatalogSourceEntitlementDefinitionResult',
    'GetCloudAccountAwsLinkResult',
    'GetCloudAccountAwsTagResult',
    'GetCloudAccountAzureLinkResult',
    'GetCloudAccountAzureTagResult',
    'GetCloudAccountGcpLinkResult',
    'GetCloudAccountGcpTagResult',
    'GetCloudAccountNsxtLinkResult',
    'GetCloudAccountNsxtTagResult',
    'GetCloudAccountNsxvLinkResult',
    'GetCloudAccountNsxvTagResult',
    'GetCloudAccountVmcLinkResult',
    'GetCloudAccountVmcTagResult',
    'GetCloudAccountVsphereLinkResult',
    'GetCloudAccountVsphereTagResult',
    'GetDeploymentExpenseResult',
    'GetDeploymentLastRequestResult',
    'GetDeploymentProjectResult',
    'GetDeploymentResourceResult',
    'GetDeploymentResourceExpenseResult',
    'GetFabricComputeLinkResult',
    'GetFabricComputeTagResult',
    'GetFabricDatastoreVsphereLinkResult',
    'GetFabricDatastoreVsphereTagResult',
    'GetFabricNetworkLinkResult',
    'GetFabricNetworkTagResult',
    'GetFabricStorageAccountAzureLinkResult',
    'GetFabricStoragePolicyVsphereLinkResult',
    'GetImageProfileImageMappingResult',
    'GetImageProfileImageMappingConstraintResult',
    'GetMachineLinkResult',
    'GetMachineTagResult',
    'GetNetworkConstraintResult',
    'GetNetworkDomainLinkResult',
    'GetNetworkDomainTagResult',
    'GetNetworkLinkResult',
    'GetNetworkProfileLinkResult',
    'GetNetworkProfileTagResult',
    'GetNetworkTagResult',
    'GetProjectAdministratorRoleResult',
    'GetProjectConstraintsResult',
    'GetProjectConstraintsExtensibilityResult',
    'GetProjectConstraintsNetworkResult',
    'GetProjectConstraintsStorageResult',
    'GetProjectMemberRoleResult',
    'GetProjectViewerRoleResult',
    'GetProjectZoneAssignmentResult',
    'GetSecurityGroupLinkResult',
    'GetSecurityGroupRuleResult',
    'GetStorageProfileAwsLinkResult',
    'GetStorageProfileAwsTagResult',
    'GetStorageProfileAzureLinkResult',
    'GetStorageProfileAzureTagResult',
    'GetStorageProfileLinkResult',
    'GetStorageProfileTagResult',
    'GetStorageProfileVsphereLinkResult',
    'GetStorageProfileVsphereTagResult',
    'GetZoneLinkResult',
    'GetZoneTagResult',
    'GetZoneTagsToMatchResult',
]

@pulumi.output_type
class BlockDeviceConstraint(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class BlockDeviceLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class BlockDeviceSnapshot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlockDeviceSnapshot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlockDeviceSnapshot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlockDeviceSnapshot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 is_current: Optional[bool] = None,
                 links: Optional[Sequence['outputs.BlockDeviceSnapshotLink']] = None,
                 name: Optional[str] = None,
                 org_id: Optional[str] = None,
                 owner: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param str description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param str id: ID of the block device snapshot.
        :param bool is_current: Indicates whether snapshot on block device is current.
        :param Sequence['BlockDeviceSnapshotLinkArgs'] links: HATEOAS of the entity
        :param str name: Human-friendly name used as an identifier in APIs that support this option.
        :param str org_id: ID of organization that block device snapshot belongs to.
        :param str owner: Email of block device snapshot owner.
        :param str updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the block device snapshot.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        """
        Indicates whether snapshot on block device is current.
        """
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.BlockDeviceSnapshotLink']]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        ID of organization that block device snapshot belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        Email of block device snapshot owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class BlockDeviceSnapshotLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class BlockDeviceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BlueprintValidationMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintValidationMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintValidationMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintValidationMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: Optional[str] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 type: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CatalogItemEntitlementDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconId":
            suggest = "icon_id"
        elif key == "numberOfItems":
            suggest = "number_of_items"
        elif key == "sourceName":
            suggest = "source_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogItemEntitlementDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogItemEntitlementDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogItemEntitlementDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 icon_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 number_of_items: Optional[int] = None,
                 source_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: Description of the catalog item.
        :param str icon_id: Icon id of associated catalog item.
        :param str id: Id of the catalog item.
        :param str name: Name of the catalog item.
        :param int number_of_items: Number of items in the associated catalog source.
        :param str source_name: Catalog source name.
        :param str source_type: Catalog source type.
        :param str type: Content definition type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon_id is not None:
            pulumi.set(__self__, "icon_id", icon_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_items is not None:
            pulumi.set(__self__, "number_of_items", number_of_items)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the catalog item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> Optional[str]:
        """
        Icon id of associated catalog item.
        """
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the catalog item.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the catalog item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> Optional[int]:
        """
        Number of items in the associated catalog source.
        """
        return pulumi.get(self, "number_of_items")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        """
        Catalog source name.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        Catalog source type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Content definition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CatalogSourceEntitlementDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iconId":
            suggest = "icon_id"
        elif key == "numberOfItems":
            suggest = "number_of_items"
        elif key == "sourceName":
            suggest = "source_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CatalogSourceEntitlementDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CatalogSourceEntitlementDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CatalogSourceEntitlementDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 icon_id: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 number_of_items: Optional[int] = None,
                 source_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon_id is not None:
            pulumi.set(__self__, "icon_id", icon_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_items is not None:
            pulumi.set(__self__, "number_of_items", number_of_items)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> Optional[str]:
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> Optional[int]:
        return pulumi.get(self, "number_of_items")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CloudAccountAwsLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountAwsTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountAzureLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountAzureTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountGcpLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountGcpTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountNsxtLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountNsxtTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountNsxvLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountNsxvTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountVmcLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountVmcTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudAccountVsphereLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class CloudAccountVsphereTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ContentSourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "integrationId":
            suggest = "integration_id"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "contentType":
            suggest = "content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentSourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentSourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentSourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 integration_id: str,
                 path: str,
                 project_name: str,
                 branch: Optional[str] = None,
                 content_type: Optional[str] = None,
                 repository: Optional[str] = None):
        """
        :param str integration_id: Content source integration id as seen in vRA integrations.
        :param str path: Path to refer to in the content source repository and branch.
        :param str project_name: Name of the project.
        :param str branch: Content source branch name.
        :param str content_type: Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        :param str repository: Content source repository.
        """
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_name", project_name)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        """
        Content source integration id as seen in vRA integrations.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to refer to in the content source repository and branch.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Name of the project.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        Content source branch name.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Content source repository.
        """
        return pulumi.get(self, "repository")


@pulumi.output_type
class DeploymentExpense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalExpense":
            suggest = "additional_expense"
        elif key == "computeExpense":
            suggest = "compute_expense"
        elif key == "lastUpdateTime":
            suggest = "last_update_time"
        elif key == "networkExpense":
            suggest = "network_expense"
        elif key == "storageExpense":
            suggest = "storage_expense"
        elif key == "totalExpense":
            suggest = "total_expense"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentExpense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentExpense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentExpense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_expense: Optional[float] = None,
                 code: Optional[str] = None,
                 compute_expense: Optional[float] = None,
                 last_update_time: Optional[str] = None,
                 message: Optional[str] = None,
                 network_expense: Optional[float] = None,
                 storage_expense: Optional[float] = None,
                 total_expense: Optional[float] = None,
                 unit: Optional[str] = None):
        """
        :param float additional_expense: Additional expense incurred for the resource.
        :param str code: Expense sync message code if any.
        :param float compute_expense: Compute expense of the entity.
        :param str last_update_time: Last expense sync time.
        :param str message: Expense sync message if any.
        :param float network_expense: Network expense of the entity.
        :param float storage_expense: Storage expense of the entity.
        :param float total_expense: Total expense of the entity.
        :param str unit: Monetary unit.
        """
        if additional_expense is not None:
            pulumi.set(__self__, "additional_expense", additional_expense)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compute_expense is not None:
            pulumi.set(__self__, "compute_expense", compute_expense)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if network_expense is not None:
            pulumi.set(__self__, "network_expense", network_expense)
        if storage_expense is not None:
            pulumi.set(__self__, "storage_expense", storage_expense)
        if total_expense is not None:
            pulumi.set(__self__, "total_expense", total_expense)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> Optional[float]:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> Optional[float]:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[str]:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> Optional[float]:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> Optional[float]:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> Optional[float]:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class DeploymentLastRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"
        elif key == "approvedAt":
            suggest = "approved_at"
        elif key == "blueprintId":
            suggest = "blueprint_id"
        elif key == "catalogItemId":
            suggest = "catalog_item_id"
        elif key == "completedAt":
            suggest = "completed_at"
        elif key == "completedTasks":
            suggest = "completed_tasks"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "initializedAt":
            suggest = "initialized_at"
        elif key == "requestedBy":
            suggest = "requested_by"
        elif key == "resourceIds":
            suggest = "resource_ids"
        elif key == "totalTasks":
            suggest = "total_tasks"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentLastRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentLastRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentLastRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_id: Optional[str] = None,
                 approved_at: Optional[str] = None,
                 blueprint_id: Optional[str] = None,
                 cancelable: Optional[bool] = None,
                 catalog_item_id: Optional[str] = None,
                 completed_at: Optional[str] = None,
                 completed_tasks: Optional[int] = None,
                 created_at: Optional[str] = None,
                 details: Optional[str] = None,
                 dismissed: Optional[bool] = None,
                 id: Optional[str] = None,
                 initialized_at: Optional[str] = None,
                 inputs: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 outputs: Optional[Mapping[str, str]] = None,
                 requested_by: Optional[str] = None,
                 resource_ids: Optional[Sequence[str]] = None,
                 status: Optional[str] = None,
                 total_tasks: Optional[int] = None,
                 updated_at: Optional[str] = None):
        """
        :param str action_id: Identifier of the requested action.
        :param str approved_at: Time at which the request was approved.
        :param str blueprint_id: Identifier of the requested blueprint in the form ‘UUID:version’.
        :param bool cancelable: Indicates whether request can be canceled or not.
        :param str catalog_item_id: The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.
        :param str completed_at: Time at which the request completed.
        :param int completed_tasks: The number of tasks completed while fulfilling this request.
        :param str created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param str details: Longer user-friendly details of the request.
        :param bool dismissed: Indicates whether request is in dismissed state.
        :param str id: Unique identifier of the resource.
        :param str initialized_at: Time at which the request was initialized.
        :param Mapping[str, str] inputs: Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param Mapping[str, str] outputs: Request outputs.
        :param str requested_by: The user that initiated the request.
        :param str status: Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        :param str updated_at: Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if approved_at is not None:
            pulumi.set(__self__, "approved_at", approved_at)
        if blueprint_id is not None:
            pulumi.set(__self__, "blueprint_id", blueprint_id)
        if cancelable is not None:
            pulumi.set(__self__, "cancelable", cancelable)
        if catalog_item_id is not None:
            pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if completed_tasks is not None:
            pulumi.set(__self__, "completed_tasks", completed_tasks)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if dismissed is not None:
            pulumi.set(__self__, "dismissed", dismissed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initialized_at is not None:
            pulumi.set(__self__, "initialized_at", initialized_at)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if requested_by is not None:
            pulumi.set(__self__, "requested_by", requested_by)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_tasks is not None:
            pulumi.set(__self__, "total_tasks", total_tasks)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[str]:
        """
        Identifier of the requested action.
        """
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="approvedAt")
    def approved_at(self) -> Optional[str]:
        """
        Time at which the request was approved.
        """
        return pulumi.get(self, "approved_at")

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> Optional[str]:
        """
        Identifier of the requested blueprint in the form ‘UUID:version’.
        """
        return pulumi.get(self, "blueprint_id")

    @property
    @pulumi.getter
    def cancelable(self) -> Optional[bool]:
        """
        Indicates whether request can be canceled or not.
        """
        return pulumi.get(self, "cancelable")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[str]:
        """
        The id of the vRA catalog item to request the deployment. Conflicts with `blueprint_id` and `blueprint_content`.
        """
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[str]:
        """
        Time at which the request completed.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter(name="completedTasks")
    def completed_tasks(self) -> Optional[int]:
        """
        The number of tasks completed while fulfilling this request.
        """
        return pulumi.get(self, "completed_tasks")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def details(self) -> Optional[str]:
        """
        Longer user-friendly details of the request.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def dismissed(self) -> Optional[bool]:
        """
        Indicates whether request is in dismissed state.
        """
        return pulumi.get(self, "dismissed")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initializedAt")
    def initialized_at(self) -> Optional[str]:
        """
        Time at which the request was initialized.
        """
        return pulumi.get(self, "initialized_at")

    @property
    @pulumi.getter
    def inputs(self) -> Optional[Mapping[str, str]]:
        """
        Inputs provided by the user. For inputs including those with default values, refer to `inputs_including_defaults`.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Mapping[str, str]]:
        """
        Request outputs.
        """
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter(name="requestedBy")
    def requested_by(self) -> Optional[str]:
        """
        The user that initiated the request.
        """
        return pulumi.get(self, "requested_by")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalTasks")
    def total_tasks(self) -> Optional[int]:
        return pulumi.get(self, "total_tasks")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DeploymentProject(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str id: Unique identifier of the resource.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str version: Version of the entity, if applicable.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the entity, if applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeploymentResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "propertiesJson":
            suggest = "properties_json"
        elif key == "syncStatus":
            suggest = "sync_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 name: str,
                 created_at: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 expenses: Optional[Sequence['outputs.DeploymentResourceExpense']] = None,
                 properties_json: Optional[str] = None,
                 state: Optional[str] = None,
                 sync_status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str id: Unique identifier of the resource.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param Sequence[str] depends_ons: A list of other resources this resource depends on.
        :param str description: A human-friendly description.
        :param Sequence['DeploymentResourceExpenseArgs'] expenses: Expense incurred for the deployment.
        :param str properties_json: List of properties in the encoded JSON string format.
        :param str state: The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        :param str sync_status: The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        :param str type: Type of the resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expenses is not None:
            pulumi.set(__self__, "expenses", expenses)
        if properties_json is not None:
            pulumi.set(__self__, "properties_json", properties_json)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sync_status is not None:
            pulumi.set(__self__, "sync_status", sync_status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        A list of other resources this resource depends on.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expenses(self) -> Optional[Sequence['outputs.DeploymentResourceExpense']]:
        """
        Expense incurred for the deployment.
        """
        return pulumi.get(self, "expenses")

    @property
    @pulumi.getter(name="propertiesJson")
    def properties_json(self) -> Optional[str]:
        """
        List of properties in the encoded JSON string format.
        """
        return pulumi.get(self, "properties_json")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[str]:
        """
        The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        """
        return pulumi.get(self, "sync_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeploymentResourceExpense(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalExpense":
            suggest = "additional_expense"
        elif key == "computeExpense":
            suggest = "compute_expense"
        elif key == "lastUpdateTime":
            suggest = "last_update_time"
        elif key == "networkExpense":
            suggest = "network_expense"
        elif key == "storageExpense":
            suggest = "storage_expense"
        elif key == "totalExpense":
            suggest = "total_expense"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentResourceExpense. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentResourceExpense.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentResourceExpense.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_expense: Optional[float] = None,
                 code: Optional[str] = None,
                 compute_expense: Optional[float] = None,
                 last_update_time: Optional[str] = None,
                 message: Optional[str] = None,
                 network_expense: Optional[float] = None,
                 storage_expense: Optional[float] = None,
                 total_expense: Optional[float] = None,
                 unit: Optional[str] = None):
        """
        :param float additional_expense: Additional expense incurred for the resource.
        :param str code: Expense sync message code if any.
        :param float compute_expense: Compute expense of the entity.
        :param str last_update_time: Last expense sync time.
        :param str message: Expense sync message if any.
        :param float network_expense: Network expense of the entity.
        :param float storage_expense: Storage expense of the entity.
        :param float total_expense: Total expense of the entity.
        :param str unit: Monetary unit.
        """
        if additional_expense is not None:
            pulumi.set(__self__, "additional_expense", additional_expense)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if compute_expense is not None:
            pulumi.set(__self__, "compute_expense", compute_expense)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if network_expense is not None:
            pulumi.set(__self__, "network_expense", network_expense)
        if storage_expense is not None:
            pulumi.set(__self__, "storage_expense", storage_expense)
        if total_expense is not None:
            pulumi.set(__self__, "total_expense", total_expense)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> Optional[float]:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> Optional[float]:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[str]:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> Optional[float]:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> Optional[float]:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> Optional[float]:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class FabricComputeLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class FabricComputeTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FabricDatastoreVsphereLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class FabricDatastoreVsphereTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FabricNetworkVsphereLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class FabricNetworkVsphereTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class FlavorProfileFlavorMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCount":
            suggest = "cpu_count"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlavorProfileFlavorMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlavorProfileFlavorMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlavorProfileFlavorMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 cpu_count: Optional[int] = None,
                 instance_type: Optional[str] = None,
                 memory: Optional[int] = None):
        """
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "name", name)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[int]:
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def memory(self) -> Optional[int]:
        return pulumi.get(self, "memory")


@pulumi.output_type
class FlavorProfileLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class ImageProfileImageMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudConfig":
            suggest = "cloud_config"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "externalRegionId":
            suggest = "external_region_id"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "osFamily":
            suggest = "os_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageProfileImageMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageProfileImageMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageProfileImageMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 cloud_config: Optional[str] = None,
                 constraints: Optional[Sequence['outputs.ImageProfileImageMappingConstraint']] = None,
                 description: Optional[str] = None,
                 external_id: Optional[str] = None,
                 external_region_id: Optional[str] = None,
                 image_id: Optional[str] = None,
                 image_name: Optional[str] = None,
                 organization: Optional[str] = None,
                 os_family: Optional[str] = None,
                 owner: Optional[str] = None,
                 private: Optional[bool] = None):
        """
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str description: A human-friendly description.
        :param str external_region_id: The external regionId of the resource.
        :param str owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "name", name)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if private is not None:
            pulumi.set(__self__, "private", private)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_config")

    @property
    @pulumi.getter
    def constraints(self) -> Optional[Sequence['outputs.ImageProfileImageMappingConstraint']]:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[str]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[str]:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def private(self) -> Optional[bool]:
        return pulumi.get(self, "private")


@pulumi.output_type
class ImageProfileImageMappingConstraint(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class LoadBalancerLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class LoadBalancerNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "deviceIndex":
            suggest = "device_index"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str,
                 addresses: Optional[Sequence[str]] = None,
                 custom_properties: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 device_index: Optional[int] = None,
                 name: Optional[str] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param Mapping[str, Any] custom_properties: Additional custom properties that may be used to extend the machine.
        :param str description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "network_id", network_id)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Mapping[str, Any]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[int]:
        return pulumi.get(self, "device_index")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class LoadBalancerRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberPort":
            suggest = "member_port"
        elif key == "memberProtocol":
            suggest = "member_protocol"
        elif key == "healthCheckConfigurations":
            suggest = "health_check_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_port: str,
                 member_protocol: str,
                 port: str,
                 protocol: str,
                 health_check_configurations: Optional[Sequence['outputs.LoadBalancerRouteHealthCheckConfiguration']] = None):
        """
        :param str member_port: Member port where the traffic is routed to.
        :param str member_protocol: The protocol of the member traffic.
        :param str port: Port which the load balancer is listening to.
        :param str protocol: The protocol of the incoming load balancer requests.
        :param Sequence['LoadBalancerRouteHealthCheckConfigurationArgs'] health_check_configurations: Load balancer health check configuration.
        """
        pulumi.set(__self__, "member_port", member_port)
        pulumi.set(__self__, "member_protocol", member_protocol)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if health_check_configurations is not None:
            pulumi.set(__self__, "health_check_configurations", health_check_configurations)

    @property
    @pulumi.getter(name="memberPort")
    def member_port(self) -> str:
        """
        Member port where the traffic is routed to.
        """
        return pulumi.get(self, "member_port")

    @property
    @pulumi.getter(name="memberProtocol")
    def member_protocol(self) -> str:
        """
        The protocol of the member traffic.
        """
        return pulumi.get(self, "member_protocol")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port which the load balancer is listening to.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the incoming load balancer requests.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="healthCheckConfigurations")
    def health_check_configurations(self) -> Optional[Sequence['outputs.LoadBalancerRouteHealthCheckConfiguration']]:
        """
        Load balancer health check configuration.
        """
        return pulumi.get(self, "health_check_configurations")


@pulumi.output_type
class LoadBalancerRouteHealthCheckConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "intervalSeconds":
            suggest = "interval_seconds"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"
        elif key == "urlPath":
            suggest = "url_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerRouteHealthCheckConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerRouteHealthCheckConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerRouteHealthCheckConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: str,
                 protocol: str,
                 healthy_threshold: Optional[int] = None,
                 interval_seconds: Optional[int] = None,
                 timeout_seconds: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None,
                 url_path: Optional[str] = None):
        """
        :param str port: Port which the load balancer is listening to.
        :param str protocol: The protocol of the incoming load balancer requests.
        :param int healthy_threshold: Number of consecutive successful checks before considering a particular back-end instance as healthy.
        :param int interval_seconds: Interval (in seconds) at which the health checks will be performed.
        :param int timeout_seconds: Timeout (in seconds) to wait for a response from the back-end instance.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if interval_seconds is not None:
            pulumi.set(__self__, "interval_seconds", interval_seconds)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port which the load balancer is listening to.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the incoming load balancer requests.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive successful checks before considering a particular back-end instance as healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[int]:
        """
        Interval (in seconds) at which the health checks will be performed.
        """
        return pulumi.get(self, "interval_seconds")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Timeout (in seconds) to wait for a response from the back-end instance.
        """
        return pulumi.get(self, "timeout_seconds")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[str]:
        return pulumi.get(self, "url_path")


@pulumi.output_type
class LoadBalancerTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "machineId":
            suggest = "machine_id"
        elif key == "networkInterfaceId":
            suggest = "network_interface_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 machine_id: str,
                 network_interface_id: Optional[str] = None):
        pulumi.set(__self__, "machine_id", machine_id)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)

    @property
    @pulumi.getter(name="machineId")
    def machine_id(self) -> str:
        return pulumi.get(self, "machine_id")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[str]:
        return pulumi.get(self, "network_interface_id")


@pulumi.output_type
class MachineBootConfig(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None):
        """
        :param str content: Calid cloud config data in json-escaped yaml syntax.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Calid cloud config data in json-escaped yaml syntax.
        """
        return pulumi.get(self, "content")


@pulumi.output_type
class MachineConstraint(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        """
        :param str expression: Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        :param bool mandatory: Indicates whether this constraint should be strictly enforced or not.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        """
        Indicates whether this constraint should be strictly enforced or not.
        """
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class MachineDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockDeviceId":
            suggest = "block_device_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_device_id: str,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str block_device_id: ID of the existing block device.
        :param str description: Human-friendly description.
        :param str name: Human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "block_device_id", block_device_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="blockDeviceId")
    def block_device_id(self) -> str:
        """
        ID of the existing block device.
        """
        return pulumi.get(self, "block_device_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MachineDisksList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockDeviceId":
            suggest = "block_device_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineDisksList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineDisksList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineDisksList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_device_id: str,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str block_device_id: ID of the existing block device.
        :param str description: Human-friendly description.
        :param str name: Human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "block_device_id", block_device_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="blockDeviceId")
    def block_device_id(self) -> str:
        """
        ID of the existing block device.
        """
        return pulumi.get(self, "block_device_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MachineImageDiskConstraint(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        """
        :param str expression: Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        :param bool mandatory: Indicates whether this constraint should be strictly enforced or not.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        """
        Indicates whether this constraint should be strictly enforced or not.
        """
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class MachineLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class MachineNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "customProperties":
            suggest = "custom_properties"
        elif key == "deviceIndex":
            suggest = "device_index"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MachineNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MachineNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MachineNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str,
                 addresses: Optional[Sequence[str]] = None,
                 custom_properties: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 device_index: Optional[int] = None,
                 name: Optional[str] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param str network_id: ID of the network instance that this network interface plugs into.
        :param Sequence[str] addresses: List of IP addresses allocated or in use by this network interface.
               example:[ "10.1.2.190" ]
        :param Mapping[str, Any] custom_properties: Additional properties that may be used to extend the base type.
        :param str description: Human-friendly description.
        :param int device_index: The device index of this network interface.
        :param str name: Human-friendly name used as an identifier in APIs that support this option.
        :param Sequence[str] security_group_ids: List of security group ids which this network interface will be assigned to.
        """
        pulumi.set(__self__, "network_id", network_id)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        ID of the network instance that this network interface plugs into.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        List of IP addresses allocated or in use by this network interface.
        example:[ "10.1.2.190" ]
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[Mapping[str, Any]]:
        """
        Additional properties that may be used to extend the base type.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[int]:
        """
        The device index of this network interface.
        """
        return pulumi.get(self, "device_index")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        List of security group ids which this network interface will be assigned to.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class MachineTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkConstraint(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class NetworkIpRangeLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class NetworkIpRangeTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class NetworkProfileLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class NetworkProfileTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectAdministratorRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectConstraints(dict):
    def __init__(__self__, *,
                 extensibilities: Optional[Sequence['outputs.ProjectConstraintsExtensibility']] = None,
                 networks: Optional[Sequence['outputs.ProjectConstraintsNetwork']] = None,
                 storages: Optional[Sequence['outputs.ProjectConstraintsStorage']] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[Sequence['outputs.ProjectConstraintsExtensibility']]:
        return pulumi.get(self, "extensibilities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['outputs.ProjectConstraintsNetwork']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.ProjectConstraintsStorage']]:
        return pulumi.get(self, "storages")


@pulumi.output_type
class ProjectConstraintsExtensibility(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectConstraintsNetwork(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectConstraintsStorage(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectMemberRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectViewerRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectZoneAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zoneId":
            suggest = "zone_id"
        elif key == "cpuLimit":
            suggest = "cpu_limit"
        elif key == "maxInstances":
            suggest = "max_instances"
        elif key == "memoryLimitMb":
            suggest = "memory_limit_mb"
        elif key == "storageLimitGb":
            suggest = "storage_limit_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectZoneAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectZoneAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectZoneAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone_id: str,
                 cpu_limit: Optional[int] = None,
                 max_instances: Optional[int] = None,
                 memory_limit_mb: Optional[int] = None,
                 priority: Optional[int] = None,
                 storage_limit_gb: Optional[int] = None):
        pulumi.set(__self__, "zone_id", zone_id)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if max_instances is not None:
            pulumi.set(__self__, "max_instances", max_instances)
        if memory_limit_mb is not None:
            pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if storage_limit_gb is not None:
            pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[int]:
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> Optional[int]:
        return pulumi.get(self, "max_instances")

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> Optional[int]:
        return pulumi.get(self, "memory_limit_mb")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> Optional[int]:
        return pulumi.get(self, "storage_limit_gb")


@pulumi.output_type
class StorageProfileAwsLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class StorageProfileAwsTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageProfileAzureLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class StorageProfileAzureTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageProfileLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class StorageProfileTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageProfileVsphereLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class StorageProfileVsphereTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ZoneLink(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class ZoneTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ZoneTagsToMatch(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBlockDeviceLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetBlockDeviceSnapshotResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: str,
                 is_current: bool,
                 links: Sequence['outputs.GetBlockDeviceSnapshotLinkResult'],
                 name: str,
                 org_id: str,
                 owner: str,
                 updated_at: str):
        """
        :param str created_at: Date when the entity was created. The date is in ISO 6801 and UTC.
        :param str description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param str id: The id of the block device.
        :param Sequence['GetBlockDeviceSnapshotLinkArgs'] links: HATEOAS of the entity.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str org_id: The id of the organization this entity belongs to.
        :param str owner: Email of the user that owns the entity.
        :param str updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the block device.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetBlockDeviceSnapshotLinkResult']:
        """
        HATEOAS of the entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBlockDeviceSnapshotLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetBlockDeviceSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: str,
                 is_current: bool,
                 links: Sequence['outputs.GetBlockDeviceSnapshotsSnapshotLinkResult'],
                 name: str,
                 org_id: str,
                 owner: str,
                 updated_at: str):
        """
        :param str created_at: Date when the entity was created. The date is in ISO 6801 and UTC.
        :param str description: A human-friendly description.
        :param bool is_current: Indicates whether this snapshot is the current snapshot on the block-device.
        :param Sequence['GetBlockDeviceSnapshotsSnapshotLinkArgs'] links: HATEOAS of the entity
        :param str name: A human-friendly name used as an identifier in APIs that support this option.  Only one of 'filter', 'id', 'name' or 'region_id' must be specified.
        :param str org_id: The id of the organization this entity belongs to.
        :param str owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_current", is_current)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> bool:
        """
        Indicates whether this snapshot is the current snapshot on the block-device.
        """
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetBlockDeviceSnapshotsSnapshotLinkResult']:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.  Only one of 'filter', 'id', 'name' or 'region_id' must be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBlockDeviceSnapshotsSnapshotLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetBlockDeviceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBlueprintValidationMessageResult(dict):
    def __init__(__self__, *,
                 message: str,
                 path: str,
                 resource_name: str,
                 type: str,
                 metadata: Optional[Mapping[str, str]] = None):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "type", type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class GetCatalogItemEntitlementDefinitionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 icon_id: str,
                 id: str,
                 name: str,
                 number_of_items: int,
                 source_name: str,
                 source_type: str,
                 type: str):
        """
        :param str description: Description of the catalog item.
        :param str icon_id: Icon id of associated catalog item.
        :param str id: The id of entitlement. One of `catalog_item_id` or `id` must be provided.
        :param str name: Name of the catalog item.
        :param int number_of_items: Number of items in the associated catalog source.
        :param str source_name: Catalog source name.
        :param str source_type: Catalog source type.
        :param str type: Content definition type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "icon_id", icon_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number_of_items", number_of_items)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the catalog item.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> str:
        """
        Icon id of associated catalog item.
        """
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of entitlement. One of `catalog_item_id` or `id` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the catalog item.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> int:
        """
        Number of items in the associated catalog source.
        """
        return pulumi.get(self, "number_of_items")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        """
        Catalog source name.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Catalog source type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Content definition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCatalogItemProjectResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str id: The id of catalog item. One of `id`, or `name` must be provided.
        :param str name: Name of the catalog item. One of `id`, or `name` must be provided.
        :param str version: Version of the entity, if applicable.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of catalog item. One of `id`, or `name` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the catalog item. One of `id`, or `name` must be provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the entity, if applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCatalogItemTypeResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str id: The id of catalog item. One of `id`, or `name` must be provided.
        :param str name: Name of the catalog item. One of `id`, or `name` must be provided.
        :param str version: Version of the entity, if applicable.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of catalog item. One of `id`, or `name` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the catalog item. One of `id`, or `name` must be provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the entity, if applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCatalogItemVersionResult(dict):
    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str created_at: Date-time when catalog item version was created at.
        :param str description: A human-friendly description.
        :param str id: The id of catalog item. One of `id`, or `name` must be provided.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Date-time when catalog item version was created at.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of catalog item. One of `id`, or `name` must be provided.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetCatalogSourceEntitlementDefinitionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 icon_id: str,
                 id: str,
                 name: str,
                 number_of_items: int,
                 source_name: str,
                 source_type: str,
                 type: str):
        """
        :param str description: Description of the catalog source.
        :param str icon_id: Icon id of associated catalog source.
        :param str id: The id of entitlement. One of `catalog_source_id` or `id` must be provided.
        :param str name: Name of the catalog source.
        :param int number_of_items: Number of items in the associated catalog source.
        :param str source_name: Catalog source name.
        :param str source_type: Catalog source type.
        :param str type: Content definition type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "icon_id", icon_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number_of_items", number_of_items)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the catalog source.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> str:
        """
        Icon id of associated catalog source.
        """
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of entitlement. One of `catalog_source_id` or `id` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the catalog source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfItems")
    def number_of_items(self) -> int:
        """
        Number of items in the associated catalog source.
        """
        return pulumi.get(self, "number_of_items")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        """
        Catalog source name.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Catalog source type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Content definition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCloudAccountAwsLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountAwsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountAzureLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountAzureTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountGcpLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountGcpTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountNsxtLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountNsxtTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountNsxvLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountNsxvTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountVmcLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountVmcTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudAccountVsphereLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetCloudAccountVsphereTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentExpenseResult(dict):
    def __init__(__self__, *,
                 additional_expense: float,
                 code: str,
                 compute_expense: float,
                 last_update_time: str,
                 message: str,
                 network_expense: float,
                 storage_expense: float,
                 total_expense: float,
                 unit: str):
        """
        :param float additional_expense: Additional expense incurred for the resource.
        :param str code: Expense sync message code if any.
        :param float compute_expense: Compute expense of the entity.
        :param str last_update_time: Last expense sync time.
        :param str message: Expense sync message if any.
        :param float network_expense: Network expense of the entity.
        :param float storage_expense: Storage expense of the entity.
        :param float total_expense: Total expense of the entity.
        :param str unit: Monetary unit.
        """
        pulumi.set(__self__, "additional_expense", additional_expense)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "compute_expense", compute_expense)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "network_expense", network_expense)
        pulumi.set(__self__, "storage_expense", storage_expense)
        pulumi.set(__self__, "total_expense", total_expense)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> float:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> float:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> float:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> float:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> float:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetDeploymentLastRequestResult(dict):
    def __init__(__self__, *,
                 action_id: str,
                 approved_at: str,
                 blueprint_id: str,
                 cancelable: bool,
                 catalog_item_id: str,
                 completed_at: str,
                 completed_tasks: int,
                 created_at: str,
                 details: str,
                 dismissed: bool,
                 id: str,
                 initialized_at: str,
                 inputs: Mapping[str, str],
                 name: str,
                 outputs: Mapping[str, str],
                 requested_by: str,
                 resource_ids: Sequence[str],
                 status: str,
                 total_tasks: int,
                 updated_at: str):
        """
        :param str action_id: Identifier of the requested action.
        :param str approved_at: Time at which the request was approved.
        :param str blueprint_id: Identifier of the requested blueprint in the form ‘UUID:version’.
        :param bool cancelable: Indicates whether request can be canceled or not.
        :param str catalog_item_id: Identifier of the requested catalog item in the form ‘UUID:version’.
        :param str completed_at: Time at which the request completed.
        :param int completed_tasks: The number of tasks completed while fulfilling this request.
        :param str created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param str details: Longer user-friendly details of the request.
        :param bool dismissed: Indicates whether request is in dismissed state.
        :param str id: The id of the deployment. One of `id` or `name` must be provided.
        :param str initialized_at: Time at which the request was initialized.
        :param Mapping[str, str] inputs: List of request inputs.
        :param str name: Name of the deployment. One of `id` or `name` must be provided.
        :param Mapping[str, str] outputs: Request outputs.
        :param str requested_by: The user that initiated the request.
        :param str status: Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        :param str updated_at: Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "approved_at", approved_at)
        pulumi.set(__self__, "blueprint_id", blueprint_id)
        pulumi.set(__self__, "cancelable", cancelable)
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        pulumi.set(__self__, "completed_at", completed_at)
        pulumi.set(__self__, "completed_tasks", completed_tasks)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "dismissed", dismissed)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initialized_at", initialized_at)
        pulumi.set(__self__, "inputs", inputs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "outputs", outputs)
        pulumi.set(__self__, "requested_by", requested_by)
        pulumi.set(__self__, "resource_ids", resource_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "total_tasks", total_tasks)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        """
        Identifier of the requested action.
        """
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="approvedAt")
    def approved_at(self) -> str:
        """
        Time at which the request was approved.
        """
        return pulumi.get(self, "approved_at")

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> str:
        """
        Identifier of the requested blueprint in the form ‘UUID:version’.
        """
        return pulumi.get(self, "blueprint_id")

    @property
    @pulumi.getter
    def cancelable(self) -> bool:
        """
        Indicates whether request can be canceled or not.
        """
        return pulumi.get(self, "cancelable")

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> str:
        """
        Identifier of the requested catalog item in the form ‘UUID:version’.
        """
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> str:
        """
        Time at which the request completed.
        """
        return pulumi.get(self, "completed_at")

    @property
    @pulumi.getter(name="completedTasks")
    def completed_tasks(self) -> int:
        """
        The number of tasks completed while fulfilling this request.
        """
        return pulumi.get(self, "completed_tasks")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def details(self) -> str:
        """
        Longer user-friendly details of the request.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def dismissed(self) -> bool:
        """
        Indicates whether request is in dismissed state.
        """
        return pulumi.get(self, "dismissed")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initializedAt")
    def initialized_at(self) -> str:
        """
        Time at which the request was initialized.
        """
        return pulumi.get(self, "initialized_at")

    @property
    @pulumi.getter
    def inputs(self) -> Mapping[str, str]:
        """
        List of request inputs.
        """
        return pulumi.get(self, "inputs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def outputs(self) -> Mapping[str, str]:
        """
        Request outputs.
        """
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter(name="requestedBy")
    def requested_by(self) -> str:
        """
        The user that initiated the request.
        """
        return pulumi.get(self, "requested_by")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Deployment status. Supported values are: `CREATE_SUCCESSFUL`, `CREATE_INPROGRESS`, `CREATE_FAILED`, `UPDATE_SUCCESSFUL`, `UPDATE_INPROGRESS`, `UPDATE_FAILED`, `DELETE_SUCCESSFUL`, `DELETE_INPROGRESS`, `DELETE_FAILED`, `ACTION_SUCCESSFUL`, `ACTION_INPROGRESS`, `ACTION_FAILED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalTasks")
    def total_tasks(self) -> int:
        return pulumi.get(self, "total_tasks")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Last update time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDeploymentProjectResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str description: A description of the resource.
        :param str id: The id of the deployment. One of `id` or `name` must be provided.
        :param str name: Name of the deployment. One of `id` or `name` must be provided.
        :param str version: Version of the entity, if applicable.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the entity, if applicable.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDeploymentResourceResult(dict):
    def __init__(__self__, *,
                 expenses: Sequence['outputs.GetDeploymentResourceExpenseResult'],
                 id: str,
                 name: str,
                 created_at: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 properties_json: Optional[str] = None,
                 state: Optional[str] = None,
                 sync_status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence['GetDeploymentResourceExpenseArgs'] expenses: Expense incurred for this resource.
        :param str id: The id of the deployment. One of `id` or `name` must be provided.
        :param str name: Name of the deployment. One of `id` or `name` must be provided.
        :param str created_at: Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        :param Sequence[str] depends_ons: A list of other resources this resource depends on.
        :param str description: A description of the resource.
        :param str properties_json: List of properties in the encoded JSON string format.
        :param str state: The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        :param str sync_status: The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        :param str type: Type of the resource.
        """
        pulumi.set(__self__, "expenses", expenses)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if properties_json is not None:
            pulumi.set(__self__, "properties_json", properties_json)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sync_status is not None:
            pulumi.set(__self__, "sync_status", sync_status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expenses(self) -> Sequence['outputs.GetDeploymentResourceExpenseResult']:
        """
        Expense incurred for this resource.
        """
        return pulumi.get(self, "expenses")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the deployment. One of `id` or `name` must be provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Creation time (e.g. date format ‘2019-07-13T23:16:49.310Z’).
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        A list of other resources this resource depends on.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="propertiesJson")
    def properties_json(self) -> Optional[str]:
        """
        List of properties in the encoded JSON string format.
        """
        return pulumi.get(self, "properties_json")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the resource. Supported values are `PARTIAL`, `TAINTED`, `OK.`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[str]:
        """
        The current sync status. Supported values are `SUCCESS`, `MISSING`, `STALE`.
        """
        return pulumi.get(self, "sync_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDeploymentResourceExpenseResult(dict):
    def __init__(__self__, *,
                 additional_expense: float,
                 code: str,
                 compute_expense: float,
                 last_update_time: str,
                 message: str,
                 network_expense: float,
                 storage_expense: float,
                 total_expense: float,
                 unit: str):
        """
        :param float additional_expense: Additional expense incurred for the resource.
        :param str code: Expense sync message code if any.
        :param float compute_expense: Compute expense of the entity.
        :param str last_update_time: Last expense sync time.
        :param str message: Expense sync message if any.
        :param float network_expense: Network expense of the entity.
        :param float storage_expense: Storage expense of the entity.
        :param float total_expense: Total expense of the entity.
        :param str unit: Monetary unit.
        """
        pulumi.set(__self__, "additional_expense", additional_expense)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "compute_expense", compute_expense)
        pulumi.set(__self__, "last_update_time", last_update_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "network_expense", network_expense)
        pulumi.set(__self__, "storage_expense", storage_expense)
        pulumi.set(__self__, "total_expense", total_expense)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="additionalExpense")
    def additional_expense(self) -> float:
        """
        Additional expense incurred for the resource.
        """
        return pulumi.get(self, "additional_expense")

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Expense sync message code if any.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="computeExpense")
    def compute_expense(self) -> float:
        """
        Compute expense of the entity.
        """
        return pulumi.get(self, "compute_expense")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        Last expense sync time.
        """
        return pulumi.get(self, "last_update_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Expense sync message if any.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="networkExpense")
    def network_expense(self) -> float:
        """
        Network expense of the entity.
        """
        return pulumi.get(self, "network_expense")

    @property
    @pulumi.getter(name="storageExpense")
    def storage_expense(self) -> float:
        """
        Storage expense of the entity.
        """
        return pulumi.get(self, "storage_expense")

    @property
    @pulumi.getter(name="totalExpense")
    def total_expense(self) -> float:
        """
        Total expense of the entity.
        """
        return pulumi.get(self, "total_expense")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Monetary unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetFabricComputeLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetFabricComputeTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFabricDatastoreVsphereLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetFabricDatastoreVsphereTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFabricNetworkLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetFabricNetworkTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFabricStorageAccountAzureLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetFabricStoragePolicyVsphereLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetImageProfileImageMappingResult(dict):
    def __init__(__self__, *,
                 description: str,
                 external_id: str,
                 external_region_id: str,
                 name: str,
                 organization: str,
                 os_family: str,
                 owner: str,
                 private: bool,
                 cloud_config: Optional[str] = None,
                 constraints: Optional[Sequence['outputs.GetImageProfileImageMappingConstraintResult']] = None,
                 image_id: Optional[str] = None,
                 image_name: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str external_region_id: The external regionId of the resource.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "external_region_id", external_region_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "private", private)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_config")

    @property
    @pulumi.getter
    def constraints(self) -> Optional[Sequence['outputs.GetImageProfileImageMappingConstraintResult']]:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")


@pulumi.output_type
class GetImageProfileImageMappingConstraintResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetMachineLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetMachineTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkConstraintResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetNetworkDomainLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetNetworkDomainTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetNetworkProfileLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetNetworkProfileTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetworkTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProjectAdministratorRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectConstraintsResult(dict):
    def __init__(__self__, *,
                 extensibilities: Optional[Sequence['outputs.GetProjectConstraintsExtensibilityResult']] = None,
                 networks: Optional[Sequence['outputs.GetProjectConstraintsNetworkResult']] = None,
                 storages: Optional[Sequence['outputs.GetProjectConstraintsStorageResult']] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[Sequence['outputs.GetProjectConstraintsExtensibilityResult']]:
        return pulumi.get(self, "extensibilities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['outputs.GetProjectConstraintsNetworkResult']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetProjectConstraintsStorageResult']]:
        return pulumi.get(self, "storages")


@pulumi.output_type
class GetProjectConstraintsExtensibilityResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectConstraintsNetworkResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectConstraintsStorageResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectMemberRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectViewerRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectZoneAssignmentResult(dict):
    def __init__(__self__, *,
                 cpu_limit: int,
                 max_instances: int,
                 memory_limit_mb: int,
                 priority: int,
                 storage_limit_gb: int,
                 zone_id: str):
        pulumi.set(__self__, "cpu_limit", cpu_limit)
        pulumi.set(__self__, "max_instances", max_instances)
        pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> int:
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> int:
        return pulumi.get(self, "max_instances")

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> int:
        return pulumi.get(self, "memory_limit_mb")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> int:
        return pulumi.get(self, "storage_limit_gb")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetSecurityGroupLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetSecurityGroupRuleResult(dict):
    def __init__(__self__, *,
                 access: str,
                 direction: str,
                 ip_range_cidr: int,
                 ports: str,
                 protocol: str,
                 name: Optional[str] = None,
                 service: Optional[str] = None):
        """
        :param str name: Name of the security group.
        """
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "ip_range_cidr", ip_range_cidr)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def access(self) -> str:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="ipRangeCidr")
    def ip_range_cidr(self) -> int:
        return pulumi.get(self, "ip_range_cidr")

    @property
    @pulumi.getter
    def ports(self) -> str:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the security group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetStorageProfileAwsLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetStorageProfileAwsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStorageProfileAzureLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetStorageProfileAzureTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStorageProfileLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetStorageProfileTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStorageProfileVsphereLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetStorageProfileVsphereTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetZoneLinkResult(dict):
    def __init__(__self__, *,
                 rel: str,
                 href: Optional[str] = None,
                 hrefs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rel", rel)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if hrefs is not None:
            pulumi.set(__self__, "hrefs", hrefs)

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")

    @property
    @pulumi.getter
    def href(self) -> Optional[str]:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def hrefs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hrefs")


@pulumi.output_type
class GetZoneTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetZoneTagsToMatchResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag’s key.
        :param str value: Tag’s value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag’s key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag’s value.
        """
        return pulumi.get(self, "value")


