// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides a way to create a catalog source entitlement in VMware vRealize Automation.
//
// ## Example Usage
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := catalog.NewSourceEntitlement(ctx, "this", &catalog.SourceEntitlementArgs{
//				CatalogSourceId: pulumi.Any(_var.Catalog_source_blueprint_id),
//				ProjectId:       pulumi.Any(_var.Project_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Attribute Reference
//
// * `definition` - Represents a catalog source that is linked to a project via an entitlement.
//
//   - `description` - Description of the catalog source.
//
//   - `iconId` - Icon id of associated catalog source.
//
//   - `id` - Id of the catalog source.
//
//   - `name` - Name of the catalog source.
//
//   - `numberOfItems` - Number of items in the associated catalog source.
//
//   - `sourceName` - Catalog source name.
//
//   - `sourceType` - Catalog source type.
//
//   - `type` - Content definition type.
//
// ## Import
//
// Catalog source entitlement can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import vra:catalog/sourceEntitlement:SourceEntitlement this 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type SourceEntitlement struct {
	pulumi.CustomResourceState

	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringOutput                    `pulumi:"catalogSourceId"`
	Definitions     SourceEntitlementDefinitionArrayOutput `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewSourceEntitlement registers a new resource with the given unique name, arguments, and options.
func NewSourceEntitlement(ctx *pulumi.Context,
	name string, args *SourceEntitlementArgs, opts ...pulumi.ResourceOption) (*SourceEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogSourceId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogSourceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SourceEntitlement
	err := ctx.RegisterResource("vra:catalog/sourceEntitlement:SourceEntitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceEntitlement gets an existing SourceEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceEntitlementState, opts ...pulumi.ResourceOption) (*SourceEntitlement, error) {
	var resource SourceEntitlement
	err := ctx.ReadResource("vra:catalog/sourceEntitlement:SourceEntitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceEntitlement resources.
type sourceEntitlementState struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId *string                       `pulumi:"catalogSourceId"`
	Definitions     []SourceEntitlementDefinition `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
}

type SourceEntitlementState struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringPtrInput
	Definitions     SourceEntitlementDefinitionArrayInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
}

func (SourceEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceEntitlementState)(nil)).Elem()
}

type sourceEntitlementArgs struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId string `pulumi:"catalogSourceId"`
	// The id of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a SourceEntitlement resource.
type SourceEntitlementArgs struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringInput
}

func (SourceEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceEntitlementArgs)(nil)).Elem()
}

type SourceEntitlementInput interface {
	pulumi.Input

	ToSourceEntitlementOutput() SourceEntitlementOutput
	ToSourceEntitlementOutputWithContext(ctx context.Context) SourceEntitlementOutput
}

func (*SourceEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceEntitlement)(nil)).Elem()
}

func (i *SourceEntitlement) ToSourceEntitlementOutput() SourceEntitlementOutput {
	return i.ToSourceEntitlementOutputWithContext(context.Background())
}

func (i *SourceEntitlement) ToSourceEntitlementOutputWithContext(ctx context.Context) SourceEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceEntitlementOutput)
}

// SourceEntitlementArrayInput is an input type that accepts SourceEntitlementArray and SourceEntitlementArrayOutput values.
// You can construct a concrete instance of `SourceEntitlementArrayInput` via:
//
//	SourceEntitlementArray{ SourceEntitlementArgs{...} }
type SourceEntitlementArrayInput interface {
	pulumi.Input

	ToSourceEntitlementArrayOutput() SourceEntitlementArrayOutput
	ToSourceEntitlementArrayOutputWithContext(context.Context) SourceEntitlementArrayOutput
}

type SourceEntitlementArray []SourceEntitlementInput

func (SourceEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceEntitlement)(nil)).Elem()
}

func (i SourceEntitlementArray) ToSourceEntitlementArrayOutput() SourceEntitlementArrayOutput {
	return i.ToSourceEntitlementArrayOutputWithContext(context.Background())
}

func (i SourceEntitlementArray) ToSourceEntitlementArrayOutputWithContext(ctx context.Context) SourceEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceEntitlementArrayOutput)
}

// SourceEntitlementMapInput is an input type that accepts SourceEntitlementMap and SourceEntitlementMapOutput values.
// You can construct a concrete instance of `SourceEntitlementMapInput` via:
//
//	SourceEntitlementMap{ "key": SourceEntitlementArgs{...} }
type SourceEntitlementMapInput interface {
	pulumi.Input

	ToSourceEntitlementMapOutput() SourceEntitlementMapOutput
	ToSourceEntitlementMapOutputWithContext(context.Context) SourceEntitlementMapOutput
}

type SourceEntitlementMap map[string]SourceEntitlementInput

func (SourceEntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceEntitlement)(nil)).Elem()
}

func (i SourceEntitlementMap) ToSourceEntitlementMapOutput() SourceEntitlementMapOutput {
	return i.ToSourceEntitlementMapOutputWithContext(context.Background())
}

func (i SourceEntitlementMap) ToSourceEntitlementMapOutputWithContext(ctx context.Context) SourceEntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceEntitlementMapOutput)
}

type SourceEntitlementOutput struct{ *pulumi.OutputState }

func (SourceEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceEntitlement)(nil)).Elem()
}

func (o SourceEntitlementOutput) ToSourceEntitlementOutput() SourceEntitlementOutput {
	return o
}

func (o SourceEntitlementOutput) ToSourceEntitlementOutputWithContext(ctx context.Context) SourceEntitlementOutput {
	return o
}

// The id of the catalog source to create the entitlement.
func (o SourceEntitlementOutput) CatalogSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceEntitlement) pulumi.StringOutput { return v.CatalogSourceId }).(pulumi.StringOutput)
}

func (o SourceEntitlementOutput) Definitions() SourceEntitlementDefinitionArrayOutput {
	return o.ApplyT(func(v *SourceEntitlement) SourceEntitlementDefinitionArrayOutput { return v.Definitions }).(SourceEntitlementDefinitionArrayOutput)
}

// The id of the project this entity belongs to.
func (o SourceEntitlementOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceEntitlement) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type SourceEntitlementArrayOutput struct{ *pulumi.OutputState }

func (SourceEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceEntitlement)(nil)).Elem()
}

func (o SourceEntitlementArrayOutput) ToSourceEntitlementArrayOutput() SourceEntitlementArrayOutput {
	return o
}

func (o SourceEntitlementArrayOutput) ToSourceEntitlementArrayOutputWithContext(ctx context.Context) SourceEntitlementArrayOutput {
	return o
}

func (o SourceEntitlementArrayOutput) Index(i pulumi.IntInput) SourceEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceEntitlement {
		return vs[0].([]*SourceEntitlement)[vs[1].(int)]
	}).(SourceEntitlementOutput)
}

type SourceEntitlementMapOutput struct{ *pulumi.OutputState }

func (SourceEntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceEntitlement)(nil)).Elem()
}

func (o SourceEntitlementMapOutput) ToSourceEntitlementMapOutput() SourceEntitlementMapOutput {
	return o
}

func (o SourceEntitlementMapOutput) ToSourceEntitlementMapOutputWithContext(ctx context.Context) SourceEntitlementMapOutput {
	return o
}

func (o SourceEntitlementMapOutput) MapIndex(k pulumi.StringInput) SourceEntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceEntitlement {
		return vs[0].(map[string]*SourceEntitlement)[vs[1].(string)]
	}).(SourceEntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceEntitlementInput)(nil)).Elem(), &SourceEntitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceEntitlementArrayInput)(nil)).Elem(), SourceEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceEntitlementMapInput)(nil)).Elem(), SourceEntitlementMap{})
	pulumi.RegisterOutputType(SourceEntitlementOutput{})
	pulumi.RegisterOutputType(SourceEntitlementArrayOutput{})
	pulumi.RegisterOutputType(SourceEntitlementMapOutput{})
}
