// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a VMware vRealize Automation catalog source resource of type cloud template, formerly known as a blueprint.
//
// ## Example Usage
// ### S
//
// The following example shows how to create a catalog source resource.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := catalog.NewSourceBlueprint(ctx, "this", &catalog.SourceBlueprintArgs{
// 			ProjectId: pulumi.Any(_var.Vra_project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attribute Reference
//
// * `createdAt` - Date when entity was created. Date and time format is ISO 8601 and UTC.
//
// * `createdBy` - User who created the entity.
//
// * `global` - Flag indicating that all items can be requested across all projects.
//
// * `id` - ID of catalog source.
//
// * `itemsFound` - Number of items found in the catalog source.
//
// * `itemsImported` - Number of items imported from the catalog source.
//
// * `lastImportCompletedAt` - Time at which the last import completed.
//
// * `lastImportErrors` - List of errors seen when the catalog source was last imported.
//
// * `lastImportStartedAt` - Time at which the last import started.
//
// * `lastUpdatedBy` - User who last updated the catalog source.
//
// * `typeId` - Type of catalog source. Example: `blueprint`, `CFT`, etc.
//
// ## Import
//
// To import the cloud template catalog source, use the ID as in the following example
//
// ```sh
//  $ pulumi import vra:catalog/sourceBlueprint:SourceBlueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
// ```
type SourceBlueprint struct {
	pulumi.CustomResourceState

	// Custom configuration of the catalog source as a map of key values.
	Config    pulumi.StringMapOutput `pulumi:"config"`
	CreatedAt pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy pulumi.StringOutput    `pulumi:"createdBy"`
	// Human-friendly description.
	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	Global                pulumi.BoolOutput        `pulumi:"global"`
	ItemsFound            pulumi.StringOutput      `pulumi:"itemsFound"`
	ItemsImported         pulumi.StringOutput      `pulumi:"itemsImported"`
	LastImportCompletedAt pulumi.StringOutput      `pulumi:"lastImportCompletedAt"`
	LastImportErrors      pulumi.StringArrayOutput `pulumi:"lastImportErrors"`
	LastImportStartedAt   pulumi.StringOutput      `pulumi:"lastImportStartedAt"`
	LastUpdatedBy         pulumi.StringOutput      `pulumi:"lastUpdatedBy"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	TypeId    pulumi.StringOutput `pulumi:"typeId"`
}

// NewSourceBlueprint registers a new resource with the given unique name, arguments, and options.
func NewSourceBlueprint(ctx *pulumi.Context,
	name string, args *SourceBlueprintArgs, opts ...pulumi.ResourceOption) (*SourceBlueprint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SourceBlueprint
	err := ctx.RegisterResource("vra:catalog/sourceBlueprint:SourceBlueprint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceBlueprint gets an existing SourceBlueprint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceBlueprint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceBlueprintState, opts ...pulumi.ResourceOption) (*SourceBlueprint, error) {
	var resource SourceBlueprint
	err := ctx.ReadResource("vra:catalog/sourceBlueprint:SourceBlueprint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceBlueprint resources.
type sourceBlueprintState struct {
	// Custom configuration of the catalog source as a map of key values.
	Config    map[string]string `pulumi:"config"`
	CreatedAt *string           `pulumi:"createdAt"`
	CreatedBy *string           `pulumi:"createdBy"`
	// Human-friendly description.
	Description           *string  `pulumi:"description"`
	Global                *bool    `pulumi:"global"`
	ItemsFound            *string  `pulumi:"itemsFound"`
	ItemsImported         *string  `pulumi:"itemsImported"`
	LastImportCompletedAt *string  `pulumi:"lastImportCompletedAt"`
	LastImportErrors      []string `pulumi:"lastImportErrors"`
	LastImportStartedAt   *string  `pulumi:"lastImportStartedAt"`
	LastUpdatedBy         *string  `pulumi:"lastUpdatedBy"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
	TypeId    *string `pulumi:"typeId"`
}

type SourceBlueprintState struct {
	// Custom configuration of the catalog source as a map of key values.
	Config    pulumi.StringMapInput
	CreatedAt pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// Human-friendly description.
	Description           pulumi.StringPtrInput
	Global                pulumi.BoolPtrInput
	ItemsFound            pulumi.StringPtrInput
	ItemsImported         pulumi.StringPtrInput
	LastImportCompletedAt pulumi.StringPtrInput
	LastImportErrors      pulumi.StringArrayInput
	LastImportStartedAt   pulumi.StringPtrInput
	LastUpdatedBy         pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
	TypeId    pulumi.StringPtrInput
}

func (SourceBlueprintState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBlueprintState)(nil)).Elem()
}

type sourceBlueprintArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config map[string]string `pulumi:"config"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a SourceBlueprint resource.
type SourceBlueprintArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config pulumi.StringMapInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringInput
}

func (SourceBlueprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceBlueprintArgs)(nil)).Elem()
}

type SourceBlueprintInput interface {
	pulumi.Input

	ToSourceBlueprintOutput() SourceBlueprintOutput
	ToSourceBlueprintOutputWithContext(ctx context.Context) SourceBlueprintOutput
}

func (*SourceBlueprint) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBlueprint)(nil)).Elem()
}

func (i *SourceBlueprint) ToSourceBlueprintOutput() SourceBlueprintOutput {
	return i.ToSourceBlueprintOutputWithContext(context.Background())
}

func (i *SourceBlueprint) ToSourceBlueprintOutputWithContext(ctx context.Context) SourceBlueprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBlueprintOutput)
}

// SourceBlueprintArrayInput is an input type that accepts SourceBlueprintArray and SourceBlueprintArrayOutput values.
// You can construct a concrete instance of `SourceBlueprintArrayInput` via:
//
//          SourceBlueprintArray{ SourceBlueprintArgs{...} }
type SourceBlueprintArrayInput interface {
	pulumi.Input

	ToSourceBlueprintArrayOutput() SourceBlueprintArrayOutput
	ToSourceBlueprintArrayOutputWithContext(context.Context) SourceBlueprintArrayOutput
}

type SourceBlueprintArray []SourceBlueprintInput

func (SourceBlueprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBlueprint)(nil)).Elem()
}

func (i SourceBlueprintArray) ToSourceBlueprintArrayOutput() SourceBlueprintArrayOutput {
	return i.ToSourceBlueprintArrayOutputWithContext(context.Background())
}

func (i SourceBlueprintArray) ToSourceBlueprintArrayOutputWithContext(ctx context.Context) SourceBlueprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBlueprintArrayOutput)
}

// SourceBlueprintMapInput is an input type that accepts SourceBlueprintMap and SourceBlueprintMapOutput values.
// You can construct a concrete instance of `SourceBlueprintMapInput` via:
//
//          SourceBlueprintMap{ "key": SourceBlueprintArgs{...} }
type SourceBlueprintMapInput interface {
	pulumi.Input

	ToSourceBlueprintMapOutput() SourceBlueprintMapOutput
	ToSourceBlueprintMapOutputWithContext(context.Context) SourceBlueprintMapOutput
}

type SourceBlueprintMap map[string]SourceBlueprintInput

func (SourceBlueprintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBlueprint)(nil)).Elem()
}

func (i SourceBlueprintMap) ToSourceBlueprintMapOutput() SourceBlueprintMapOutput {
	return i.ToSourceBlueprintMapOutputWithContext(context.Background())
}

func (i SourceBlueprintMap) ToSourceBlueprintMapOutputWithContext(ctx context.Context) SourceBlueprintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceBlueprintMapOutput)
}

type SourceBlueprintOutput struct{ *pulumi.OutputState }

func (SourceBlueprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceBlueprint)(nil)).Elem()
}

func (o SourceBlueprintOutput) ToSourceBlueprintOutput() SourceBlueprintOutput {
	return o
}

func (o SourceBlueprintOutput) ToSourceBlueprintOutputWithContext(ctx context.Context) SourceBlueprintOutput {
	return o
}

// Custom configuration of the catalog source as a map of key values.
func (o SourceBlueprintOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

func (o SourceBlueprintOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o SourceBlueprintOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SourceBlueprintOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.BoolOutput { return v.Global }).(pulumi.BoolOutput)
}

func (o SourceBlueprintOutput) ItemsFound() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.ItemsFound }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) ItemsImported() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.ItemsImported }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) LastImportCompletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.LastImportCompletedAt }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) LastImportErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringArrayOutput { return v.LastImportErrors }).(pulumi.StringArrayOutput)
}

func (o SourceBlueprintOutput) LastImportStartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.LastImportStartedAt }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o SourceBlueprintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the project this entity belongs to.
func (o SourceBlueprintOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o SourceBlueprintOutput) TypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceBlueprint) pulumi.StringOutput { return v.TypeId }).(pulumi.StringOutput)
}

type SourceBlueprintArrayOutput struct{ *pulumi.OutputState }

func (SourceBlueprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceBlueprint)(nil)).Elem()
}

func (o SourceBlueprintArrayOutput) ToSourceBlueprintArrayOutput() SourceBlueprintArrayOutput {
	return o
}

func (o SourceBlueprintArrayOutput) ToSourceBlueprintArrayOutputWithContext(ctx context.Context) SourceBlueprintArrayOutput {
	return o
}

func (o SourceBlueprintArrayOutput) Index(i pulumi.IntInput) SourceBlueprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceBlueprint {
		return vs[0].([]*SourceBlueprint)[vs[1].(int)]
	}).(SourceBlueprintOutput)
}

type SourceBlueprintMapOutput struct{ *pulumi.OutputState }

func (SourceBlueprintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceBlueprint)(nil)).Elem()
}

func (o SourceBlueprintMapOutput) ToSourceBlueprintMapOutput() SourceBlueprintMapOutput {
	return o
}

func (o SourceBlueprintMapOutput) ToSourceBlueprintMapOutputWithContext(ctx context.Context) SourceBlueprintMapOutput {
	return o
}

func (o SourceBlueprintMapOutput) MapIndex(k pulumi.StringInput) SourceBlueprintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceBlueprint {
		return vs[0].(map[string]*SourceBlueprint)[vs[1].(string)]
	}).(SourceBlueprintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBlueprintInput)(nil)).Elem(), &SourceBlueprint{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBlueprintArrayInput)(nil)).Elem(), SourceBlueprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceBlueprintMapInput)(nil)).Elem(), SourceBlueprintMap{})
	pulumi.RegisterOutputType(SourceBlueprintOutput{})
	pulumi.RegisterOutputType(SourceBlueprintArrayOutput{})
	pulumi.RegisterOutputType(SourceBlueprintMapOutput{})
}
