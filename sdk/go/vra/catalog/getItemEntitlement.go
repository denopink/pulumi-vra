// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalog

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides information about a catalog item entitlement in vRA.
//
// ## Example Usage
// ### S
//
// This is an example of how to get a vRA catalog item entitlement by its id:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := catalog.LookupItemEntitlement(ctx, &catalog.LookupItemEntitlementArgs{
//				Id:        pulumi.StringRef(_var.Catalog_item_entitlement_id),
//				ProjectId: _var.Project_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This is an example of how to get a vRA catalog item entitlement by its catalog item id:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/catalog"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := catalog.LookupItemEntitlement(ctx, &catalog.LookupItemEntitlementArgs{
//				CatalogItemId: pulumi.StringRef(_var.Catalog_item_id),
//				ProjectId:     _var.Project_id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupItemEntitlement(ctx *pulumi.Context, args *LookupItemEntitlementArgs, opts ...pulumi.InvokeOption) (*LookupItemEntitlementResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupItemEntitlementResult
	err := ctx.Invoke("vra:catalog/getItemEntitlement:getItemEntitlement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getItemEntitlement.
type LookupItemEntitlementArgs struct {
	// The id of the catalog item to find the entitlement. One of `catalogItemId` or `id` must be provided.
	CatalogItemId *string `pulumi:"catalogItemId"`
	// The id of entitlement. One of `catalogItemId` or `id` must be provided.
	Id *string `pulumi:"id"`
	// The id of the project that this entitlement belongs to.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getItemEntitlement.
type LookupItemEntitlementResult struct {
	CatalogItemId *string `pulumi:"catalogItemId"`
	// Represents a catalog item that is linked to a project via an entitlement.
	Definitions []GetItemEntitlementDefinition `pulumi:"definitions"`
	// Id of the catalog item.
	Id        *string `pulumi:"id"`
	ProjectId string  `pulumi:"projectId"`
}

func LookupItemEntitlementOutput(ctx *pulumi.Context, args LookupItemEntitlementOutputArgs, opts ...pulumi.InvokeOption) LookupItemEntitlementResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupItemEntitlementResult, error) {
			args := v.(LookupItemEntitlementArgs)
			r, err := LookupItemEntitlement(ctx, &args, opts...)
			var s LookupItemEntitlementResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupItemEntitlementResultOutput)
}

// A collection of arguments for invoking getItemEntitlement.
type LookupItemEntitlementOutputArgs struct {
	// The id of the catalog item to find the entitlement. One of `catalogItemId` or `id` must be provided.
	CatalogItemId pulumi.StringPtrInput `pulumi:"catalogItemId"`
	// The id of entitlement. One of `catalogItemId` or `id` must be provided.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The id of the project that this entitlement belongs to.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupItemEntitlementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupItemEntitlementArgs)(nil)).Elem()
}

// A collection of values returned by getItemEntitlement.
type LookupItemEntitlementResultOutput struct{ *pulumi.OutputState }

func (LookupItemEntitlementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupItemEntitlementResult)(nil)).Elem()
}

func (o LookupItemEntitlementResultOutput) ToLookupItemEntitlementResultOutput() LookupItemEntitlementResultOutput {
	return o
}

func (o LookupItemEntitlementResultOutput) ToLookupItemEntitlementResultOutputWithContext(ctx context.Context) LookupItemEntitlementResultOutput {
	return o
}

func (o LookupItemEntitlementResultOutput) CatalogItemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupItemEntitlementResult) *string { return v.CatalogItemId }).(pulumi.StringPtrOutput)
}

// Represents a catalog item that is linked to a project via an entitlement.
func (o LookupItemEntitlementResultOutput) Definitions() GetItemEntitlementDefinitionArrayOutput {
	return o.ApplyT(func(v LookupItemEntitlementResult) []GetItemEntitlementDefinition { return v.Definitions }).(GetItemEntitlementDefinitionArrayOutput)
}

// Id of the catalog item.
func (o LookupItemEntitlementResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupItemEntitlementResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LookupItemEntitlementResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupItemEntitlementResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupItemEntitlementResultOutput{})
}
