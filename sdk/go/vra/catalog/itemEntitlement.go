// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package catalog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides a way to create a catalog item entitlement in VMware vRealize Automation.
//
// ## Example Usage
// ### S
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/catalog"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := catalog.NewItemEntitlement(ctx, "this", &catalog.ItemEntitlementArgs{
// 			CatalogItemId: pulumi.Any(_var.Catalog_item_id),
// 			ProjectId:     pulumi.Any(_var.Project_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Catalog item entitlement can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import vra:catalog/itemEntitlement:ItemEntitlement this 05956583-6488-4e7d-84c9-92a7b7219a15`
// ```
type ItemEntitlement struct {
	pulumi.CustomResourceState

	// The id of the catalog item to create the entitlement.
	CatalogItemId pulumi.StringOutput `pulumi:"catalogItemId"`
	// Represents a catalog item that is linked to a project via an entitlement.
	Definitions ItemEntitlementDefinitionArrayOutput `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewItemEntitlement registers a new resource with the given unique name, arguments, and options.
func NewItemEntitlement(ctx *pulumi.Context,
	name string, args *ItemEntitlementArgs, opts ...pulumi.ResourceOption) (*ItemEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogItemId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogItemId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ItemEntitlement
	err := ctx.RegisterResource("vra:catalog/itemEntitlement:ItemEntitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetItemEntitlement gets an existing ItemEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetItemEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ItemEntitlementState, opts ...pulumi.ResourceOption) (*ItemEntitlement, error) {
	var resource ItemEntitlement
	err := ctx.ReadResource("vra:catalog/itemEntitlement:ItemEntitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ItemEntitlement resources.
type itemEntitlementState struct {
	// The id of the catalog item to create the entitlement.
	CatalogItemId *string `pulumi:"catalogItemId"`
	// Represents a catalog item that is linked to a project via an entitlement.
	Definitions []ItemEntitlementDefinition `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
}

type ItemEntitlementState struct {
	// The id of the catalog item to create the entitlement.
	CatalogItemId pulumi.StringPtrInput
	// Represents a catalog item that is linked to a project via an entitlement.
	Definitions ItemEntitlementDefinitionArrayInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
}

func (ItemEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*itemEntitlementState)(nil)).Elem()
}

type itemEntitlementArgs struct {
	// The id of the catalog item to create the entitlement.
	CatalogItemId string `pulumi:"catalogItemId"`
	// The id of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a ItemEntitlement resource.
type ItemEntitlementArgs struct {
	// The id of the catalog item to create the entitlement.
	CatalogItemId pulumi.StringInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringInput
}

func (ItemEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*itemEntitlementArgs)(nil)).Elem()
}

type ItemEntitlementInput interface {
	pulumi.Input

	ToItemEntitlementOutput() ItemEntitlementOutput
	ToItemEntitlementOutputWithContext(ctx context.Context) ItemEntitlementOutput
}

func (*ItemEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**ItemEntitlement)(nil)).Elem()
}

func (i *ItemEntitlement) ToItemEntitlementOutput() ItemEntitlementOutput {
	return i.ToItemEntitlementOutputWithContext(context.Background())
}

func (i *ItemEntitlement) ToItemEntitlementOutputWithContext(ctx context.Context) ItemEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemEntitlementOutput)
}

// ItemEntitlementArrayInput is an input type that accepts ItemEntitlementArray and ItemEntitlementArrayOutput values.
// You can construct a concrete instance of `ItemEntitlementArrayInput` via:
//
//          ItemEntitlementArray{ ItemEntitlementArgs{...} }
type ItemEntitlementArrayInput interface {
	pulumi.Input

	ToItemEntitlementArrayOutput() ItemEntitlementArrayOutput
	ToItemEntitlementArrayOutputWithContext(context.Context) ItemEntitlementArrayOutput
}

type ItemEntitlementArray []ItemEntitlementInput

func (ItemEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ItemEntitlement)(nil)).Elem()
}

func (i ItemEntitlementArray) ToItemEntitlementArrayOutput() ItemEntitlementArrayOutput {
	return i.ToItemEntitlementArrayOutputWithContext(context.Background())
}

func (i ItemEntitlementArray) ToItemEntitlementArrayOutputWithContext(ctx context.Context) ItemEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemEntitlementArrayOutput)
}

// ItemEntitlementMapInput is an input type that accepts ItemEntitlementMap and ItemEntitlementMapOutput values.
// You can construct a concrete instance of `ItemEntitlementMapInput` via:
//
//          ItemEntitlementMap{ "key": ItemEntitlementArgs{...} }
type ItemEntitlementMapInput interface {
	pulumi.Input

	ToItemEntitlementMapOutput() ItemEntitlementMapOutput
	ToItemEntitlementMapOutputWithContext(context.Context) ItemEntitlementMapOutput
}

type ItemEntitlementMap map[string]ItemEntitlementInput

func (ItemEntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ItemEntitlement)(nil)).Elem()
}

func (i ItemEntitlementMap) ToItemEntitlementMapOutput() ItemEntitlementMapOutput {
	return i.ToItemEntitlementMapOutputWithContext(context.Background())
}

func (i ItemEntitlementMap) ToItemEntitlementMapOutputWithContext(ctx context.Context) ItemEntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemEntitlementMapOutput)
}

type ItemEntitlementOutput struct{ *pulumi.OutputState }

func (ItemEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ItemEntitlement)(nil)).Elem()
}

func (o ItemEntitlementOutput) ToItemEntitlementOutput() ItemEntitlementOutput {
	return o
}

func (o ItemEntitlementOutput) ToItemEntitlementOutputWithContext(ctx context.Context) ItemEntitlementOutput {
	return o
}

// The id of the catalog item to create the entitlement.
func (o ItemEntitlementOutput) CatalogItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *ItemEntitlement) pulumi.StringOutput { return v.CatalogItemId }).(pulumi.StringOutput)
}

// Represents a catalog item that is linked to a project via an entitlement.
func (o ItemEntitlementOutput) Definitions() ItemEntitlementDefinitionArrayOutput {
	return o.ApplyT(func(v *ItemEntitlement) ItemEntitlementDefinitionArrayOutput { return v.Definitions }).(ItemEntitlementDefinitionArrayOutput)
}

// The id of the project this entity belongs to.
func (o ItemEntitlementOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ItemEntitlement) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type ItemEntitlementArrayOutput struct{ *pulumi.OutputState }

func (ItemEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ItemEntitlement)(nil)).Elem()
}

func (o ItemEntitlementArrayOutput) ToItemEntitlementArrayOutput() ItemEntitlementArrayOutput {
	return o
}

func (o ItemEntitlementArrayOutput) ToItemEntitlementArrayOutputWithContext(ctx context.Context) ItemEntitlementArrayOutput {
	return o
}

func (o ItemEntitlementArrayOutput) Index(i pulumi.IntInput) ItemEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ItemEntitlement {
		return vs[0].([]*ItemEntitlement)[vs[1].(int)]
	}).(ItemEntitlementOutput)
}

type ItemEntitlementMapOutput struct{ *pulumi.OutputState }

func (ItemEntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ItemEntitlement)(nil)).Elem()
}

func (o ItemEntitlementMapOutput) ToItemEntitlementMapOutput() ItemEntitlementMapOutput {
	return o
}

func (o ItemEntitlementMapOutput) ToItemEntitlementMapOutputWithContext(ctx context.Context) ItemEntitlementMapOutput {
	return o
}

func (o ItemEntitlementMapOutput) MapIndex(k pulumi.StringInput) ItemEntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ItemEntitlement {
		return vs[0].(map[string]*ItemEntitlement)[vs[1].(string)]
	}).(ItemEntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ItemEntitlementInput)(nil)).Elem(), &ItemEntitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ItemEntitlementArrayInput)(nil)).Elem(), ItemEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ItemEntitlementMapInput)(nil)).Elem(), ItemEntitlementMap{})
	pulumi.RegisterOutputType(ItemEntitlementOutput{})
	pulumi.RegisterOutputType(ItemEntitlementArrayOutput{})
	pulumi.RegisterOutputType(ItemEntitlementMapOutput{})
}
