// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zone

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
//
// This is an example of how to create a zone resource.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vra/sdk/go/vra/zone"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/zone"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zone.NewZone(ctx, "this", &zone.ZoneArgs{
// 			Description: pulumi.String("my terraform test cloud zone"),
// 			RegionId:    pulumi.Any(data.Vra_region.This.Id),
// 			Tags: zone.ZoneTagArray{
// 				&zone.ZoneTagArgs{
// 					Key:   pulumi.String("my-tf-key"),
// 					Value: pulumi.String("my-tf-value"),
// 				},
// 				&zone.ZoneTagArgs{
// 					Key:   pulumi.String("tf-foo"),
// 					Value: pulumi.String("tf-bar"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// A zone resource supports the following arguments:
type Zone struct {
	pulumi.CustomResourceState

	// The ID of the cloud account this zone belongs to.
	CloudAccountId pulumi.StringOutput `pulumi:"cloudAccountId"`
	// The ids of the compute resources that will be explicitly assigned to this zone.
	ComputeIds pulumi.StringArrayOutput `pulumi:"computeIds"`
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A list of key value pair of properties that will be used.
	CustomProperties pulumi.MapOutput `pulumi:"customProperties"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The id of the region for which this zone is defined.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// HATEOAS of entity.
	Links ZoneLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier for the zone resource instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
	PlacementPolicy pulumi.StringPtrOutput `pulumi:"placementPolicy"`
	// The id of the region for which this zone is created.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// A set of tag keys and optional values that were set on this resource:
	Tags ZoneTagArrayOutput `pulumi:"tags"`
	// A set of tag keys and optional values for compute resource filtering:
	TagsToMatches ZoneTagsToMatchArrayOutput `pulumi:"tagsToMatches"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("vra:zone/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("vra:zone/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// The ID of the cloud account this zone belongs to.
	CloudAccountId *string `pulumi:"cloudAccountId"`
	// The ids of the compute resources that will be explicitly assigned to this zone.
	ComputeIds []string `pulumi:"computeIds"`
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// A list of key value pair of properties that will be used.
	CustomProperties map[string]interface{} `pulumi:"customProperties"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// The id of the region for which this zone is defined.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
	Folder *string `pulumi:"folder"`
	// HATEOAS of entity.
	Links []ZoneLink `pulumi:"links"`
	// A human-friendly name used as an identifier for the zone resource instance.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
	PlacementPolicy *string `pulumi:"placementPolicy"`
	// The id of the region for which this zone is created.
	RegionId *string `pulumi:"regionId"`
	// A set of tag keys and optional values that were set on this resource:
	Tags []ZoneTag `pulumi:"tags"`
	// A set of tag keys and optional values for compute resource filtering:
	TagsToMatches []ZoneTagsToMatch `pulumi:"tagsToMatches"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ZoneState struct {
	// The ID of the cloud account this zone belongs to.
	CloudAccountId pulumi.StringPtrInput
	// The ids of the compute resources that will be explicitly assigned to this zone.
	ComputeIds pulumi.StringArrayInput
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringPtrInput
	// A list of key value pair of properties that will be used.
	CustomProperties pulumi.MapInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// The id of the region for which this zone is defined.
	ExternalRegionId pulumi.StringPtrInput
	// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
	Folder pulumi.StringPtrInput
	// HATEOAS of entity.
	Links ZoneLinkArrayInput
	// A human-friendly name used as an identifier for the zone resource instance.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
	PlacementPolicy pulumi.StringPtrInput
	// The id of the region for which this zone is created.
	RegionId pulumi.StringPtrInput
	// A set of tag keys and optional values that were set on this resource:
	Tags ZoneTagArrayInput
	// A set of tag keys and optional values for compute resource filtering:
	TagsToMatches ZoneTagsToMatchArrayInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// The ids of the compute resources that will be explicitly assigned to this zone.
	ComputeIds []string `pulumi:"computeIds"`
	// A list of key value pair of properties that will be used.
	CustomProperties map[string]interface{} `pulumi:"customProperties"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
	Folder *string `pulumi:"folder"`
	// A human-friendly name used as an identifier for the zone resource instance.
	Name *string `pulumi:"name"`
	// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
	PlacementPolicy *string `pulumi:"placementPolicy"`
	// The id of the region for which this zone is created.
	RegionId string `pulumi:"regionId"`
	// A set of tag keys and optional values that were set on this resource:
	Tags []ZoneTag `pulumi:"tags"`
	// A set of tag keys and optional values for compute resource filtering:
	TagsToMatches []ZoneTagsToMatch `pulumi:"tagsToMatches"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// The ids of the compute resources that will be explicitly assigned to this zone.
	ComputeIds pulumi.StringArrayInput
	// A list of key value pair of properties that will be used.
	CustomProperties pulumi.MapInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
	Folder pulumi.StringPtrInput
	// A human-friendly name used as an identifier for the zone resource instance.
	Name pulumi.StringPtrInput
	// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
	PlacementPolicy pulumi.StringPtrInput
	// The id of the region for which this zone is created.
	RegionId pulumi.StringInput
	// A set of tag keys and optional values that were set on this resource:
	Tags ZoneTagArrayInput
	// A set of tag keys and optional values for compute resource filtering:
	TagsToMatches ZoneTagsToMatchArrayInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//          ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//          ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

// The ID of the cloud account this zone belongs to.
func (o ZoneOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CloudAccountId }).(pulumi.StringOutput)
}

// The ids of the compute resources that will be explicitly assigned to this zone.
func (o ZoneOutput) ComputeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.ComputeIds }).(pulumi.StringArrayOutput)
}

// Date when the entity was created. The date is in ISO 8601 and UTC.
func (o ZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A list of key value pair of properties that will be used.
func (o ZoneOutput) CustomProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *Zone) pulumi.MapOutput { return v.CustomProperties }).(pulumi.MapOutput)
}

// A human-friendly description.
func (o ZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of the region for which this zone is defined.
func (o ZoneOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
func (o ZoneOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// HATEOAS of entity.
func (o ZoneOutput) Links() ZoneLinkArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneLinkArrayOutput { return v.Links }).(ZoneLinkArrayOutput)
}

// A human-friendly name used as an identifier for the zone resource instance.
func (o ZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o ZoneOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o ZoneOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
func (o ZoneOutput) PlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.PlacementPolicy }).(pulumi.StringPtrOutput)
}

// The id of the region for which this zone is created.
func (o ZoneOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// A set of tag keys and optional values that were set on this resource:
func (o ZoneOutput) Tags() ZoneTagArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneTagArrayOutput { return v.Tags }).(ZoneTagArrayOutput)
}

// A set of tag keys and optional values for compute resource filtering:
func (o ZoneOutput) TagsToMatches() ZoneTagsToMatchArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneTagsToMatchArrayOutput { return v.TagsToMatches }).(ZoneTagsToMatchArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o ZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
