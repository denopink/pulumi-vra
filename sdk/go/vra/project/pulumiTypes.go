// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package project

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectAdministratorRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// ProjectAdministratorRoleInput is an input type that accepts ProjectAdministratorRoleArgs and ProjectAdministratorRoleOutput values.
// You can construct a concrete instance of `ProjectAdministratorRoleInput` via:
//
//          ProjectAdministratorRoleArgs{...}
type ProjectAdministratorRoleInput interface {
	pulumi.Input

	ToProjectAdministratorRoleOutput() ProjectAdministratorRoleOutput
	ToProjectAdministratorRoleOutputWithContext(context.Context) ProjectAdministratorRoleOutput
}

type ProjectAdministratorRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (ProjectAdministratorRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAdministratorRole)(nil)).Elem()
}

func (i ProjectAdministratorRoleArgs) ToProjectAdministratorRoleOutput() ProjectAdministratorRoleOutput {
	return i.ToProjectAdministratorRoleOutputWithContext(context.Background())
}

func (i ProjectAdministratorRoleArgs) ToProjectAdministratorRoleOutputWithContext(ctx context.Context) ProjectAdministratorRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAdministratorRoleOutput)
}

// ProjectAdministratorRoleArrayInput is an input type that accepts ProjectAdministratorRoleArray and ProjectAdministratorRoleArrayOutput values.
// You can construct a concrete instance of `ProjectAdministratorRoleArrayInput` via:
//
//          ProjectAdministratorRoleArray{ ProjectAdministratorRoleArgs{...} }
type ProjectAdministratorRoleArrayInput interface {
	pulumi.Input

	ToProjectAdministratorRoleArrayOutput() ProjectAdministratorRoleArrayOutput
	ToProjectAdministratorRoleArrayOutputWithContext(context.Context) ProjectAdministratorRoleArrayOutput
}

type ProjectAdministratorRoleArray []ProjectAdministratorRoleInput

func (ProjectAdministratorRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAdministratorRole)(nil)).Elem()
}

func (i ProjectAdministratorRoleArray) ToProjectAdministratorRoleArrayOutput() ProjectAdministratorRoleArrayOutput {
	return i.ToProjectAdministratorRoleArrayOutputWithContext(context.Background())
}

func (i ProjectAdministratorRoleArray) ToProjectAdministratorRoleArrayOutputWithContext(ctx context.Context) ProjectAdministratorRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectAdministratorRoleArrayOutput)
}

type ProjectAdministratorRoleOutput struct{ *pulumi.OutputState }

func (ProjectAdministratorRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectAdministratorRole)(nil)).Elem()
}

func (o ProjectAdministratorRoleOutput) ToProjectAdministratorRoleOutput() ProjectAdministratorRoleOutput {
	return o
}

func (o ProjectAdministratorRoleOutput) ToProjectAdministratorRoleOutputWithContext(ctx context.Context) ProjectAdministratorRoleOutput {
	return o
}

func (o ProjectAdministratorRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectAdministratorRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o ProjectAdministratorRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectAdministratorRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectAdministratorRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectAdministratorRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectAdministratorRole)(nil)).Elem()
}

func (o ProjectAdministratorRoleArrayOutput) ToProjectAdministratorRoleArrayOutput() ProjectAdministratorRoleArrayOutput {
	return o
}

func (o ProjectAdministratorRoleArrayOutput) ToProjectAdministratorRoleArrayOutputWithContext(ctx context.Context) ProjectAdministratorRoleArrayOutput {
	return o
}

func (o ProjectAdministratorRoleArrayOutput) Index(i pulumi.IntInput) ProjectAdministratorRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectAdministratorRole {
		return vs[0].([]ProjectAdministratorRole)[vs[1].(int)]
	}).(ProjectAdministratorRoleOutput)
}

type ProjectConstraints struct {
	Extensibilities []ProjectConstraintsExtensibility `pulumi:"extensibilities"`
	Networks        []ProjectConstraintsNetwork       `pulumi:"networks"`
	Storages        []ProjectConstraintsStorage       `pulumi:"storages"`
}

// ProjectConstraintsInput is an input type that accepts ProjectConstraintsArgs and ProjectConstraintsOutput values.
// You can construct a concrete instance of `ProjectConstraintsInput` via:
//
//          ProjectConstraintsArgs{...}
type ProjectConstraintsInput interface {
	pulumi.Input

	ToProjectConstraintsOutput() ProjectConstraintsOutput
	ToProjectConstraintsOutputWithContext(context.Context) ProjectConstraintsOutput
}

type ProjectConstraintsArgs struct {
	Extensibilities ProjectConstraintsExtensibilityArrayInput `pulumi:"extensibilities"`
	Networks        ProjectConstraintsNetworkArrayInput       `pulumi:"networks"`
	Storages        ProjectConstraintsStorageArrayInput       `pulumi:"storages"`
}

func (ProjectConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraints)(nil)).Elem()
}

func (i ProjectConstraintsArgs) ToProjectConstraintsOutput() ProjectConstraintsOutput {
	return i.ToProjectConstraintsOutputWithContext(context.Background())
}

func (i ProjectConstraintsArgs) ToProjectConstraintsOutputWithContext(ctx context.Context) ProjectConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsOutput)
}

func (i ProjectConstraintsArgs) ToProjectConstraintsPtrOutput() ProjectConstraintsPtrOutput {
	return i.ToProjectConstraintsPtrOutputWithContext(context.Background())
}

func (i ProjectConstraintsArgs) ToProjectConstraintsPtrOutputWithContext(ctx context.Context) ProjectConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsOutput).ToProjectConstraintsPtrOutputWithContext(ctx)
}

// ProjectConstraintsPtrInput is an input type that accepts ProjectConstraintsArgs, ProjectConstraintsPtr and ProjectConstraintsPtrOutput values.
// You can construct a concrete instance of `ProjectConstraintsPtrInput` via:
//
//          ProjectConstraintsArgs{...}
//
//  or:
//
//          nil
type ProjectConstraintsPtrInput interface {
	pulumi.Input

	ToProjectConstraintsPtrOutput() ProjectConstraintsPtrOutput
	ToProjectConstraintsPtrOutputWithContext(context.Context) ProjectConstraintsPtrOutput
}

type projectConstraintsPtrType ProjectConstraintsArgs

func ProjectConstraintsPtr(v *ProjectConstraintsArgs) ProjectConstraintsPtrInput {
	return (*projectConstraintsPtrType)(v)
}

func (*projectConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConstraints)(nil)).Elem()
}

func (i *projectConstraintsPtrType) ToProjectConstraintsPtrOutput() ProjectConstraintsPtrOutput {
	return i.ToProjectConstraintsPtrOutputWithContext(context.Background())
}

func (i *projectConstraintsPtrType) ToProjectConstraintsPtrOutputWithContext(ctx context.Context) ProjectConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsPtrOutput)
}

type ProjectConstraintsOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraints)(nil)).Elem()
}

func (o ProjectConstraintsOutput) ToProjectConstraintsOutput() ProjectConstraintsOutput {
	return o
}

func (o ProjectConstraintsOutput) ToProjectConstraintsOutputWithContext(ctx context.Context) ProjectConstraintsOutput {
	return o
}

func (o ProjectConstraintsOutput) ToProjectConstraintsPtrOutput() ProjectConstraintsPtrOutput {
	return o.ToProjectConstraintsPtrOutputWithContext(context.Background())
}

func (o ProjectConstraintsOutput) ToProjectConstraintsPtrOutputWithContext(ctx context.Context) ProjectConstraintsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectConstraints) *ProjectConstraints {
		return &v
	}).(ProjectConstraintsPtrOutput)
}

func (o ProjectConstraintsOutput) Extensibilities() ProjectConstraintsExtensibilityArrayOutput {
	return o.ApplyT(func(v ProjectConstraints) []ProjectConstraintsExtensibility { return v.Extensibilities }).(ProjectConstraintsExtensibilityArrayOutput)
}

func (o ProjectConstraintsOutput) Networks() ProjectConstraintsNetworkArrayOutput {
	return o.ApplyT(func(v ProjectConstraints) []ProjectConstraintsNetwork { return v.Networks }).(ProjectConstraintsNetworkArrayOutput)
}

func (o ProjectConstraintsOutput) Storages() ProjectConstraintsStorageArrayOutput {
	return o.ApplyT(func(v ProjectConstraints) []ProjectConstraintsStorage { return v.Storages }).(ProjectConstraintsStorageArrayOutput)
}

type ProjectConstraintsPtrOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConstraints)(nil)).Elem()
}

func (o ProjectConstraintsPtrOutput) ToProjectConstraintsPtrOutput() ProjectConstraintsPtrOutput {
	return o
}

func (o ProjectConstraintsPtrOutput) ToProjectConstraintsPtrOutputWithContext(ctx context.Context) ProjectConstraintsPtrOutput {
	return o
}

func (o ProjectConstraintsPtrOutput) Elem() ProjectConstraintsOutput {
	return o.ApplyT(func(v *ProjectConstraints) ProjectConstraints {
		if v != nil {
			return *v
		}
		var ret ProjectConstraints
		return ret
	}).(ProjectConstraintsOutput)
}

func (o ProjectConstraintsPtrOutput) Extensibilities() ProjectConstraintsExtensibilityArrayOutput {
	return o.ApplyT(func(v *ProjectConstraints) []ProjectConstraintsExtensibility {
		if v == nil {
			return nil
		}
		return v.Extensibilities
	}).(ProjectConstraintsExtensibilityArrayOutput)
}

func (o ProjectConstraintsPtrOutput) Networks() ProjectConstraintsNetworkArrayOutput {
	return o.ApplyT(func(v *ProjectConstraints) []ProjectConstraintsNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(ProjectConstraintsNetworkArrayOutput)
}

func (o ProjectConstraintsPtrOutput) Storages() ProjectConstraintsStorageArrayOutput {
	return o.ApplyT(func(v *ProjectConstraints) []ProjectConstraintsStorage {
		if v == nil {
			return nil
		}
		return v.Storages
	}).(ProjectConstraintsStorageArrayOutput)
}

type ProjectConstraintsExtensibility struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// ProjectConstraintsExtensibilityInput is an input type that accepts ProjectConstraintsExtensibilityArgs and ProjectConstraintsExtensibilityOutput values.
// You can construct a concrete instance of `ProjectConstraintsExtensibilityInput` via:
//
//          ProjectConstraintsExtensibilityArgs{...}
type ProjectConstraintsExtensibilityInput interface {
	pulumi.Input

	ToProjectConstraintsExtensibilityOutput() ProjectConstraintsExtensibilityOutput
	ToProjectConstraintsExtensibilityOutputWithContext(context.Context) ProjectConstraintsExtensibilityOutput
}

type ProjectConstraintsExtensibilityArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (ProjectConstraintsExtensibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsExtensibility)(nil)).Elem()
}

func (i ProjectConstraintsExtensibilityArgs) ToProjectConstraintsExtensibilityOutput() ProjectConstraintsExtensibilityOutput {
	return i.ToProjectConstraintsExtensibilityOutputWithContext(context.Background())
}

func (i ProjectConstraintsExtensibilityArgs) ToProjectConstraintsExtensibilityOutputWithContext(ctx context.Context) ProjectConstraintsExtensibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsExtensibilityOutput)
}

// ProjectConstraintsExtensibilityArrayInput is an input type that accepts ProjectConstraintsExtensibilityArray and ProjectConstraintsExtensibilityArrayOutput values.
// You can construct a concrete instance of `ProjectConstraintsExtensibilityArrayInput` via:
//
//          ProjectConstraintsExtensibilityArray{ ProjectConstraintsExtensibilityArgs{...} }
type ProjectConstraintsExtensibilityArrayInput interface {
	pulumi.Input

	ToProjectConstraintsExtensibilityArrayOutput() ProjectConstraintsExtensibilityArrayOutput
	ToProjectConstraintsExtensibilityArrayOutputWithContext(context.Context) ProjectConstraintsExtensibilityArrayOutput
}

type ProjectConstraintsExtensibilityArray []ProjectConstraintsExtensibilityInput

func (ProjectConstraintsExtensibilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsExtensibility)(nil)).Elem()
}

func (i ProjectConstraintsExtensibilityArray) ToProjectConstraintsExtensibilityArrayOutput() ProjectConstraintsExtensibilityArrayOutput {
	return i.ToProjectConstraintsExtensibilityArrayOutputWithContext(context.Background())
}

func (i ProjectConstraintsExtensibilityArray) ToProjectConstraintsExtensibilityArrayOutputWithContext(ctx context.Context) ProjectConstraintsExtensibilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsExtensibilityArrayOutput)
}

type ProjectConstraintsExtensibilityOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsExtensibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsExtensibility)(nil)).Elem()
}

func (o ProjectConstraintsExtensibilityOutput) ToProjectConstraintsExtensibilityOutput() ProjectConstraintsExtensibilityOutput {
	return o
}

func (o ProjectConstraintsExtensibilityOutput) ToProjectConstraintsExtensibilityOutputWithContext(ctx context.Context) ProjectConstraintsExtensibilityOutput {
	return o
}

func (o ProjectConstraintsExtensibilityOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConstraintsExtensibility) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ProjectConstraintsExtensibilityOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectConstraintsExtensibility) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type ProjectConstraintsExtensibilityArrayOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsExtensibilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsExtensibility)(nil)).Elem()
}

func (o ProjectConstraintsExtensibilityArrayOutput) ToProjectConstraintsExtensibilityArrayOutput() ProjectConstraintsExtensibilityArrayOutput {
	return o
}

func (o ProjectConstraintsExtensibilityArrayOutput) ToProjectConstraintsExtensibilityArrayOutputWithContext(ctx context.Context) ProjectConstraintsExtensibilityArrayOutput {
	return o
}

func (o ProjectConstraintsExtensibilityArrayOutput) Index(i pulumi.IntInput) ProjectConstraintsExtensibilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConstraintsExtensibility {
		return vs[0].([]ProjectConstraintsExtensibility)[vs[1].(int)]
	}).(ProjectConstraintsExtensibilityOutput)
}

type ProjectConstraintsNetwork struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// ProjectConstraintsNetworkInput is an input type that accepts ProjectConstraintsNetworkArgs and ProjectConstraintsNetworkOutput values.
// You can construct a concrete instance of `ProjectConstraintsNetworkInput` via:
//
//          ProjectConstraintsNetworkArgs{...}
type ProjectConstraintsNetworkInput interface {
	pulumi.Input

	ToProjectConstraintsNetworkOutput() ProjectConstraintsNetworkOutput
	ToProjectConstraintsNetworkOutputWithContext(context.Context) ProjectConstraintsNetworkOutput
}

type ProjectConstraintsNetworkArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (ProjectConstraintsNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsNetwork)(nil)).Elem()
}

func (i ProjectConstraintsNetworkArgs) ToProjectConstraintsNetworkOutput() ProjectConstraintsNetworkOutput {
	return i.ToProjectConstraintsNetworkOutputWithContext(context.Background())
}

func (i ProjectConstraintsNetworkArgs) ToProjectConstraintsNetworkOutputWithContext(ctx context.Context) ProjectConstraintsNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsNetworkOutput)
}

// ProjectConstraintsNetworkArrayInput is an input type that accepts ProjectConstraintsNetworkArray and ProjectConstraintsNetworkArrayOutput values.
// You can construct a concrete instance of `ProjectConstraintsNetworkArrayInput` via:
//
//          ProjectConstraintsNetworkArray{ ProjectConstraintsNetworkArgs{...} }
type ProjectConstraintsNetworkArrayInput interface {
	pulumi.Input

	ToProjectConstraintsNetworkArrayOutput() ProjectConstraintsNetworkArrayOutput
	ToProjectConstraintsNetworkArrayOutputWithContext(context.Context) ProjectConstraintsNetworkArrayOutput
}

type ProjectConstraintsNetworkArray []ProjectConstraintsNetworkInput

func (ProjectConstraintsNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsNetwork)(nil)).Elem()
}

func (i ProjectConstraintsNetworkArray) ToProjectConstraintsNetworkArrayOutput() ProjectConstraintsNetworkArrayOutput {
	return i.ToProjectConstraintsNetworkArrayOutputWithContext(context.Background())
}

func (i ProjectConstraintsNetworkArray) ToProjectConstraintsNetworkArrayOutputWithContext(ctx context.Context) ProjectConstraintsNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsNetworkArrayOutput)
}

type ProjectConstraintsNetworkOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsNetwork)(nil)).Elem()
}

func (o ProjectConstraintsNetworkOutput) ToProjectConstraintsNetworkOutput() ProjectConstraintsNetworkOutput {
	return o
}

func (o ProjectConstraintsNetworkOutput) ToProjectConstraintsNetworkOutputWithContext(ctx context.Context) ProjectConstraintsNetworkOutput {
	return o
}

func (o ProjectConstraintsNetworkOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConstraintsNetwork) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ProjectConstraintsNetworkOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectConstraintsNetwork) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type ProjectConstraintsNetworkArrayOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsNetwork)(nil)).Elem()
}

func (o ProjectConstraintsNetworkArrayOutput) ToProjectConstraintsNetworkArrayOutput() ProjectConstraintsNetworkArrayOutput {
	return o
}

func (o ProjectConstraintsNetworkArrayOutput) ToProjectConstraintsNetworkArrayOutputWithContext(ctx context.Context) ProjectConstraintsNetworkArrayOutput {
	return o
}

func (o ProjectConstraintsNetworkArrayOutput) Index(i pulumi.IntInput) ProjectConstraintsNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConstraintsNetwork {
		return vs[0].([]ProjectConstraintsNetwork)[vs[1].(int)]
	}).(ProjectConstraintsNetworkOutput)
}

type ProjectConstraintsStorage struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// ProjectConstraintsStorageInput is an input type that accepts ProjectConstraintsStorageArgs and ProjectConstraintsStorageOutput values.
// You can construct a concrete instance of `ProjectConstraintsStorageInput` via:
//
//          ProjectConstraintsStorageArgs{...}
type ProjectConstraintsStorageInput interface {
	pulumi.Input

	ToProjectConstraintsStorageOutput() ProjectConstraintsStorageOutput
	ToProjectConstraintsStorageOutputWithContext(context.Context) ProjectConstraintsStorageOutput
}

type ProjectConstraintsStorageArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (ProjectConstraintsStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsStorage)(nil)).Elem()
}

func (i ProjectConstraintsStorageArgs) ToProjectConstraintsStorageOutput() ProjectConstraintsStorageOutput {
	return i.ToProjectConstraintsStorageOutputWithContext(context.Background())
}

func (i ProjectConstraintsStorageArgs) ToProjectConstraintsStorageOutputWithContext(ctx context.Context) ProjectConstraintsStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsStorageOutput)
}

// ProjectConstraintsStorageArrayInput is an input type that accepts ProjectConstraintsStorageArray and ProjectConstraintsStorageArrayOutput values.
// You can construct a concrete instance of `ProjectConstraintsStorageArrayInput` via:
//
//          ProjectConstraintsStorageArray{ ProjectConstraintsStorageArgs{...} }
type ProjectConstraintsStorageArrayInput interface {
	pulumi.Input

	ToProjectConstraintsStorageArrayOutput() ProjectConstraintsStorageArrayOutput
	ToProjectConstraintsStorageArrayOutputWithContext(context.Context) ProjectConstraintsStorageArrayOutput
}

type ProjectConstraintsStorageArray []ProjectConstraintsStorageInput

func (ProjectConstraintsStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsStorage)(nil)).Elem()
}

func (i ProjectConstraintsStorageArray) ToProjectConstraintsStorageArrayOutput() ProjectConstraintsStorageArrayOutput {
	return i.ToProjectConstraintsStorageArrayOutputWithContext(context.Background())
}

func (i ProjectConstraintsStorageArray) ToProjectConstraintsStorageArrayOutputWithContext(ctx context.Context) ProjectConstraintsStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConstraintsStorageArrayOutput)
}

type ProjectConstraintsStorageOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectConstraintsStorage)(nil)).Elem()
}

func (o ProjectConstraintsStorageOutput) ToProjectConstraintsStorageOutput() ProjectConstraintsStorageOutput {
	return o
}

func (o ProjectConstraintsStorageOutput) ToProjectConstraintsStorageOutputWithContext(ctx context.Context) ProjectConstraintsStorageOutput {
	return o
}

func (o ProjectConstraintsStorageOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectConstraintsStorage) string { return v.Expression }).(pulumi.StringOutput)
}

func (o ProjectConstraintsStorageOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectConstraintsStorage) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type ProjectConstraintsStorageArrayOutput struct{ *pulumi.OutputState }

func (ProjectConstraintsStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectConstraintsStorage)(nil)).Elem()
}

func (o ProjectConstraintsStorageArrayOutput) ToProjectConstraintsStorageArrayOutput() ProjectConstraintsStorageArrayOutput {
	return o
}

func (o ProjectConstraintsStorageArrayOutput) ToProjectConstraintsStorageArrayOutputWithContext(ctx context.Context) ProjectConstraintsStorageArrayOutput {
	return o
}

func (o ProjectConstraintsStorageArrayOutput) Index(i pulumi.IntInput) ProjectConstraintsStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectConstraintsStorage {
		return vs[0].([]ProjectConstraintsStorage)[vs[1].(int)]
	}).(ProjectConstraintsStorageOutput)
}

type ProjectMemberRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// ProjectMemberRoleInput is an input type that accepts ProjectMemberRoleArgs and ProjectMemberRoleOutput values.
// You can construct a concrete instance of `ProjectMemberRoleInput` via:
//
//          ProjectMemberRoleArgs{...}
type ProjectMemberRoleInput interface {
	pulumi.Input

	ToProjectMemberRoleOutput() ProjectMemberRoleOutput
	ToProjectMemberRoleOutputWithContext(context.Context) ProjectMemberRoleOutput
}

type ProjectMemberRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (ProjectMemberRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMemberRole)(nil)).Elem()
}

func (i ProjectMemberRoleArgs) ToProjectMemberRoleOutput() ProjectMemberRoleOutput {
	return i.ToProjectMemberRoleOutputWithContext(context.Background())
}

func (i ProjectMemberRoleArgs) ToProjectMemberRoleOutputWithContext(ctx context.Context) ProjectMemberRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberRoleOutput)
}

// ProjectMemberRoleArrayInput is an input type that accepts ProjectMemberRoleArray and ProjectMemberRoleArrayOutput values.
// You can construct a concrete instance of `ProjectMemberRoleArrayInput` via:
//
//          ProjectMemberRoleArray{ ProjectMemberRoleArgs{...} }
type ProjectMemberRoleArrayInput interface {
	pulumi.Input

	ToProjectMemberRoleArrayOutput() ProjectMemberRoleArrayOutput
	ToProjectMemberRoleArrayOutputWithContext(context.Context) ProjectMemberRoleArrayOutput
}

type ProjectMemberRoleArray []ProjectMemberRoleInput

func (ProjectMemberRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectMemberRole)(nil)).Elem()
}

func (i ProjectMemberRoleArray) ToProjectMemberRoleArrayOutput() ProjectMemberRoleArrayOutput {
	return i.ToProjectMemberRoleArrayOutputWithContext(context.Background())
}

func (i ProjectMemberRoleArray) ToProjectMemberRoleArrayOutputWithContext(ctx context.Context) ProjectMemberRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberRoleArrayOutput)
}

type ProjectMemberRoleOutput struct{ *pulumi.OutputState }

func (ProjectMemberRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMemberRole)(nil)).Elem()
}

func (o ProjectMemberRoleOutput) ToProjectMemberRoleOutput() ProjectMemberRoleOutput {
	return o
}

func (o ProjectMemberRoleOutput) ToProjectMemberRoleOutputWithContext(ctx context.Context) ProjectMemberRoleOutput {
	return o
}

func (o ProjectMemberRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectMemberRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o ProjectMemberRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectMemberRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectMemberRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectMemberRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectMemberRole)(nil)).Elem()
}

func (o ProjectMemberRoleArrayOutput) ToProjectMemberRoleArrayOutput() ProjectMemberRoleArrayOutput {
	return o
}

func (o ProjectMemberRoleArrayOutput) ToProjectMemberRoleArrayOutputWithContext(ctx context.Context) ProjectMemberRoleArrayOutput {
	return o
}

func (o ProjectMemberRoleArrayOutput) Index(i pulumi.IntInput) ProjectMemberRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectMemberRole {
		return vs[0].([]ProjectMemberRole)[vs[1].(int)]
	}).(ProjectMemberRoleOutput)
}

type ProjectViewerRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// ProjectViewerRoleInput is an input type that accepts ProjectViewerRoleArgs and ProjectViewerRoleOutput values.
// You can construct a concrete instance of `ProjectViewerRoleInput` via:
//
//          ProjectViewerRoleArgs{...}
type ProjectViewerRoleInput interface {
	pulumi.Input

	ToProjectViewerRoleOutput() ProjectViewerRoleOutput
	ToProjectViewerRoleOutputWithContext(context.Context) ProjectViewerRoleOutput
}

type ProjectViewerRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (ProjectViewerRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectViewerRole)(nil)).Elem()
}

func (i ProjectViewerRoleArgs) ToProjectViewerRoleOutput() ProjectViewerRoleOutput {
	return i.ToProjectViewerRoleOutputWithContext(context.Background())
}

func (i ProjectViewerRoleArgs) ToProjectViewerRoleOutputWithContext(ctx context.Context) ProjectViewerRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectViewerRoleOutput)
}

// ProjectViewerRoleArrayInput is an input type that accepts ProjectViewerRoleArray and ProjectViewerRoleArrayOutput values.
// You can construct a concrete instance of `ProjectViewerRoleArrayInput` via:
//
//          ProjectViewerRoleArray{ ProjectViewerRoleArgs{...} }
type ProjectViewerRoleArrayInput interface {
	pulumi.Input

	ToProjectViewerRoleArrayOutput() ProjectViewerRoleArrayOutput
	ToProjectViewerRoleArrayOutputWithContext(context.Context) ProjectViewerRoleArrayOutput
}

type ProjectViewerRoleArray []ProjectViewerRoleInput

func (ProjectViewerRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectViewerRole)(nil)).Elem()
}

func (i ProjectViewerRoleArray) ToProjectViewerRoleArrayOutput() ProjectViewerRoleArrayOutput {
	return i.ToProjectViewerRoleArrayOutputWithContext(context.Background())
}

func (i ProjectViewerRoleArray) ToProjectViewerRoleArrayOutputWithContext(ctx context.Context) ProjectViewerRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectViewerRoleArrayOutput)
}

type ProjectViewerRoleOutput struct{ *pulumi.OutputState }

func (ProjectViewerRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectViewerRole)(nil)).Elem()
}

func (o ProjectViewerRoleOutput) ToProjectViewerRoleOutput() ProjectViewerRoleOutput {
	return o
}

func (o ProjectViewerRoleOutput) ToProjectViewerRoleOutputWithContext(ctx context.Context) ProjectViewerRoleOutput {
	return o
}

func (o ProjectViewerRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectViewerRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o ProjectViewerRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectViewerRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProjectViewerRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectViewerRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectViewerRole)(nil)).Elem()
}

func (o ProjectViewerRoleArrayOutput) ToProjectViewerRoleArrayOutput() ProjectViewerRoleArrayOutput {
	return o
}

func (o ProjectViewerRoleArrayOutput) ToProjectViewerRoleArrayOutputWithContext(ctx context.Context) ProjectViewerRoleArrayOutput {
	return o
}

func (o ProjectViewerRoleArrayOutput) Index(i pulumi.IntInput) ProjectViewerRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectViewerRole {
		return vs[0].([]ProjectViewerRole)[vs[1].(int)]
	}).(ProjectViewerRoleOutput)
}

type ProjectZoneAssignment struct {
	CpuLimit       *int   `pulumi:"cpuLimit"`
	MaxInstances   *int   `pulumi:"maxInstances"`
	MemoryLimitMb  *int   `pulumi:"memoryLimitMb"`
	Priority       *int   `pulumi:"priority"`
	StorageLimitGb *int   `pulumi:"storageLimitGb"`
	ZoneId         string `pulumi:"zoneId"`
}

// ProjectZoneAssignmentInput is an input type that accepts ProjectZoneAssignmentArgs and ProjectZoneAssignmentOutput values.
// You can construct a concrete instance of `ProjectZoneAssignmentInput` via:
//
//          ProjectZoneAssignmentArgs{...}
type ProjectZoneAssignmentInput interface {
	pulumi.Input

	ToProjectZoneAssignmentOutput() ProjectZoneAssignmentOutput
	ToProjectZoneAssignmentOutputWithContext(context.Context) ProjectZoneAssignmentOutput
}

type ProjectZoneAssignmentArgs struct {
	CpuLimit       pulumi.IntPtrInput `pulumi:"cpuLimit"`
	MaxInstances   pulumi.IntPtrInput `pulumi:"maxInstances"`
	MemoryLimitMb  pulumi.IntPtrInput `pulumi:"memoryLimitMb"`
	Priority       pulumi.IntPtrInput `pulumi:"priority"`
	StorageLimitGb pulumi.IntPtrInput `pulumi:"storageLimitGb"`
	ZoneId         pulumi.StringInput `pulumi:"zoneId"`
}

func (ProjectZoneAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectZoneAssignment)(nil)).Elem()
}

func (i ProjectZoneAssignmentArgs) ToProjectZoneAssignmentOutput() ProjectZoneAssignmentOutput {
	return i.ToProjectZoneAssignmentOutputWithContext(context.Background())
}

func (i ProjectZoneAssignmentArgs) ToProjectZoneAssignmentOutputWithContext(ctx context.Context) ProjectZoneAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectZoneAssignmentOutput)
}

// ProjectZoneAssignmentArrayInput is an input type that accepts ProjectZoneAssignmentArray and ProjectZoneAssignmentArrayOutput values.
// You can construct a concrete instance of `ProjectZoneAssignmentArrayInput` via:
//
//          ProjectZoneAssignmentArray{ ProjectZoneAssignmentArgs{...} }
type ProjectZoneAssignmentArrayInput interface {
	pulumi.Input

	ToProjectZoneAssignmentArrayOutput() ProjectZoneAssignmentArrayOutput
	ToProjectZoneAssignmentArrayOutputWithContext(context.Context) ProjectZoneAssignmentArrayOutput
}

type ProjectZoneAssignmentArray []ProjectZoneAssignmentInput

func (ProjectZoneAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectZoneAssignment)(nil)).Elem()
}

func (i ProjectZoneAssignmentArray) ToProjectZoneAssignmentArrayOutput() ProjectZoneAssignmentArrayOutput {
	return i.ToProjectZoneAssignmentArrayOutputWithContext(context.Background())
}

func (i ProjectZoneAssignmentArray) ToProjectZoneAssignmentArrayOutputWithContext(ctx context.Context) ProjectZoneAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectZoneAssignmentArrayOutput)
}

type ProjectZoneAssignmentOutput struct{ *pulumi.OutputState }

func (ProjectZoneAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectZoneAssignment)(nil)).Elem()
}

func (o ProjectZoneAssignmentOutput) ToProjectZoneAssignmentOutput() ProjectZoneAssignmentOutput {
	return o
}

func (o ProjectZoneAssignmentOutput) ToProjectZoneAssignmentOutputWithContext(ctx context.Context) ProjectZoneAssignmentOutput {
	return o
}

func (o ProjectZoneAssignmentOutput) CpuLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) *int { return v.CpuLimit }).(pulumi.IntPtrOutput)
}

func (o ProjectZoneAssignmentOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

func (o ProjectZoneAssignmentOutput) MemoryLimitMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) *int { return v.MemoryLimitMb }).(pulumi.IntPtrOutput)
}

func (o ProjectZoneAssignmentOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o ProjectZoneAssignmentOutput) StorageLimitGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) *int { return v.StorageLimitGb }).(pulumi.IntPtrOutput)
}

func (o ProjectZoneAssignmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectZoneAssignment) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ProjectZoneAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectZoneAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectZoneAssignment)(nil)).Elem()
}

func (o ProjectZoneAssignmentArrayOutput) ToProjectZoneAssignmentArrayOutput() ProjectZoneAssignmentArrayOutput {
	return o
}

func (o ProjectZoneAssignmentArrayOutput) ToProjectZoneAssignmentArrayOutputWithContext(ctx context.Context) ProjectZoneAssignmentArrayOutput {
	return o
}

func (o ProjectZoneAssignmentArrayOutput) Index(i pulumi.IntInput) ProjectZoneAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectZoneAssignment {
		return vs[0].([]ProjectZoneAssignment)[vs[1].(int)]
	}).(ProjectZoneAssignmentOutput)
}

type GetProjectAdministratorRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// GetProjectAdministratorRoleInput is an input type that accepts GetProjectAdministratorRoleArgs and GetProjectAdministratorRoleOutput values.
// You can construct a concrete instance of `GetProjectAdministratorRoleInput` via:
//
//          GetProjectAdministratorRoleArgs{...}
type GetProjectAdministratorRoleInput interface {
	pulumi.Input

	ToGetProjectAdministratorRoleOutput() GetProjectAdministratorRoleOutput
	ToGetProjectAdministratorRoleOutputWithContext(context.Context) GetProjectAdministratorRoleOutput
}

type GetProjectAdministratorRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (GetProjectAdministratorRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectAdministratorRole)(nil)).Elem()
}

func (i GetProjectAdministratorRoleArgs) ToGetProjectAdministratorRoleOutput() GetProjectAdministratorRoleOutput {
	return i.ToGetProjectAdministratorRoleOutputWithContext(context.Background())
}

func (i GetProjectAdministratorRoleArgs) ToGetProjectAdministratorRoleOutputWithContext(ctx context.Context) GetProjectAdministratorRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectAdministratorRoleOutput)
}

// GetProjectAdministratorRoleArrayInput is an input type that accepts GetProjectAdministratorRoleArray and GetProjectAdministratorRoleArrayOutput values.
// You can construct a concrete instance of `GetProjectAdministratorRoleArrayInput` via:
//
//          GetProjectAdministratorRoleArray{ GetProjectAdministratorRoleArgs{...} }
type GetProjectAdministratorRoleArrayInput interface {
	pulumi.Input

	ToGetProjectAdministratorRoleArrayOutput() GetProjectAdministratorRoleArrayOutput
	ToGetProjectAdministratorRoleArrayOutputWithContext(context.Context) GetProjectAdministratorRoleArrayOutput
}

type GetProjectAdministratorRoleArray []GetProjectAdministratorRoleInput

func (GetProjectAdministratorRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectAdministratorRole)(nil)).Elem()
}

func (i GetProjectAdministratorRoleArray) ToGetProjectAdministratorRoleArrayOutput() GetProjectAdministratorRoleArrayOutput {
	return i.ToGetProjectAdministratorRoleArrayOutputWithContext(context.Background())
}

func (i GetProjectAdministratorRoleArray) ToGetProjectAdministratorRoleArrayOutputWithContext(ctx context.Context) GetProjectAdministratorRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectAdministratorRoleArrayOutput)
}

type GetProjectAdministratorRoleOutput struct{ *pulumi.OutputState }

func (GetProjectAdministratorRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectAdministratorRole)(nil)).Elem()
}

func (o GetProjectAdministratorRoleOutput) ToGetProjectAdministratorRoleOutput() GetProjectAdministratorRoleOutput {
	return o
}

func (o GetProjectAdministratorRoleOutput) ToGetProjectAdministratorRoleOutputWithContext(ctx context.Context) GetProjectAdministratorRoleOutput {
	return o
}

func (o GetProjectAdministratorRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectAdministratorRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetProjectAdministratorRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectAdministratorRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetProjectAdministratorRoleArrayOutput struct{ *pulumi.OutputState }

func (GetProjectAdministratorRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectAdministratorRole)(nil)).Elem()
}

func (o GetProjectAdministratorRoleArrayOutput) ToGetProjectAdministratorRoleArrayOutput() GetProjectAdministratorRoleArrayOutput {
	return o
}

func (o GetProjectAdministratorRoleArrayOutput) ToGetProjectAdministratorRoleArrayOutputWithContext(ctx context.Context) GetProjectAdministratorRoleArrayOutput {
	return o
}

func (o GetProjectAdministratorRoleArrayOutput) Index(i pulumi.IntInput) GetProjectAdministratorRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectAdministratorRole {
		return vs[0].([]GetProjectAdministratorRole)[vs[1].(int)]
	}).(GetProjectAdministratorRoleOutput)
}

type GetProjectConstraints struct {
	Extensibilities []GetProjectConstraintsExtensibility `pulumi:"extensibilities"`
	Networks        []GetProjectConstraintsNetwork       `pulumi:"networks"`
	Storages        []GetProjectConstraintsStorage       `pulumi:"storages"`
}

// GetProjectConstraintsInput is an input type that accepts GetProjectConstraintsArgs and GetProjectConstraintsOutput values.
// You can construct a concrete instance of `GetProjectConstraintsInput` via:
//
//          GetProjectConstraintsArgs{...}
type GetProjectConstraintsInput interface {
	pulumi.Input

	ToGetProjectConstraintsOutput() GetProjectConstraintsOutput
	ToGetProjectConstraintsOutputWithContext(context.Context) GetProjectConstraintsOutput
}

type GetProjectConstraintsArgs struct {
	Extensibilities GetProjectConstraintsExtensibilityArrayInput `pulumi:"extensibilities"`
	Networks        GetProjectConstraintsNetworkArrayInput       `pulumi:"networks"`
	Storages        GetProjectConstraintsStorageArrayInput       `pulumi:"storages"`
}

func (GetProjectConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraints)(nil)).Elem()
}

func (i GetProjectConstraintsArgs) ToGetProjectConstraintsOutput() GetProjectConstraintsOutput {
	return i.ToGetProjectConstraintsOutputWithContext(context.Background())
}

func (i GetProjectConstraintsArgs) ToGetProjectConstraintsOutputWithContext(ctx context.Context) GetProjectConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsOutput)
}

func (i GetProjectConstraintsArgs) ToGetProjectConstraintsPtrOutput() GetProjectConstraintsPtrOutput {
	return i.ToGetProjectConstraintsPtrOutputWithContext(context.Background())
}

func (i GetProjectConstraintsArgs) ToGetProjectConstraintsPtrOutputWithContext(ctx context.Context) GetProjectConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsOutput).ToGetProjectConstraintsPtrOutputWithContext(ctx)
}

// GetProjectConstraintsPtrInput is an input type that accepts GetProjectConstraintsArgs, GetProjectConstraintsPtr and GetProjectConstraintsPtrOutput values.
// You can construct a concrete instance of `GetProjectConstraintsPtrInput` via:
//
//          GetProjectConstraintsArgs{...}
//
//  or:
//
//          nil
type GetProjectConstraintsPtrInput interface {
	pulumi.Input

	ToGetProjectConstraintsPtrOutput() GetProjectConstraintsPtrOutput
	ToGetProjectConstraintsPtrOutputWithContext(context.Context) GetProjectConstraintsPtrOutput
}

type getProjectConstraintsPtrType GetProjectConstraintsArgs

func GetProjectConstraintsPtr(v *GetProjectConstraintsArgs) GetProjectConstraintsPtrInput {
	return (*getProjectConstraintsPtrType)(v)
}

func (*getProjectConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetProjectConstraints)(nil)).Elem()
}

func (i *getProjectConstraintsPtrType) ToGetProjectConstraintsPtrOutput() GetProjectConstraintsPtrOutput {
	return i.ToGetProjectConstraintsPtrOutputWithContext(context.Background())
}

func (i *getProjectConstraintsPtrType) ToGetProjectConstraintsPtrOutputWithContext(ctx context.Context) GetProjectConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsPtrOutput)
}

type GetProjectConstraintsOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraints)(nil)).Elem()
}

func (o GetProjectConstraintsOutput) ToGetProjectConstraintsOutput() GetProjectConstraintsOutput {
	return o
}

func (o GetProjectConstraintsOutput) ToGetProjectConstraintsOutputWithContext(ctx context.Context) GetProjectConstraintsOutput {
	return o
}

func (o GetProjectConstraintsOutput) ToGetProjectConstraintsPtrOutput() GetProjectConstraintsPtrOutput {
	return o.ToGetProjectConstraintsPtrOutputWithContext(context.Background())
}

func (o GetProjectConstraintsOutput) ToGetProjectConstraintsPtrOutputWithContext(ctx context.Context) GetProjectConstraintsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetProjectConstraints) *GetProjectConstraints {
		return &v
	}).(GetProjectConstraintsPtrOutput)
}

func (o GetProjectConstraintsOutput) Extensibilities() GetProjectConstraintsExtensibilityArrayOutput {
	return o.ApplyT(func(v GetProjectConstraints) []GetProjectConstraintsExtensibility { return v.Extensibilities }).(GetProjectConstraintsExtensibilityArrayOutput)
}

func (o GetProjectConstraintsOutput) Networks() GetProjectConstraintsNetworkArrayOutput {
	return o.ApplyT(func(v GetProjectConstraints) []GetProjectConstraintsNetwork { return v.Networks }).(GetProjectConstraintsNetworkArrayOutput)
}

func (o GetProjectConstraintsOutput) Storages() GetProjectConstraintsStorageArrayOutput {
	return o.ApplyT(func(v GetProjectConstraints) []GetProjectConstraintsStorage { return v.Storages }).(GetProjectConstraintsStorageArrayOutput)
}

type GetProjectConstraintsPtrOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetProjectConstraints)(nil)).Elem()
}

func (o GetProjectConstraintsPtrOutput) ToGetProjectConstraintsPtrOutput() GetProjectConstraintsPtrOutput {
	return o
}

func (o GetProjectConstraintsPtrOutput) ToGetProjectConstraintsPtrOutputWithContext(ctx context.Context) GetProjectConstraintsPtrOutput {
	return o
}

func (o GetProjectConstraintsPtrOutput) Elem() GetProjectConstraintsOutput {
	return o.ApplyT(func(v *GetProjectConstraints) GetProjectConstraints {
		if v != nil {
			return *v
		}
		var ret GetProjectConstraints
		return ret
	}).(GetProjectConstraintsOutput)
}

func (o GetProjectConstraintsPtrOutput) Extensibilities() GetProjectConstraintsExtensibilityArrayOutput {
	return o.ApplyT(func(v *GetProjectConstraints) []GetProjectConstraintsExtensibility {
		if v == nil {
			return nil
		}
		return v.Extensibilities
	}).(GetProjectConstraintsExtensibilityArrayOutput)
}

func (o GetProjectConstraintsPtrOutput) Networks() GetProjectConstraintsNetworkArrayOutput {
	return o.ApplyT(func(v *GetProjectConstraints) []GetProjectConstraintsNetwork {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(GetProjectConstraintsNetworkArrayOutput)
}

func (o GetProjectConstraintsPtrOutput) Storages() GetProjectConstraintsStorageArrayOutput {
	return o.ApplyT(func(v *GetProjectConstraints) []GetProjectConstraintsStorage {
		if v == nil {
			return nil
		}
		return v.Storages
	}).(GetProjectConstraintsStorageArrayOutput)
}

type GetProjectConstraintsExtensibility struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// GetProjectConstraintsExtensibilityInput is an input type that accepts GetProjectConstraintsExtensibilityArgs and GetProjectConstraintsExtensibilityOutput values.
// You can construct a concrete instance of `GetProjectConstraintsExtensibilityInput` via:
//
//          GetProjectConstraintsExtensibilityArgs{...}
type GetProjectConstraintsExtensibilityInput interface {
	pulumi.Input

	ToGetProjectConstraintsExtensibilityOutput() GetProjectConstraintsExtensibilityOutput
	ToGetProjectConstraintsExtensibilityOutputWithContext(context.Context) GetProjectConstraintsExtensibilityOutput
}

type GetProjectConstraintsExtensibilityArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (GetProjectConstraintsExtensibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsExtensibility)(nil)).Elem()
}

func (i GetProjectConstraintsExtensibilityArgs) ToGetProjectConstraintsExtensibilityOutput() GetProjectConstraintsExtensibilityOutput {
	return i.ToGetProjectConstraintsExtensibilityOutputWithContext(context.Background())
}

func (i GetProjectConstraintsExtensibilityArgs) ToGetProjectConstraintsExtensibilityOutputWithContext(ctx context.Context) GetProjectConstraintsExtensibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsExtensibilityOutput)
}

// GetProjectConstraintsExtensibilityArrayInput is an input type that accepts GetProjectConstraintsExtensibilityArray and GetProjectConstraintsExtensibilityArrayOutput values.
// You can construct a concrete instance of `GetProjectConstraintsExtensibilityArrayInput` via:
//
//          GetProjectConstraintsExtensibilityArray{ GetProjectConstraintsExtensibilityArgs{...} }
type GetProjectConstraintsExtensibilityArrayInput interface {
	pulumi.Input

	ToGetProjectConstraintsExtensibilityArrayOutput() GetProjectConstraintsExtensibilityArrayOutput
	ToGetProjectConstraintsExtensibilityArrayOutputWithContext(context.Context) GetProjectConstraintsExtensibilityArrayOutput
}

type GetProjectConstraintsExtensibilityArray []GetProjectConstraintsExtensibilityInput

func (GetProjectConstraintsExtensibilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsExtensibility)(nil)).Elem()
}

func (i GetProjectConstraintsExtensibilityArray) ToGetProjectConstraintsExtensibilityArrayOutput() GetProjectConstraintsExtensibilityArrayOutput {
	return i.ToGetProjectConstraintsExtensibilityArrayOutputWithContext(context.Background())
}

func (i GetProjectConstraintsExtensibilityArray) ToGetProjectConstraintsExtensibilityArrayOutputWithContext(ctx context.Context) GetProjectConstraintsExtensibilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsExtensibilityArrayOutput)
}

type GetProjectConstraintsExtensibilityOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsExtensibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsExtensibility)(nil)).Elem()
}

func (o GetProjectConstraintsExtensibilityOutput) ToGetProjectConstraintsExtensibilityOutput() GetProjectConstraintsExtensibilityOutput {
	return o
}

func (o GetProjectConstraintsExtensibilityOutput) ToGetProjectConstraintsExtensibilityOutputWithContext(ctx context.Context) GetProjectConstraintsExtensibilityOutput {
	return o
}

func (o GetProjectConstraintsExtensibilityOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectConstraintsExtensibility) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetProjectConstraintsExtensibilityOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectConstraintsExtensibility) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type GetProjectConstraintsExtensibilityArrayOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsExtensibilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsExtensibility)(nil)).Elem()
}

func (o GetProjectConstraintsExtensibilityArrayOutput) ToGetProjectConstraintsExtensibilityArrayOutput() GetProjectConstraintsExtensibilityArrayOutput {
	return o
}

func (o GetProjectConstraintsExtensibilityArrayOutput) ToGetProjectConstraintsExtensibilityArrayOutputWithContext(ctx context.Context) GetProjectConstraintsExtensibilityArrayOutput {
	return o
}

func (o GetProjectConstraintsExtensibilityArrayOutput) Index(i pulumi.IntInput) GetProjectConstraintsExtensibilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectConstraintsExtensibility {
		return vs[0].([]GetProjectConstraintsExtensibility)[vs[1].(int)]
	}).(GetProjectConstraintsExtensibilityOutput)
}

type GetProjectConstraintsNetwork struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// GetProjectConstraintsNetworkInput is an input type that accepts GetProjectConstraintsNetworkArgs and GetProjectConstraintsNetworkOutput values.
// You can construct a concrete instance of `GetProjectConstraintsNetworkInput` via:
//
//          GetProjectConstraintsNetworkArgs{...}
type GetProjectConstraintsNetworkInput interface {
	pulumi.Input

	ToGetProjectConstraintsNetworkOutput() GetProjectConstraintsNetworkOutput
	ToGetProjectConstraintsNetworkOutputWithContext(context.Context) GetProjectConstraintsNetworkOutput
}

type GetProjectConstraintsNetworkArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (GetProjectConstraintsNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsNetwork)(nil)).Elem()
}

func (i GetProjectConstraintsNetworkArgs) ToGetProjectConstraintsNetworkOutput() GetProjectConstraintsNetworkOutput {
	return i.ToGetProjectConstraintsNetworkOutputWithContext(context.Background())
}

func (i GetProjectConstraintsNetworkArgs) ToGetProjectConstraintsNetworkOutputWithContext(ctx context.Context) GetProjectConstraintsNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsNetworkOutput)
}

// GetProjectConstraintsNetworkArrayInput is an input type that accepts GetProjectConstraintsNetworkArray and GetProjectConstraintsNetworkArrayOutput values.
// You can construct a concrete instance of `GetProjectConstraintsNetworkArrayInput` via:
//
//          GetProjectConstraintsNetworkArray{ GetProjectConstraintsNetworkArgs{...} }
type GetProjectConstraintsNetworkArrayInput interface {
	pulumi.Input

	ToGetProjectConstraintsNetworkArrayOutput() GetProjectConstraintsNetworkArrayOutput
	ToGetProjectConstraintsNetworkArrayOutputWithContext(context.Context) GetProjectConstraintsNetworkArrayOutput
}

type GetProjectConstraintsNetworkArray []GetProjectConstraintsNetworkInput

func (GetProjectConstraintsNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsNetwork)(nil)).Elem()
}

func (i GetProjectConstraintsNetworkArray) ToGetProjectConstraintsNetworkArrayOutput() GetProjectConstraintsNetworkArrayOutput {
	return i.ToGetProjectConstraintsNetworkArrayOutputWithContext(context.Background())
}

func (i GetProjectConstraintsNetworkArray) ToGetProjectConstraintsNetworkArrayOutputWithContext(ctx context.Context) GetProjectConstraintsNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsNetworkArrayOutput)
}

type GetProjectConstraintsNetworkOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsNetwork)(nil)).Elem()
}

func (o GetProjectConstraintsNetworkOutput) ToGetProjectConstraintsNetworkOutput() GetProjectConstraintsNetworkOutput {
	return o
}

func (o GetProjectConstraintsNetworkOutput) ToGetProjectConstraintsNetworkOutputWithContext(ctx context.Context) GetProjectConstraintsNetworkOutput {
	return o
}

func (o GetProjectConstraintsNetworkOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectConstraintsNetwork) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetProjectConstraintsNetworkOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectConstraintsNetwork) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type GetProjectConstraintsNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsNetwork)(nil)).Elem()
}

func (o GetProjectConstraintsNetworkArrayOutput) ToGetProjectConstraintsNetworkArrayOutput() GetProjectConstraintsNetworkArrayOutput {
	return o
}

func (o GetProjectConstraintsNetworkArrayOutput) ToGetProjectConstraintsNetworkArrayOutputWithContext(ctx context.Context) GetProjectConstraintsNetworkArrayOutput {
	return o
}

func (o GetProjectConstraintsNetworkArrayOutput) Index(i pulumi.IntInput) GetProjectConstraintsNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectConstraintsNetwork {
		return vs[0].([]GetProjectConstraintsNetwork)[vs[1].(int)]
	}).(GetProjectConstraintsNetworkOutput)
}

type GetProjectConstraintsStorage struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// GetProjectConstraintsStorageInput is an input type that accepts GetProjectConstraintsStorageArgs and GetProjectConstraintsStorageOutput values.
// You can construct a concrete instance of `GetProjectConstraintsStorageInput` via:
//
//          GetProjectConstraintsStorageArgs{...}
type GetProjectConstraintsStorageInput interface {
	pulumi.Input

	ToGetProjectConstraintsStorageOutput() GetProjectConstraintsStorageOutput
	ToGetProjectConstraintsStorageOutputWithContext(context.Context) GetProjectConstraintsStorageOutput
}

type GetProjectConstraintsStorageArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (GetProjectConstraintsStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsStorage)(nil)).Elem()
}

func (i GetProjectConstraintsStorageArgs) ToGetProjectConstraintsStorageOutput() GetProjectConstraintsStorageOutput {
	return i.ToGetProjectConstraintsStorageOutputWithContext(context.Background())
}

func (i GetProjectConstraintsStorageArgs) ToGetProjectConstraintsStorageOutputWithContext(ctx context.Context) GetProjectConstraintsStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsStorageOutput)
}

// GetProjectConstraintsStorageArrayInput is an input type that accepts GetProjectConstraintsStorageArray and GetProjectConstraintsStorageArrayOutput values.
// You can construct a concrete instance of `GetProjectConstraintsStorageArrayInput` via:
//
//          GetProjectConstraintsStorageArray{ GetProjectConstraintsStorageArgs{...} }
type GetProjectConstraintsStorageArrayInput interface {
	pulumi.Input

	ToGetProjectConstraintsStorageArrayOutput() GetProjectConstraintsStorageArrayOutput
	ToGetProjectConstraintsStorageArrayOutputWithContext(context.Context) GetProjectConstraintsStorageArrayOutput
}

type GetProjectConstraintsStorageArray []GetProjectConstraintsStorageInput

func (GetProjectConstraintsStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsStorage)(nil)).Elem()
}

func (i GetProjectConstraintsStorageArray) ToGetProjectConstraintsStorageArrayOutput() GetProjectConstraintsStorageArrayOutput {
	return i.ToGetProjectConstraintsStorageArrayOutputWithContext(context.Background())
}

func (i GetProjectConstraintsStorageArray) ToGetProjectConstraintsStorageArrayOutputWithContext(ctx context.Context) GetProjectConstraintsStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectConstraintsStorageArrayOutput)
}

type GetProjectConstraintsStorageOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectConstraintsStorage)(nil)).Elem()
}

func (o GetProjectConstraintsStorageOutput) ToGetProjectConstraintsStorageOutput() GetProjectConstraintsStorageOutput {
	return o
}

func (o GetProjectConstraintsStorageOutput) ToGetProjectConstraintsStorageOutputWithContext(ctx context.Context) GetProjectConstraintsStorageOutput {
	return o
}

func (o GetProjectConstraintsStorageOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectConstraintsStorage) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetProjectConstraintsStorageOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectConstraintsStorage) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type GetProjectConstraintsStorageArrayOutput struct{ *pulumi.OutputState }

func (GetProjectConstraintsStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectConstraintsStorage)(nil)).Elem()
}

func (o GetProjectConstraintsStorageArrayOutput) ToGetProjectConstraintsStorageArrayOutput() GetProjectConstraintsStorageArrayOutput {
	return o
}

func (o GetProjectConstraintsStorageArrayOutput) ToGetProjectConstraintsStorageArrayOutputWithContext(ctx context.Context) GetProjectConstraintsStorageArrayOutput {
	return o
}

func (o GetProjectConstraintsStorageArrayOutput) Index(i pulumi.IntInput) GetProjectConstraintsStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectConstraintsStorage {
		return vs[0].([]GetProjectConstraintsStorage)[vs[1].(int)]
	}).(GetProjectConstraintsStorageOutput)
}

type GetProjectMemberRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// GetProjectMemberRoleInput is an input type that accepts GetProjectMemberRoleArgs and GetProjectMemberRoleOutput values.
// You can construct a concrete instance of `GetProjectMemberRoleInput` via:
//
//          GetProjectMemberRoleArgs{...}
type GetProjectMemberRoleInput interface {
	pulumi.Input

	ToGetProjectMemberRoleOutput() GetProjectMemberRoleOutput
	ToGetProjectMemberRoleOutputWithContext(context.Context) GetProjectMemberRoleOutput
}

type GetProjectMemberRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (GetProjectMemberRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberRole)(nil)).Elem()
}

func (i GetProjectMemberRoleArgs) ToGetProjectMemberRoleOutput() GetProjectMemberRoleOutput {
	return i.ToGetProjectMemberRoleOutputWithContext(context.Background())
}

func (i GetProjectMemberRoleArgs) ToGetProjectMemberRoleOutputWithContext(ctx context.Context) GetProjectMemberRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberRoleOutput)
}

// GetProjectMemberRoleArrayInput is an input type that accepts GetProjectMemberRoleArray and GetProjectMemberRoleArrayOutput values.
// You can construct a concrete instance of `GetProjectMemberRoleArrayInput` via:
//
//          GetProjectMemberRoleArray{ GetProjectMemberRoleArgs{...} }
type GetProjectMemberRoleArrayInput interface {
	pulumi.Input

	ToGetProjectMemberRoleArrayOutput() GetProjectMemberRoleArrayOutput
	ToGetProjectMemberRoleArrayOutputWithContext(context.Context) GetProjectMemberRoleArrayOutput
}

type GetProjectMemberRoleArray []GetProjectMemberRoleInput

func (GetProjectMemberRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberRole)(nil)).Elem()
}

func (i GetProjectMemberRoleArray) ToGetProjectMemberRoleArrayOutput() GetProjectMemberRoleArrayOutput {
	return i.ToGetProjectMemberRoleArrayOutputWithContext(context.Background())
}

func (i GetProjectMemberRoleArray) ToGetProjectMemberRoleArrayOutputWithContext(ctx context.Context) GetProjectMemberRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectMemberRoleArrayOutput)
}

type GetProjectMemberRoleOutput struct{ *pulumi.OutputState }

func (GetProjectMemberRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectMemberRole)(nil)).Elem()
}

func (o GetProjectMemberRoleOutput) ToGetProjectMemberRoleOutput() GetProjectMemberRoleOutput {
	return o
}

func (o GetProjectMemberRoleOutput) ToGetProjectMemberRoleOutputWithContext(ctx context.Context) GetProjectMemberRoleOutput {
	return o
}

func (o GetProjectMemberRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectMemberRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetProjectMemberRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectMemberRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetProjectMemberRoleArrayOutput struct{ *pulumi.OutputState }

func (GetProjectMemberRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectMemberRole)(nil)).Elem()
}

func (o GetProjectMemberRoleArrayOutput) ToGetProjectMemberRoleArrayOutput() GetProjectMemberRoleArrayOutput {
	return o
}

func (o GetProjectMemberRoleArrayOutput) ToGetProjectMemberRoleArrayOutputWithContext(ctx context.Context) GetProjectMemberRoleArrayOutput {
	return o
}

func (o GetProjectMemberRoleArrayOutput) Index(i pulumi.IntInput) GetProjectMemberRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectMemberRole {
		return vs[0].([]GetProjectMemberRole)[vs[1].(int)]
	}).(GetProjectMemberRoleOutput)
}

type GetProjectViewerRole struct {
	Email string  `pulumi:"email"`
	Type  *string `pulumi:"type"`
}

// GetProjectViewerRoleInput is an input type that accepts GetProjectViewerRoleArgs and GetProjectViewerRoleOutput values.
// You can construct a concrete instance of `GetProjectViewerRoleInput` via:
//
//          GetProjectViewerRoleArgs{...}
type GetProjectViewerRoleInput interface {
	pulumi.Input

	ToGetProjectViewerRoleOutput() GetProjectViewerRoleOutput
	ToGetProjectViewerRoleOutputWithContext(context.Context) GetProjectViewerRoleOutput
}

type GetProjectViewerRoleArgs struct {
	Email pulumi.StringInput    `pulumi:"email"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
}

func (GetProjectViewerRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectViewerRole)(nil)).Elem()
}

func (i GetProjectViewerRoleArgs) ToGetProjectViewerRoleOutput() GetProjectViewerRoleOutput {
	return i.ToGetProjectViewerRoleOutputWithContext(context.Background())
}

func (i GetProjectViewerRoleArgs) ToGetProjectViewerRoleOutputWithContext(ctx context.Context) GetProjectViewerRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectViewerRoleOutput)
}

// GetProjectViewerRoleArrayInput is an input type that accepts GetProjectViewerRoleArray and GetProjectViewerRoleArrayOutput values.
// You can construct a concrete instance of `GetProjectViewerRoleArrayInput` via:
//
//          GetProjectViewerRoleArray{ GetProjectViewerRoleArgs{...} }
type GetProjectViewerRoleArrayInput interface {
	pulumi.Input

	ToGetProjectViewerRoleArrayOutput() GetProjectViewerRoleArrayOutput
	ToGetProjectViewerRoleArrayOutputWithContext(context.Context) GetProjectViewerRoleArrayOutput
}

type GetProjectViewerRoleArray []GetProjectViewerRoleInput

func (GetProjectViewerRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectViewerRole)(nil)).Elem()
}

func (i GetProjectViewerRoleArray) ToGetProjectViewerRoleArrayOutput() GetProjectViewerRoleArrayOutput {
	return i.ToGetProjectViewerRoleArrayOutputWithContext(context.Background())
}

func (i GetProjectViewerRoleArray) ToGetProjectViewerRoleArrayOutputWithContext(ctx context.Context) GetProjectViewerRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectViewerRoleArrayOutput)
}

type GetProjectViewerRoleOutput struct{ *pulumi.OutputState }

func (GetProjectViewerRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectViewerRole)(nil)).Elem()
}

func (o GetProjectViewerRoleOutput) ToGetProjectViewerRoleOutput() GetProjectViewerRoleOutput {
	return o
}

func (o GetProjectViewerRoleOutput) ToGetProjectViewerRoleOutputWithContext(ctx context.Context) GetProjectViewerRoleOutput {
	return o
}

func (o GetProjectViewerRoleOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectViewerRole) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetProjectViewerRoleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProjectViewerRole) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetProjectViewerRoleArrayOutput struct{ *pulumi.OutputState }

func (GetProjectViewerRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectViewerRole)(nil)).Elem()
}

func (o GetProjectViewerRoleArrayOutput) ToGetProjectViewerRoleArrayOutput() GetProjectViewerRoleArrayOutput {
	return o
}

func (o GetProjectViewerRoleArrayOutput) ToGetProjectViewerRoleArrayOutputWithContext(ctx context.Context) GetProjectViewerRoleArrayOutput {
	return o
}

func (o GetProjectViewerRoleArrayOutput) Index(i pulumi.IntInput) GetProjectViewerRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectViewerRole {
		return vs[0].([]GetProjectViewerRole)[vs[1].(int)]
	}).(GetProjectViewerRoleOutput)
}

type GetProjectZoneAssignment struct {
	CpuLimit       int    `pulumi:"cpuLimit"`
	MaxInstances   int    `pulumi:"maxInstances"`
	MemoryLimitMb  int    `pulumi:"memoryLimitMb"`
	Priority       int    `pulumi:"priority"`
	StorageLimitGb int    `pulumi:"storageLimitGb"`
	ZoneId         string `pulumi:"zoneId"`
}

// GetProjectZoneAssignmentInput is an input type that accepts GetProjectZoneAssignmentArgs and GetProjectZoneAssignmentOutput values.
// You can construct a concrete instance of `GetProjectZoneAssignmentInput` via:
//
//          GetProjectZoneAssignmentArgs{...}
type GetProjectZoneAssignmentInput interface {
	pulumi.Input

	ToGetProjectZoneAssignmentOutput() GetProjectZoneAssignmentOutput
	ToGetProjectZoneAssignmentOutputWithContext(context.Context) GetProjectZoneAssignmentOutput
}

type GetProjectZoneAssignmentArgs struct {
	CpuLimit       pulumi.IntInput    `pulumi:"cpuLimit"`
	MaxInstances   pulumi.IntInput    `pulumi:"maxInstances"`
	MemoryLimitMb  pulumi.IntInput    `pulumi:"memoryLimitMb"`
	Priority       pulumi.IntInput    `pulumi:"priority"`
	StorageLimitGb pulumi.IntInput    `pulumi:"storageLimitGb"`
	ZoneId         pulumi.StringInput `pulumi:"zoneId"`
}

func (GetProjectZoneAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectZoneAssignment)(nil)).Elem()
}

func (i GetProjectZoneAssignmentArgs) ToGetProjectZoneAssignmentOutput() GetProjectZoneAssignmentOutput {
	return i.ToGetProjectZoneAssignmentOutputWithContext(context.Background())
}

func (i GetProjectZoneAssignmentArgs) ToGetProjectZoneAssignmentOutputWithContext(ctx context.Context) GetProjectZoneAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectZoneAssignmentOutput)
}

// GetProjectZoneAssignmentArrayInput is an input type that accepts GetProjectZoneAssignmentArray and GetProjectZoneAssignmentArrayOutput values.
// You can construct a concrete instance of `GetProjectZoneAssignmentArrayInput` via:
//
//          GetProjectZoneAssignmentArray{ GetProjectZoneAssignmentArgs{...} }
type GetProjectZoneAssignmentArrayInput interface {
	pulumi.Input

	ToGetProjectZoneAssignmentArrayOutput() GetProjectZoneAssignmentArrayOutput
	ToGetProjectZoneAssignmentArrayOutputWithContext(context.Context) GetProjectZoneAssignmentArrayOutput
}

type GetProjectZoneAssignmentArray []GetProjectZoneAssignmentInput

func (GetProjectZoneAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectZoneAssignment)(nil)).Elem()
}

func (i GetProjectZoneAssignmentArray) ToGetProjectZoneAssignmentArrayOutput() GetProjectZoneAssignmentArrayOutput {
	return i.ToGetProjectZoneAssignmentArrayOutputWithContext(context.Background())
}

func (i GetProjectZoneAssignmentArray) ToGetProjectZoneAssignmentArrayOutputWithContext(ctx context.Context) GetProjectZoneAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectZoneAssignmentArrayOutput)
}

type GetProjectZoneAssignmentOutput struct{ *pulumi.OutputState }

func (GetProjectZoneAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectZoneAssignment)(nil)).Elem()
}

func (o GetProjectZoneAssignmentOutput) ToGetProjectZoneAssignmentOutput() GetProjectZoneAssignmentOutput {
	return o
}

func (o GetProjectZoneAssignmentOutput) ToGetProjectZoneAssignmentOutputWithContext(ctx context.Context) GetProjectZoneAssignmentOutput {
	return o
}

func (o GetProjectZoneAssignmentOutput) CpuLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) int { return v.CpuLimit }).(pulumi.IntOutput)
}

func (o GetProjectZoneAssignmentOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) int { return v.MaxInstances }).(pulumi.IntOutput)
}

func (o GetProjectZoneAssignmentOutput) MemoryLimitMb() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) int { return v.MemoryLimitMb }).(pulumi.IntOutput)
}

func (o GetProjectZoneAssignmentOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) int { return v.Priority }).(pulumi.IntOutput)
}

func (o GetProjectZoneAssignmentOutput) StorageLimitGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) int { return v.StorageLimitGb }).(pulumi.IntOutput)
}

func (o GetProjectZoneAssignmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectZoneAssignment) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetProjectZoneAssignmentArrayOutput struct{ *pulumi.OutputState }

func (GetProjectZoneAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectZoneAssignment)(nil)).Elem()
}

func (o GetProjectZoneAssignmentArrayOutput) ToGetProjectZoneAssignmentArrayOutput() GetProjectZoneAssignmentArrayOutput {
	return o
}

func (o GetProjectZoneAssignmentArrayOutput) ToGetProjectZoneAssignmentArrayOutputWithContext(ctx context.Context) GetProjectZoneAssignmentArrayOutput {
	return o
}

func (o GetProjectZoneAssignmentArrayOutput) Index(i pulumi.IntInput) GetProjectZoneAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectZoneAssignment {
		return vs[0].([]GetProjectZoneAssignment)[vs[1].(int)]
	}).(GetProjectZoneAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAdministratorRoleInput)(nil)).Elem(), ProjectAdministratorRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectAdministratorRoleArrayInput)(nil)).Elem(), ProjectAdministratorRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsInput)(nil)).Elem(), ProjectConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsPtrInput)(nil)).Elem(), ProjectConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsExtensibilityInput)(nil)).Elem(), ProjectConstraintsExtensibilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsExtensibilityArrayInput)(nil)).Elem(), ProjectConstraintsExtensibilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsNetworkInput)(nil)).Elem(), ProjectConstraintsNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsNetworkArrayInput)(nil)).Elem(), ProjectConstraintsNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsStorageInput)(nil)).Elem(), ProjectConstraintsStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConstraintsStorageArrayInput)(nil)).Elem(), ProjectConstraintsStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberRoleInput)(nil)).Elem(), ProjectMemberRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberRoleArrayInput)(nil)).Elem(), ProjectMemberRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectViewerRoleInput)(nil)).Elem(), ProjectViewerRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectViewerRoleArrayInput)(nil)).Elem(), ProjectViewerRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectZoneAssignmentInput)(nil)).Elem(), ProjectZoneAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectZoneAssignmentArrayInput)(nil)).Elem(), ProjectZoneAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectAdministratorRoleInput)(nil)).Elem(), GetProjectAdministratorRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectAdministratorRoleArrayInput)(nil)).Elem(), GetProjectAdministratorRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsInput)(nil)).Elem(), GetProjectConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsPtrInput)(nil)).Elem(), GetProjectConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsExtensibilityInput)(nil)).Elem(), GetProjectConstraintsExtensibilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsExtensibilityArrayInput)(nil)).Elem(), GetProjectConstraintsExtensibilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsNetworkInput)(nil)).Elem(), GetProjectConstraintsNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsNetworkArrayInput)(nil)).Elem(), GetProjectConstraintsNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsStorageInput)(nil)).Elem(), GetProjectConstraintsStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectConstraintsStorageArrayInput)(nil)).Elem(), GetProjectConstraintsStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberRoleInput)(nil)).Elem(), GetProjectMemberRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectMemberRoleArrayInput)(nil)).Elem(), GetProjectMemberRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectViewerRoleInput)(nil)).Elem(), GetProjectViewerRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectViewerRoleArrayInput)(nil)).Elem(), GetProjectViewerRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectZoneAssignmentInput)(nil)).Elem(), GetProjectZoneAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectZoneAssignmentArrayInput)(nil)).Elem(), GetProjectZoneAssignmentArray{})
	pulumi.RegisterOutputType(ProjectAdministratorRoleOutput{})
	pulumi.RegisterOutputType(ProjectAdministratorRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsPtrOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsExtensibilityOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsExtensibilityArrayOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsNetworkOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsNetworkArrayOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsStorageOutput{})
	pulumi.RegisterOutputType(ProjectConstraintsStorageArrayOutput{})
	pulumi.RegisterOutputType(ProjectMemberRoleOutput{})
	pulumi.RegisterOutputType(ProjectMemberRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectViewerRoleOutput{})
	pulumi.RegisterOutputType(ProjectViewerRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectZoneAssignmentOutput{})
	pulumi.RegisterOutputType(ProjectZoneAssignmentArrayOutput{})
	pulumi.RegisterOutputType(GetProjectAdministratorRoleOutput{})
	pulumi.RegisterOutputType(GetProjectAdministratorRoleArrayOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsPtrOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsExtensibilityOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsExtensibilityArrayOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsNetworkOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsStorageOutput{})
	pulumi.RegisterOutputType(GetProjectConstraintsStorageArrayOutput{})
	pulumi.RegisterOutputType(GetProjectMemberRoleOutput{})
	pulumi.RegisterOutputType(GetProjectMemberRoleArrayOutput{})
	pulumi.RegisterOutputType(GetProjectViewerRoleOutput{})
	pulumi.RegisterOutputType(GetProjectViewerRoleArrayOutput{})
	pulumi.RegisterOutputType(GetProjectZoneAssignmentOutput{})
	pulumi.RegisterOutputType(GetProjectZoneAssignmentArrayOutput{})
}
