// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package project

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a project data source.
//
// **Project data source by its id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/project"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/project"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := project.LookupProject(ctx, &project.LookupProjectArgs{
//				Id: pulumi.StringRef(vra_project.My - project.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Project data source filter by name:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/project"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/project"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := project.LookupProject(ctx, &project.LookupProjectArgs{
//				Name: pulumi.StringRef(vra_project.My - project.Name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A project data source supports the following arguments:
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("vra:project/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// Administrator users or groups associated with the project. Only administrators can manage project's configuration.
	AdministratorRoles []GetProjectAdministratorRole `pulumi:"administratorRoles"`
	// A list of administrator users associated with the project. Only administrators can manage project's configuration.
	Administrators []string `pulumi:"administrators"`
	// A list of storage, network and extensibility constraints to be applied when provisioning through this project.
	Constraints *GetProjectConstraints `pulumi:"constraints"`
	// The project custom properties which are added to all requests in this project.
	CustomProperties map[string]interface{} `pulumi:"customProperties"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// The id of the image profile instance.
	Id *string `pulumi:"id"`
	// The naming template to be used for resources provisioned in this project.
	MachineNamingTemplate *string `pulumi:"machineNamingTemplate"`
	// Member users or groups associated with the project.
	MemberRoles []GetProjectMemberRole `pulumi:"memberRoles"`
	// A list of member users associated with the project.
	Members []string `pulumi:"members"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds.
	OperationTimeout *int `pulumi:"operationTimeout"`
	// The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
	PlacementPolicy *string `pulumi:"placementPolicy"`
	// The id of the organization this entity belongs to.
	SharedResources *bool `pulumi:"sharedResources"`
	// Viewer users or groups associated with the project.
	ViewerRoles []GetProjectViewerRole `pulumi:"viewerRoles"`
	// A list of viewer users associated with the project.
	Viewers []string `pulumi:"viewers"`
	// A list of configurations for zone assignment to a project.
	ZoneAssignments []GetProjectZoneAssignment `pulumi:"zoneAssignments"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	AdministratorRoles    []GetProjectAdministratorRole `pulumi:"administratorRoles"`
	Administrators        []string                      `pulumi:"administrators"`
	Constraints           *GetProjectConstraints        `pulumi:"constraints"`
	CustomProperties      map[string]interface{}        `pulumi:"customProperties"`
	Description           string                        `pulumi:"description"`
	Id                    string                        `pulumi:"id"`
	MachineNamingTemplate *string                       `pulumi:"machineNamingTemplate"`
	MemberRoles           []GetProjectMemberRole        `pulumi:"memberRoles"`
	Members               []string                      `pulumi:"members"`
	Name                  string                        `pulumi:"name"`
	OperationTimeout      *int                          `pulumi:"operationTimeout"`
	PlacementPolicy       *string                       `pulumi:"placementPolicy"`
	SharedResources       bool                          `pulumi:"sharedResources"`
	ViewerRoles           []GetProjectViewerRole        `pulumi:"viewerRoles"`
	Viewers               []string                      `pulumi:"viewers"`
	ZoneAssignments       []GetProjectZoneAssignment    `pulumi:"zoneAssignments"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectResult, error) {
			args := v.(LookupProjectArgs)
			r, err := LookupProject(ctx, &args, opts...)
			var s LookupProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// Administrator users or groups associated with the project. Only administrators can manage project's configuration.
	AdministratorRoles GetProjectAdministratorRoleArrayInput `pulumi:"administratorRoles"`
	// A list of administrator users associated with the project. Only administrators can manage project's configuration.
	Administrators pulumi.StringArrayInput `pulumi:"administrators"`
	// A list of storage, network and extensibility constraints to be applied when provisioning through this project.
	Constraints GetProjectConstraintsPtrInput `pulumi:"constraints"`
	// The project custom properties which are added to all requests in this project.
	CustomProperties pulumi.MapInput `pulumi:"customProperties"`
	// A human-friendly description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The id of the image profile instance.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The naming template to be used for resources provisioned in this project.
	MachineNamingTemplate pulumi.StringPtrInput `pulumi:"machineNamingTemplate"`
	// Member users or groups associated with the project.
	MemberRoles GetProjectMemberRoleArrayInput `pulumi:"memberRoles"`
	// A list of member users associated with the project.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds.
	OperationTimeout pulumi.IntPtrInput `pulumi:"operationTimeout"`
	// The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
	PlacementPolicy pulumi.StringPtrInput `pulumi:"placementPolicy"`
	// The id of the organization this entity belongs to.
	SharedResources pulumi.BoolPtrInput `pulumi:"sharedResources"`
	// Viewer users or groups associated with the project.
	ViewerRoles GetProjectViewerRoleArrayInput `pulumi:"viewerRoles"`
	// A list of viewer users associated with the project.
	Viewers pulumi.StringArrayInput `pulumi:"viewers"`
	// A list of configurations for zone assignment to a project.
	ZoneAssignments GetProjectZoneAssignmentArrayInput `pulumi:"zoneAssignments"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) AdministratorRoles() GetProjectAdministratorRoleArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectAdministratorRole { return v.AdministratorRoles }).(GetProjectAdministratorRoleArrayOutput)
}

func (o LookupProjectResultOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []string { return v.Administrators }).(pulumi.StringArrayOutput)
}

func (o LookupProjectResultOutput) Constraints() GetProjectConstraintsPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *GetProjectConstraints { return v.Constraints }).(GetProjectConstraintsPtrOutput)
}

func (o LookupProjectResultOutput) CustomProperties() pulumi.MapOutput {
	return o.ApplyT(func(v LookupProjectResult) map[string]interface{} { return v.CustomProperties }).(pulumi.MapOutput)
}

func (o LookupProjectResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) MachineNamingTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *string { return v.MachineNamingTemplate }).(pulumi.StringPtrOutput)
}

func (o LookupProjectResultOutput) MemberRoles() GetProjectMemberRoleArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectMemberRole { return v.MemberRoles }).(GetProjectMemberRoleArrayOutput)
}

func (o LookupProjectResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []string { return v.Members }).(pulumi.StringArrayOutput)
}

func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) OperationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *int { return v.OperationTimeout }).(pulumi.IntPtrOutput)
}

func (o LookupProjectResultOutput) PlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProjectResult) *string { return v.PlacementPolicy }).(pulumi.StringPtrOutput)
}

func (o LookupProjectResultOutput) SharedResources() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupProjectResult) bool { return v.SharedResources }).(pulumi.BoolOutput)
}

func (o LookupProjectResultOutput) ViewerRoles() GetProjectViewerRoleArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectViewerRole { return v.ViewerRoles }).(GetProjectViewerRoleArrayOutput)
}

func (o LookupProjectResultOutput) Viewers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []string { return v.Viewers }).(pulumi.StringArrayOutput)
}

func (o LookupProjectResultOutput) ZoneAssignments() GetProjectZoneAssignmentArrayOutput {
	return o.ApplyT(func(v LookupProjectResult) []GetProjectZoneAssignment { return v.ZoneAssignments }).(GetProjectZoneAssignmentArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
