// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides a way to create a catalog source entitlement in VMware vRealize Automation.
//
// ## Example Usage
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewCatalogSourceEntitlement(ctx, "this", &vra.CatalogSourceEntitlementArgs{
//				CatalogSourceId: pulumi.Any(_var.Catalog_source_blueprint_id),
//				ProjectId:       pulumi.Any(_var.Project_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Attribute Reference
//
// * `definition` - Represents a catalog source that is linked to a project via an entitlement.
//
//   - `description` - Description of the catalog source.
//
//   - `iconId` - Icon id of associated catalog source.
//
//   - `id` - Id of the catalog source.
//
//   - `name` - Name of the catalog source.
//
//   - `numberOfItems` - Number of items in the associated catalog source.
//
//   - `sourceName` - Catalog source name.
//
//   - `sourceType` - Catalog source type.
//
//   - `type` - Content definition type.
//
// ## Import
//
// Catalog source entitlement can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import vra:index/catalogSourceEntitlement:CatalogSourceEntitlement this 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type CatalogSourceEntitlement struct {
	pulumi.CustomResourceState

	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringOutput                           `pulumi:"catalogSourceId"`
	Definitions     CatalogSourceEntitlementDefinitionArrayOutput `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewCatalogSourceEntitlement registers a new resource with the given unique name, arguments, and options.
func NewCatalogSourceEntitlement(ctx *pulumi.Context,
	name string, args *CatalogSourceEntitlementArgs, opts ...pulumi.ResourceOption) (*CatalogSourceEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogSourceId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogSourceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CatalogSourceEntitlement
	err := ctx.RegisterResource("vra:index/catalogSourceEntitlement:CatalogSourceEntitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogSourceEntitlement gets an existing CatalogSourceEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogSourceEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogSourceEntitlementState, opts ...pulumi.ResourceOption) (*CatalogSourceEntitlement, error) {
	var resource CatalogSourceEntitlement
	err := ctx.ReadResource("vra:index/catalogSourceEntitlement:CatalogSourceEntitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogSourceEntitlement resources.
type catalogSourceEntitlementState struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId *string                              `pulumi:"catalogSourceId"`
	Definitions     []CatalogSourceEntitlementDefinition `pulumi:"definitions"`
	// The id of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
}

type CatalogSourceEntitlementState struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringPtrInput
	Definitions     CatalogSourceEntitlementDefinitionArrayInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
}

func (CatalogSourceEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogSourceEntitlementState)(nil)).Elem()
}

type catalogSourceEntitlementArgs struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId string `pulumi:"catalogSourceId"`
	// The id of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a CatalogSourceEntitlement resource.
type CatalogSourceEntitlementArgs struct {
	// The id of the catalog source to create the entitlement.
	CatalogSourceId pulumi.StringInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringInput
}

func (CatalogSourceEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogSourceEntitlementArgs)(nil)).Elem()
}

type CatalogSourceEntitlementInput interface {
	pulumi.Input

	ToCatalogSourceEntitlementOutput() CatalogSourceEntitlementOutput
	ToCatalogSourceEntitlementOutputWithContext(ctx context.Context) CatalogSourceEntitlementOutput
}

func (*CatalogSourceEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogSourceEntitlement)(nil)).Elem()
}

func (i *CatalogSourceEntitlement) ToCatalogSourceEntitlementOutput() CatalogSourceEntitlementOutput {
	return i.ToCatalogSourceEntitlementOutputWithContext(context.Background())
}

func (i *CatalogSourceEntitlement) ToCatalogSourceEntitlementOutputWithContext(ctx context.Context) CatalogSourceEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceEntitlementOutput)
}

// CatalogSourceEntitlementArrayInput is an input type that accepts CatalogSourceEntitlementArray and CatalogSourceEntitlementArrayOutput values.
// You can construct a concrete instance of `CatalogSourceEntitlementArrayInput` via:
//
//	CatalogSourceEntitlementArray{ CatalogSourceEntitlementArgs{...} }
type CatalogSourceEntitlementArrayInput interface {
	pulumi.Input

	ToCatalogSourceEntitlementArrayOutput() CatalogSourceEntitlementArrayOutput
	ToCatalogSourceEntitlementArrayOutputWithContext(context.Context) CatalogSourceEntitlementArrayOutput
}

type CatalogSourceEntitlementArray []CatalogSourceEntitlementInput

func (CatalogSourceEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogSourceEntitlement)(nil)).Elem()
}

func (i CatalogSourceEntitlementArray) ToCatalogSourceEntitlementArrayOutput() CatalogSourceEntitlementArrayOutput {
	return i.ToCatalogSourceEntitlementArrayOutputWithContext(context.Background())
}

func (i CatalogSourceEntitlementArray) ToCatalogSourceEntitlementArrayOutputWithContext(ctx context.Context) CatalogSourceEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceEntitlementArrayOutput)
}

// CatalogSourceEntitlementMapInput is an input type that accepts CatalogSourceEntitlementMap and CatalogSourceEntitlementMapOutput values.
// You can construct a concrete instance of `CatalogSourceEntitlementMapInput` via:
//
//	CatalogSourceEntitlementMap{ "key": CatalogSourceEntitlementArgs{...} }
type CatalogSourceEntitlementMapInput interface {
	pulumi.Input

	ToCatalogSourceEntitlementMapOutput() CatalogSourceEntitlementMapOutput
	ToCatalogSourceEntitlementMapOutputWithContext(context.Context) CatalogSourceEntitlementMapOutput
}

type CatalogSourceEntitlementMap map[string]CatalogSourceEntitlementInput

func (CatalogSourceEntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogSourceEntitlement)(nil)).Elem()
}

func (i CatalogSourceEntitlementMap) ToCatalogSourceEntitlementMapOutput() CatalogSourceEntitlementMapOutput {
	return i.ToCatalogSourceEntitlementMapOutputWithContext(context.Background())
}

func (i CatalogSourceEntitlementMap) ToCatalogSourceEntitlementMapOutputWithContext(ctx context.Context) CatalogSourceEntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceEntitlementMapOutput)
}

type CatalogSourceEntitlementOutput struct{ *pulumi.OutputState }

func (CatalogSourceEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogSourceEntitlement)(nil)).Elem()
}

func (o CatalogSourceEntitlementOutput) ToCatalogSourceEntitlementOutput() CatalogSourceEntitlementOutput {
	return o
}

func (o CatalogSourceEntitlementOutput) ToCatalogSourceEntitlementOutputWithContext(ctx context.Context) CatalogSourceEntitlementOutput {
	return o
}

// The id of the catalog source to create the entitlement.
func (o CatalogSourceEntitlementOutput) CatalogSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceEntitlement) pulumi.StringOutput { return v.CatalogSourceId }).(pulumi.StringOutput)
}

func (o CatalogSourceEntitlementOutput) Definitions() CatalogSourceEntitlementDefinitionArrayOutput {
	return o.ApplyT(func(v *CatalogSourceEntitlement) CatalogSourceEntitlementDefinitionArrayOutput { return v.Definitions }).(CatalogSourceEntitlementDefinitionArrayOutput)
}

// The id of the project this entity belongs to.
func (o CatalogSourceEntitlementOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceEntitlement) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type CatalogSourceEntitlementArrayOutput struct{ *pulumi.OutputState }

func (CatalogSourceEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogSourceEntitlement)(nil)).Elem()
}

func (o CatalogSourceEntitlementArrayOutput) ToCatalogSourceEntitlementArrayOutput() CatalogSourceEntitlementArrayOutput {
	return o
}

func (o CatalogSourceEntitlementArrayOutput) ToCatalogSourceEntitlementArrayOutputWithContext(ctx context.Context) CatalogSourceEntitlementArrayOutput {
	return o
}

func (o CatalogSourceEntitlementArrayOutput) Index(i pulumi.IntInput) CatalogSourceEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogSourceEntitlement {
		return vs[0].([]*CatalogSourceEntitlement)[vs[1].(int)]
	}).(CatalogSourceEntitlementOutput)
}

type CatalogSourceEntitlementMapOutput struct{ *pulumi.OutputState }

func (CatalogSourceEntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogSourceEntitlement)(nil)).Elem()
}

func (o CatalogSourceEntitlementMapOutput) ToCatalogSourceEntitlementMapOutput() CatalogSourceEntitlementMapOutput {
	return o
}

func (o CatalogSourceEntitlementMapOutput) ToCatalogSourceEntitlementMapOutputWithContext(ctx context.Context) CatalogSourceEntitlementMapOutput {
	return o
}

func (o CatalogSourceEntitlementMapOutput) MapIndex(k pulumi.StringInput) CatalogSourceEntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogSourceEntitlement {
		return vs[0].(map[string]*CatalogSourceEntitlement)[vs[1].(string)]
	}).(CatalogSourceEntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceEntitlementInput)(nil)).Elem(), &CatalogSourceEntitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceEntitlementArrayInput)(nil)).Elem(), CatalogSourceEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceEntitlementMapInput)(nil)).Elem(), CatalogSourceEntitlementMap{})
	pulumi.RegisterOutputType(CatalogSourceEntitlementOutput{})
	pulumi.RegisterOutputType(CatalogSourceEntitlementArrayOutput{})
	pulumi.RegisterOutputType(CatalogSourceEntitlementMapOutput{})
}
