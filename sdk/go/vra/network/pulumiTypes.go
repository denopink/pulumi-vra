// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IpRangeLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// IpRangeLinkInput is an input type that accepts IpRangeLinkArgs and IpRangeLinkOutput values.
// You can construct a concrete instance of `IpRangeLinkInput` via:
//
//          IpRangeLinkArgs{...}
type IpRangeLinkInput interface {
	pulumi.Input

	ToIpRangeLinkOutput() IpRangeLinkOutput
	ToIpRangeLinkOutputWithContext(context.Context) IpRangeLinkOutput
}

type IpRangeLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (IpRangeLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRangeLink)(nil)).Elem()
}

func (i IpRangeLinkArgs) ToIpRangeLinkOutput() IpRangeLinkOutput {
	return i.ToIpRangeLinkOutputWithContext(context.Background())
}

func (i IpRangeLinkArgs) ToIpRangeLinkOutputWithContext(ctx context.Context) IpRangeLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeLinkOutput)
}

// IpRangeLinkArrayInput is an input type that accepts IpRangeLinkArray and IpRangeLinkArrayOutput values.
// You can construct a concrete instance of `IpRangeLinkArrayInput` via:
//
//          IpRangeLinkArray{ IpRangeLinkArgs{...} }
type IpRangeLinkArrayInput interface {
	pulumi.Input

	ToIpRangeLinkArrayOutput() IpRangeLinkArrayOutput
	ToIpRangeLinkArrayOutputWithContext(context.Context) IpRangeLinkArrayOutput
}

type IpRangeLinkArray []IpRangeLinkInput

func (IpRangeLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRangeLink)(nil)).Elem()
}

func (i IpRangeLinkArray) ToIpRangeLinkArrayOutput() IpRangeLinkArrayOutput {
	return i.ToIpRangeLinkArrayOutputWithContext(context.Background())
}

func (i IpRangeLinkArray) ToIpRangeLinkArrayOutputWithContext(ctx context.Context) IpRangeLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeLinkArrayOutput)
}

type IpRangeLinkOutput struct{ *pulumi.OutputState }

func (IpRangeLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRangeLink)(nil)).Elem()
}

func (o IpRangeLinkOutput) ToIpRangeLinkOutput() IpRangeLinkOutput {
	return o
}

func (o IpRangeLinkOutput) ToIpRangeLinkOutputWithContext(ctx context.Context) IpRangeLinkOutput {
	return o
}

func (o IpRangeLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpRangeLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o IpRangeLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpRangeLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o IpRangeLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeLink) string { return v.Rel }).(pulumi.StringOutput)
}

type IpRangeLinkArrayOutput struct{ *pulumi.OutputState }

func (IpRangeLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRangeLink)(nil)).Elem()
}

func (o IpRangeLinkArrayOutput) ToIpRangeLinkArrayOutput() IpRangeLinkArrayOutput {
	return o
}

func (o IpRangeLinkArrayOutput) ToIpRangeLinkArrayOutputWithContext(ctx context.Context) IpRangeLinkArrayOutput {
	return o
}

func (o IpRangeLinkArrayOutput) Index(i pulumi.IntInput) IpRangeLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpRangeLink {
		return vs[0].([]IpRangeLink)[vs[1].(int)]
	}).(IpRangeLinkOutput)
}

type IpRangeTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// IpRangeTagInput is an input type that accepts IpRangeTagArgs and IpRangeTagOutput values.
// You can construct a concrete instance of `IpRangeTagInput` via:
//
//          IpRangeTagArgs{...}
type IpRangeTagInput interface {
	pulumi.Input

	ToIpRangeTagOutput() IpRangeTagOutput
	ToIpRangeTagOutputWithContext(context.Context) IpRangeTagOutput
}

type IpRangeTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (IpRangeTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRangeTag)(nil)).Elem()
}

func (i IpRangeTagArgs) ToIpRangeTagOutput() IpRangeTagOutput {
	return i.ToIpRangeTagOutputWithContext(context.Background())
}

func (i IpRangeTagArgs) ToIpRangeTagOutputWithContext(ctx context.Context) IpRangeTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeTagOutput)
}

// IpRangeTagArrayInput is an input type that accepts IpRangeTagArray and IpRangeTagArrayOutput values.
// You can construct a concrete instance of `IpRangeTagArrayInput` via:
//
//          IpRangeTagArray{ IpRangeTagArgs{...} }
type IpRangeTagArrayInput interface {
	pulumi.Input

	ToIpRangeTagArrayOutput() IpRangeTagArrayOutput
	ToIpRangeTagArrayOutputWithContext(context.Context) IpRangeTagArrayOutput
}

type IpRangeTagArray []IpRangeTagInput

func (IpRangeTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRangeTag)(nil)).Elem()
}

func (i IpRangeTagArray) ToIpRangeTagArrayOutput() IpRangeTagArrayOutput {
	return i.ToIpRangeTagArrayOutputWithContext(context.Background())
}

func (i IpRangeTagArray) ToIpRangeTagArrayOutputWithContext(ctx context.Context) IpRangeTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeTagArrayOutput)
}

type IpRangeTagOutput struct{ *pulumi.OutputState }

func (IpRangeTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRangeTag)(nil)).Elem()
}

func (o IpRangeTagOutput) ToIpRangeTagOutput() IpRangeTagOutput {
	return o
}

func (o IpRangeTagOutput) ToIpRangeTagOutputWithContext(ctx context.Context) IpRangeTagOutput {
	return o
}

func (o IpRangeTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o IpRangeTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeTag) string { return v.Value }).(pulumi.StringOutput)
}

type IpRangeTagArrayOutput struct{ *pulumi.OutputState }

func (IpRangeTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRangeTag)(nil)).Elem()
}

func (o IpRangeTagArrayOutput) ToIpRangeTagArrayOutput() IpRangeTagArrayOutput {
	return o
}

func (o IpRangeTagArrayOutput) ToIpRangeTagArrayOutputWithContext(ctx context.Context) IpRangeTagArrayOutput {
	return o
}

func (o IpRangeTagArrayOutput) Index(i pulumi.IntInput) IpRangeTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpRangeTag {
		return vs[0].([]IpRangeTag)[vs[1].(int)]
	}).(IpRangeTagOutput)
}

type NetworkConstraint struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// NetworkConstraintInput is an input type that accepts NetworkConstraintArgs and NetworkConstraintOutput values.
// You can construct a concrete instance of `NetworkConstraintInput` via:
//
//          NetworkConstraintArgs{...}
type NetworkConstraintInput interface {
	pulumi.Input

	ToNetworkConstraintOutput() NetworkConstraintOutput
	ToNetworkConstraintOutputWithContext(context.Context) NetworkConstraintOutput
}

type NetworkConstraintArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (NetworkConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConstraint)(nil)).Elem()
}

func (i NetworkConstraintArgs) ToNetworkConstraintOutput() NetworkConstraintOutput {
	return i.ToNetworkConstraintOutputWithContext(context.Background())
}

func (i NetworkConstraintArgs) ToNetworkConstraintOutputWithContext(ctx context.Context) NetworkConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConstraintOutput)
}

// NetworkConstraintArrayInput is an input type that accepts NetworkConstraintArray and NetworkConstraintArrayOutput values.
// You can construct a concrete instance of `NetworkConstraintArrayInput` via:
//
//          NetworkConstraintArray{ NetworkConstraintArgs{...} }
type NetworkConstraintArrayInput interface {
	pulumi.Input

	ToNetworkConstraintArrayOutput() NetworkConstraintArrayOutput
	ToNetworkConstraintArrayOutputWithContext(context.Context) NetworkConstraintArrayOutput
}

type NetworkConstraintArray []NetworkConstraintInput

func (NetworkConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConstraint)(nil)).Elem()
}

func (i NetworkConstraintArray) ToNetworkConstraintArrayOutput() NetworkConstraintArrayOutput {
	return i.ToNetworkConstraintArrayOutputWithContext(context.Background())
}

func (i NetworkConstraintArray) ToNetworkConstraintArrayOutputWithContext(ctx context.Context) NetworkConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConstraintArrayOutput)
}

type NetworkConstraintOutput struct{ *pulumi.OutputState }

func (NetworkConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConstraint)(nil)).Elem()
}

func (o NetworkConstraintOutput) ToNetworkConstraintOutput() NetworkConstraintOutput {
	return o
}

func (o NetworkConstraintOutput) ToNetworkConstraintOutputWithContext(ctx context.Context) NetworkConstraintOutput {
	return o
}

func (o NetworkConstraintOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConstraint) string { return v.Expression }).(pulumi.StringOutput)
}

func (o NetworkConstraintOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConstraint) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type NetworkConstraintArrayOutput struct{ *pulumi.OutputState }

func (NetworkConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConstraint)(nil)).Elem()
}

func (o NetworkConstraintArrayOutput) ToNetworkConstraintArrayOutput() NetworkConstraintArrayOutput {
	return o
}

func (o NetworkConstraintArrayOutput) ToNetworkConstraintArrayOutputWithContext(ctx context.Context) NetworkConstraintArrayOutput {
	return o
}

func (o NetworkConstraintArrayOutput) Index(i pulumi.IntInput) NetworkConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConstraint {
		return vs[0].([]NetworkConstraint)[vs[1].(int)]
	}).(NetworkConstraintOutput)
}

type NetworkLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// NetworkLinkInput is an input type that accepts NetworkLinkArgs and NetworkLinkOutput values.
// You can construct a concrete instance of `NetworkLinkInput` via:
//
//          NetworkLinkArgs{...}
type NetworkLinkInput interface {
	pulumi.Input

	ToNetworkLinkOutput() NetworkLinkOutput
	ToNetworkLinkOutputWithContext(context.Context) NetworkLinkOutput
}

type NetworkLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (NetworkLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLink)(nil)).Elem()
}

func (i NetworkLinkArgs) ToNetworkLinkOutput() NetworkLinkOutput {
	return i.ToNetworkLinkOutputWithContext(context.Background())
}

func (i NetworkLinkArgs) ToNetworkLinkOutputWithContext(ctx context.Context) NetworkLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkOutput)
}

// NetworkLinkArrayInput is an input type that accepts NetworkLinkArray and NetworkLinkArrayOutput values.
// You can construct a concrete instance of `NetworkLinkArrayInput` via:
//
//          NetworkLinkArray{ NetworkLinkArgs{...} }
type NetworkLinkArrayInput interface {
	pulumi.Input

	ToNetworkLinkArrayOutput() NetworkLinkArrayOutput
	ToNetworkLinkArrayOutputWithContext(context.Context) NetworkLinkArrayOutput
}

type NetworkLinkArray []NetworkLinkInput

func (NetworkLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkLink)(nil)).Elem()
}

func (i NetworkLinkArray) ToNetworkLinkArrayOutput() NetworkLinkArrayOutput {
	return i.ToNetworkLinkArrayOutputWithContext(context.Background())
}

func (i NetworkLinkArray) ToNetworkLinkArrayOutputWithContext(ctx context.Context) NetworkLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLinkArrayOutput)
}

type NetworkLinkOutput struct{ *pulumi.OutputState }

func (NetworkLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLink)(nil)).Elem()
}

func (o NetworkLinkOutput) ToNetworkLinkOutput() NetworkLinkOutput {
	return o
}

func (o NetworkLinkOutput) ToNetworkLinkOutputWithContext(ctx context.Context) NetworkLinkOutput {
	return o
}

func (o NetworkLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o NetworkLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o NetworkLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkLink) string { return v.Rel }).(pulumi.StringOutput)
}

type NetworkLinkArrayOutput struct{ *pulumi.OutputState }

func (NetworkLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkLink)(nil)).Elem()
}

func (o NetworkLinkArrayOutput) ToNetworkLinkArrayOutput() NetworkLinkArrayOutput {
	return o
}

func (o NetworkLinkArrayOutput) ToNetworkLinkArrayOutputWithContext(ctx context.Context) NetworkLinkArrayOutput {
	return o
}

func (o NetworkLinkArrayOutput) Index(i pulumi.IntInput) NetworkLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkLink {
		return vs[0].([]NetworkLink)[vs[1].(int)]
	}).(NetworkLinkOutput)
}

type NetworkTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// NetworkTagInput is an input type that accepts NetworkTagArgs and NetworkTagOutput values.
// You can construct a concrete instance of `NetworkTagInput` via:
//
//          NetworkTagArgs{...}
type NetworkTagInput interface {
	pulumi.Input

	ToNetworkTagOutput() NetworkTagOutput
	ToNetworkTagOutputWithContext(context.Context) NetworkTagOutput
}

type NetworkTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NetworkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTag)(nil)).Elem()
}

func (i NetworkTagArgs) ToNetworkTagOutput() NetworkTagOutput {
	return i.ToNetworkTagOutputWithContext(context.Background())
}

func (i NetworkTagArgs) ToNetworkTagOutputWithContext(ctx context.Context) NetworkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTagOutput)
}

// NetworkTagArrayInput is an input type that accepts NetworkTagArray and NetworkTagArrayOutput values.
// You can construct a concrete instance of `NetworkTagArrayInput` via:
//
//          NetworkTagArray{ NetworkTagArgs{...} }
type NetworkTagArrayInput interface {
	pulumi.Input

	ToNetworkTagArrayOutput() NetworkTagArrayOutput
	ToNetworkTagArrayOutputWithContext(context.Context) NetworkTagArrayOutput
}

type NetworkTagArray []NetworkTagInput

func (NetworkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTag)(nil)).Elem()
}

func (i NetworkTagArray) ToNetworkTagArrayOutput() NetworkTagArrayOutput {
	return i.ToNetworkTagArrayOutputWithContext(context.Background())
}

func (i NetworkTagArray) ToNetworkTagArrayOutputWithContext(ctx context.Context) NetworkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTagArrayOutput)
}

type NetworkTagOutput struct{ *pulumi.OutputState }

func (NetworkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTag)(nil)).Elem()
}

func (o NetworkTagOutput) ToNetworkTagOutput() NetworkTagOutput {
	return o
}

func (o NetworkTagOutput) ToNetworkTagOutputWithContext(ctx context.Context) NetworkTagOutput {
	return o
}

func (o NetworkTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o NetworkTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkTag) string { return v.Value }).(pulumi.StringOutput)
}

type NetworkTagArrayOutput struct{ *pulumi.OutputState }

func (NetworkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkTag)(nil)).Elem()
}

func (o NetworkTagArrayOutput) ToNetworkTagArrayOutput() NetworkTagArrayOutput {
	return o
}

func (o NetworkTagArrayOutput) ToNetworkTagArrayOutputWithContext(ctx context.Context) NetworkTagArrayOutput {
	return o
}

func (o NetworkTagArrayOutput) Index(i pulumi.IntInput) NetworkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkTag {
		return vs[0].([]NetworkTag)[vs[1].(int)]
	}).(NetworkTagOutput)
}

type ProfileLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// ProfileLinkInput is an input type that accepts ProfileLinkArgs and ProfileLinkOutput values.
// You can construct a concrete instance of `ProfileLinkInput` via:
//
//          ProfileLinkArgs{...}
type ProfileLinkInput interface {
	pulumi.Input

	ToProfileLinkOutput() ProfileLinkOutput
	ToProfileLinkOutputWithContext(context.Context) ProfileLinkOutput
}

type ProfileLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (ProfileLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileLink)(nil)).Elem()
}

func (i ProfileLinkArgs) ToProfileLinkOutput() ProfileLinkOutput {
	return i.ToProfileLinkOutputWithContext(context.Background())
}

func (i ProfileLinkArgs) ToProfileLinkOutputWithContext(ctx context.Context) ProfileLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileLinkOutput)
}

// ProfileLinkArrayInput is an input type that accepts ProfileLinkArray and ProfileLinkArrayOutput values.
// You can construct a concrete instance of `ProfileLinkArrayInput` via:
//
//          ProfileLinkArray{ ProfileLinkArgs{...} }
type ProfileLinkArrayInput interface {
	pulumi.Input

	ToProfileLinkArrayOutput() ProfileLinkArrayOutput
	ToProfileLinkArrayOutputWithContext(context.Context) ProfileLinkArrayOutput
}

type ProfileLinkArray []ProfileLinkInput

func (ProfileLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileLink)(nil)).Elem()
}

func (i ProfileLinkArray) ToProfileLinkArrayOutput() ProfileLinkArrayOutput {
	return i.ToProfileLinkArrayOutputWithContext(context.Background())
}

func (i ProfileLinkArray) ToProfileLinkArrayOutputWithContext(ctx context.Context) ProfileLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileLinkArrayOutput)
}

type ProfileLinkOutput struct{ *pulumi.OutputState }

func (ProfileLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileLink)(nil)).Elem()
}

func (o ProfileLinkOutput) ToProfileLinkOutput() ProfileLinkOutput {
	return o
}

func (o ProfileLinkOutput) ToProfileLinkOutputWithContext(ctx context.Context) ProfileLinkOutput {
	return o
}

func (o ProfileLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o ProfileLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProfileLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o ProfileLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileLink) string { return v.Rel }).(pulumi.StringOutput)
}

type ProfileLinkArrayOutput struct{ *pulumi.OutputState }

func (ProfileLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileLink)(nil)).Elem()
}

func (o ProfileLinkArrayOutput) ToProfileLinkArrayOutput() ProfileLinkArrayOutput {
	return o
}

func (o ProfileLinkArrayOutput) ToProfileLinkArrayOutputWithContext(ctx context.Context) ProfileLinkArrayOutput {
	return o
}

func (o ProfileLinkArrayOutput) Index(i pulumi.IntInput) ProfileLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileLink {
		return vs[0].([]ProfileLink)[vs[1].(int)]
	}).(ProfileLinkOutput)
}

type ProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// ProfileTagInput is an input type that accepts ProfileTagArgs and ProfileTagOutput values.
// You can construct a concrete instance of `ProfileTagInput` via:
//
//          ProfileTagArgs{...}
type ProfileTagInput interface {
	pulumi.Input

	ToProfileTagOutput() ProfileTagOutput
	ToProfileTagOutputWithContext(context.Context) ProfileTagOutput
}

type ProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (i ProfileTagArgs) ToProfileTagOutput() ProfileTagOutput {
	return i.ToProfileTagOutputWithContext(context.Background())
}

func (i ProfileTagArgs) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagOutput)
}

// ProfileTagArrayInput is an input type that accepts ProfileTagArray and ProfileTagArrayOutput values.
// You can construct a concrete instance of `ProfileTagArrayInput` via:
//
//          ProfileTagArray{ ProfileTagArgs{...} }
type ProfileTagArrayInput interface {
	pulumi.Input

	ToProfileTagArrayOutput() ProfileTagArrayOutput
	ToProfileTagArrayOutputWithContext(context.Context) ProfileTagArrayOutput
}

type ProfileTagArray []ProfileTagInput

func (ProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (i ProfileTagArray) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return i.ToProfileTagArrayOutputWithContext(context.Background())
}

func (i ProfileTagArray) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTagArrayOutput)
}

type ProfileTagOutput struct{ *pulumi.OutputState }

func (ProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileTag)(nil)).Elem()
}

func (o ProfileTagOutput) ToProfileTagOutput() ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) ToProfileTagOutputWithContext(ctx context.Context) ProfileTagOutput {
	return o
}

func (o ProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type ProfileTagArrayOutput struct{ *pulumi.OutputState }

func (ProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileTag)(nil)).Elem()
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutput() ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) ToProfileTagArrayOutputWithContext(ctx context.Context) ProfileTagArrayOutput {
	return o
}

func (o ProfileTagArrayOutput) Index(i pulumi.IntInput) ProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileTag {
		return vs[0].([]ProfileTag)[vs[1].(int)]
	}).(ProfileTagOutput)
}

type GetDomainLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetDomainLinkInput is an input type that accepts GetDomainLinkArgs and GetDomainLinkOutput values.
// You can construct a concrete instance of `GetDomainLinkInput` via:
//
//          GetDomainLinkArgs{...}
type GetDomainLinkInput interface {
	pulumi.Input

	ToGetDomainLinkOutput() GetDomainLinkOutput
	ToGetDomainLinkOutputWithContext(context.Context) GetDomainLinkOutput
}

type GetDomainLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetDomainLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLink)(nil)).Elem()
}

func (i GetDomainLinkArgs) ToGetDomainLinkOutput() GetDomainLinkOutput {
	return i.ToGetDomainLinkOutputWithContext(context.Background())
}

func (i GetDomainLinkArgs) ToGetDomainLinkOutputWithContext(ctx context.Context) GetDomainLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainLinkOutput)
}

// GetDomainLinkArrayInput is an input type that accepts GetDomainLinkArray and GetDomainLinkArrayOutput values.
// You can construct a concrete instance of `GetDomainLinkArrayInput` via:
//
//          GetDomainLinkArray{ GetDomainLinkArgs{...} }
type GetDomainLinkArrayInput interface {
	pulumi.Input

	ToGetDomainLinkArrayOutput() GetDomainLinkArrayOutput
	ToGetDomainLinkArrayOutputWithContext(context.Context) GetDomainLinkArrayOutput
}

type GetDomainLinkArray []GetDomainLinkInput

func (GetDomainLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainLink)(nil)).Elem()
}

func (i GetDomainLinkArray) ToGetDomainLinkArrayOutput() GetDomainLinkArrayOutput {
	return i.ToGetDomainLinkArrayOutputWithContext(context.Background())
}

func (i GetDomainLinkArray) ToGetDomainLinkArrayOutputWithContext(ctx context.Context) GetDomainLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainLinkArrayOutput)
}

type GetDomainLinkOutput struct{ *pulumi.OutputState }

func (GetDomainLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainLink)(nil)).Elem()
}

func (o GetDomainLinkOutput) ToGetDomainLinkOutput() GetDomainLinkOutput {
	return o
}

func (o GetDomainLinkOutput) ToGetDomainLinkOutputWithContext(ctx context.Context) GetDomainLinkOutput {
	return o
}

func (o GetDomainLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetDomainLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetDomainLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetDomainLinkArrayOutput struct{ *pulumi.OutputState }

func (GetDomainLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainLink)(nil)).Elem()
}

func (o GetDomainLinkArrayOutput) ToGetDomainLinkArrayOutput() GetDomainLinkArrayOutput {
	return o
}

func (o GetDomainLinkArrayOutput) ToGetDomainLinkArrayOutputWithContext(ctx context.Context) GetDomainLinkArrayOutput {
	return o
}

func (o GetDomainLinkArrayOutput) Index(i pulumi.IntInput) GetDomainLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainLink {
		return vs[0].([]GetDomainLink)[vs[1].(int)]
	}).(GetDomainLinkOutput)
}

type GetDomainTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetDomainTagInput is an input type that accepts GetDomainTagArgs and GetDomainTagOutput values.
// You can construct a concrete instance of `GetDomainTagInput` via:
//
//          GetDomainTagArgs{...}
type GetDomainTagInput interface {
	pulumi.Input

	ToGetDomainTagOutput() GetDomainTagOutput
	ToGetDomainTagOutputWithContext(context.Context) GetDomainTagOutput
}

type GetDomainTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDomainTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainTag)(nil)).Elem()
}

func (i GetDomainTagArgs) ToGetDomainTagOutput() GetDomainTagOutput {
	return i.ToGetDomainTagOutputWithContext(context.Background())
}

func (i GetDomainTagArgs) ToGetDomainTagOutputWithContext(ctx context.Context) GetDomainTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainTagOutput)
}

// GetDomainTagArrayInput is an input type that accepts GetDomainTagArray and GetDomainTagArrayOutput values.
// You can construct a concrete instance of `GetDomainTagArrayInput` via:
//
//          GetDomainTagArray{ GetDomainTagArgs{...} }
type GetDomainTagArrayInput interface {
	pulumi.Input

	ToGetDomainTagArrayOutput() GetDomainTagArrayOutput
	ToGetDomainTagArrayOutputWithContext(context.Context) GetDomainTagArrayOutput
}

type GetDomainTagArray []GetDomainTagInput

func (GetDomainTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainTag)(nil)).Elem()
}

func (i GetDomainTagArray) ToGetDomainTagArrayOutput() GetDomainTagArrayOutput {
	return i.ToGetDomainTagArrayOutputWithContext(context.Background())
}

func (i GetDomainTagArray) ToGetDomainTagArrayOutputWithContext(ctx context.Context) GetDomainTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainTagArrayOutput)
}

type GetDomainTagOutput struct{ *pulumi.OutputState }

func (GetDomainTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainTag)(nil)).Elem()
}

func (o GetDomainTagOutput) ToGetDomainTagOutput() GetDomainTagOutput {
	return o
}

func (o GetDomainTagOutput) ToGetDomainTagOutputWithContext(ctx context.Context) GetDomainTagOutput {
	return o
}

func (o GetDomainTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetDomainTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetDomainTagArrayOutput struct{ *pulumi.OutputState }

func (GetDomainTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainTag)(nil)).Elem()
}

func (o GetDomainTagArrayOutput) ToGetDomainTagArrayOutput() GetDomainTagArrayOutput {
	return o
}

func (o GetDomainTagArrayOutput) ToGetDomainTagArrayOutputWithContext(ctx context.Context) GetDomainTagArrayOutput {
	return o
}

func (o GetDomainTagArrayOutput) Index(i pulumi.IntInput) GetDomainTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainTag {
		return vs[0].([]GetDomainTag)[vs[1].(int)]
	}).(GetDomainTagOutput)
}

type GetNetworkConstraint struct {
	Expression string `pulumi:"expression"`
	Mandatory  bool   `pulumi:"mandatory"`
}

// GetNetworkConstraintInput is an input type that accepts GetNetworkConstraintArgs and GetNetworkConstraintOutput values.
// You can construct a concrete instance of `GetNetworkConstraintInput` via:
//
//          GetNetworkConstraintArgs{...}
type GetNetworkConstraintInput interface {
	pulumi.Input

	ToGetNetworkConstraintOutput() GetNetworkConstraintOutput
	ToGetNetworkConstraintOutputWithContext(context.Context) GetNetworkConstraintOutput
}

type GetNetworkConstraintArgs struct {
	Expression pulumi.StringInput `pulumi:"expression"`
	Mandatory  pulumi.BoolInput   `pulumi:"mandatory"`
}

func (GetNetworkConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkConstraint)(nil)).Elem()
}

func (i GetNetworkConstraintArgs) ToGetNetworkConstraintOutput() GetNetworkConstraintOutput {
	return i.ToGetNetworkConstraintOutputWithContext(context.Background())
}

func (i GetNetworkConstraintArgs) ToGetNetworkConstraintOutputWithContext(ctx context.Context) GetNetworkConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkConstraintOutput)
}

// GetNetworkConstraintArrayInput is an input type that accepts GetNetworkConstraintArray and GetNetworkConstraintArrayOutput values.
// You can construct a concrete instance of `GetNetworkConstraintArrayInput` via:
//
//          GetNetworkConstraintArray{ GetNetworkConstraintArgs{...} }
type GetNetworkConstraintArrayInput interface {
	pulumi.Input

	ToGetNetworkConstraintArrayOutput() GetNetworkConstraintArrayOutput
	ToGetNetworkConstraintArrayOutputWithContext(context.Context) GetNetworkConstraintArrayOutput
}

type GetNetworkConstraintArray []GetNetworkConstraintInput

func (GetNetworkConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkConstraint)(nil)).Elem()
}

func (i GetNetworkConstraintArray) ToGetNetworkConstraintArrayOutput() GetNetworkConstraintArrayOutput {
	return i.ToGetNetworkConstraintArrayOutputWithContext(context.Background())
}

func (i GetNetworkConstraintArray) ToGetNetworkConstraintArrayOutputWithContext(ctx context.Context) GetNetworkConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkConstraintArrayOutput)
}

type GetNetworkConstraintOutput struct{ *pulumi.OutputState }

func (GetNetworkConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkConstraint)(nil)).Elem()
}

func (o GetNetworkConstraintOutput) ToGetNetworkConstraintOutput() GetNetworkConstraintOutput {
	return o
}

func (o GetNetworkConstraintOutput) ToGetNetworkConstraintOutputWithContext(ctx context.Context) GetNetworkConstraintOutput {
	return o
}

func (o GetNetworkConstraintOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkConstraint) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetNetworkConstraintOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNetworkConstraint) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type GetNetworkConstraintArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkConstraint)(nil)).Elem()
}

func (o GetNetworkConstraintArrayOutput) ToGetNetworkConstraintArrayOutput() GetNetworkConstraintArrayOutput {
	return o
}

func (o GetNetworkConstraintArrayOutput) ToGetNetworkConstraintArrayOutputWithContext(ctx context.Context) GetNetworkConstraintArrayOutput {
	return o
}

func (o GetNetworkConstraintArrayOutput) Index(i pulumi.IntInput) GetNetworkConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkConstraint {
		return vs[0].([]GetNetworkConstraint)[vs[1].(int)]
	}).(GetNetworkConstraintOutput)
}

type GetNetworkLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetNetworkLinkInput is an input type that accepts GetNetworkLinkArgs and GetNetworkLinkOutput values.
// You can construct a concrete instance of `GetNetworkLinkInput` via:
//
//          GetNetworkLinkArgs{...}
type GetNetworkLinkInput interface {
	pulumi.Input

	ToGetNetworkLinkOutput() GetNetworkLinkOutput
	ToGetNetworkLinkOutputWithContext(context.Context) GetNetworkLinkOutput
}

type GetNetworkLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetNetworkLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLink)(nil)).Elem()
}

func (i GetNetworkLinkArgs) ToGetNetworkLinkOutput() GetNetworkLinkOutput {
	return i.ToGetNetworkLinkOutputWithContext(context.Background())
}

func (i GetNetworkLinkArgs) ToGetNetworkLinkOutputWithContext(ctx context.Context) GetNetworkLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkOutput)
}

// GetNetworkLinkArrayInput is an input type that accepts GetNetworkLinkArray and GetNetworkLinkArrayOutput values.
// You can construct a concrete instance of `GetNetworkLinkArrayInput` via:
//
//          GetNetworkLinkArray{ GetNetworkLinkArgs{...} }
type GetNetworkLinkArrayInput interface {
	pulumi.Input

	ToGetNetworkLinkArrayOutput() GetNetworkLinkArrayOutput
	ToGetNetworkLinkArrayOutputWithContext(context.Context) GetNetworkLinkArrayOutput
}

type GetNetworkLinkArray []GetNetworkLinkInput

func (GetNetworkLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLink)(nil)).Elem()
}

func (i GetNetworkLinkArray) ToGetNetworkLinkArrayOutput() GetNetworkLinkArrayOutput {
	return i.ToGetNetworkLinkArrayOutputWithContext(context.Background())
}

func (i GetNetworkLinkArray) ToGetNetworkLinkArrayOutputWithContext(ctx context.Context) GetNetworkLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkLinkArrayOutput)
}

type GetNetworkLinkOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkLink)(nil)).Elem()
}

func (o GetNetworkLinkOutput) ToGetNetworkLinkOutput() GetNetworkLinkOutput {
	return o
}

func (o GetNetworkLinkOutput) ToGetNetworkLinkOutputWithContext(ctx context.Context) GetNetworkLinkOutput {
	return o
}

func (o GetNetworkLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworkLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetNetworkLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetworkLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetNetworkLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetNetworkLinkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkLink)(nil)).Elem()
}

func (o GetNetworkLinkArrayOutput) ToGetNetworkLinkArrayOutput() GetNetworkLinkArrayOutput {
	return o
}

func (o GetNetworkLinkArrayOutput) ToGetNetworkLinkArrayOutputWithContext(ctx context.Context) GetNetworkLinkArrayOutput {
	return o
}

func (o GetNetworkLinkArrayOutput) Index(i pulumi.IntInput) GetNetworkLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkLink {
		return vs[0].([]GetNetworkLink)[vs[1].(int)]
	}).(GetNetworkLinkOutput)
}

type GetNetworkTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetNetworkTagInput is an input type that accepts GetNetworkTagArgs and GetNetworkTagOutput values.
// You can construct a concrete instance of `GetNetworkTagInput` via:
//
//          GetNetworkTagArgs{...}
type GetNetworkTagInput interface {
	pulumi.Input

	ToGetNetworkTagOutput() GetNetworkTagOutput
	ToGetNetworkTagOutputWithContext(context.Context) GetNetworkTagOutput
}

type GetNetworkTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNetworkTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkTag)(nil)).Elem()
}

func (i GetNetworkTagArgs) ToGetNetworkTagOutput() GetNetworkTagOutput {
	return i.ToGetNetworkTagOutputWithContext(context.Background())
}

func (i GetNetworkTagArgs) ToGetNetworkTagOutputWithContext(ctx context.Context) GetNetworkTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkTagOutput)
}

// GetNetworkTagArrayInput is an input type that accepts GetNetworkTagArray and GetNetworkTagArrayOutput values.
// You can construct a concrete instance of `GetNetworkTagArrayInput` via:
//
//          GetNetworkTagArray{ GetNetworkTagArgs{...} }
type GetNetworkTagArrayInput interface {
	pulumi.Input

	ToGetNetworkTagArrayOutput() GetNetworkTagArrayOutput
	ToGetNetworkTagArrayOutputWithContext(context.Context) GetNetworkTagArrayOutput
}

type GetNetworkTagArray []GetNetworkTagInput

func (GetNetworkTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkTag)(nil)).Elem()
}

func (i GetNetworkTagArray) ToGetNetworkTagArrayOutput() GetNetworkTagArrayOutput {
	return i.ToGetNetworkTagArrayOutputWithContext(context.Background())
}

func (i GetNetworkTagArray) ToGetNetworkTagArrayOutputWithContext(ctx context.Context) GetNetworkTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkTagArrayOutput)
}

type GetNetworkTagOutput struct{ *pulumi.OutputState }

func (GetNetworkTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkTag)(nil)).Elem()
}

func (o GetNetworkTagOutput) ToGetNetworkTagOutput() GetNetworkTagOutput {
	return o
}

func (o GetNetworkTagOutput) ToGetNetworkTagOutputWithContext(ctx context.Context) GetNetworkTagOutput {
	return o
}

func (o GetNetworkTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetNetworkTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNetworkTagArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkTag)(nil)).Elem()
}

func (o GetNetworkTagArrayOutput) ToGetNetworkTagArrayOutput() GetNetworkTagArrayOutput {
	return o
}

func (o GetNetworkTagArrayOutput) ToGetNetworkTagArrayOutputWithContext(ctx context.Context) GetNetworkTagArrayOutput {
	return o
}

func (o GetNetworkTagArrayOutput) Index(i pulumi.IntInput) GetNetworkTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkTag {
		return vs[0].([]GetNetworkTag)[vs[1].(int)]
	}).(GetNetworkTagOutput)
}

type GetProfileLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetProfileLinkInput is an input type that accepts GetProfileLinkArgs and GetProfileLinkOutput values.
// You can construct a concrete instance of `GetProfileLinkInput` via:
//
//          GetProfileLinkArgs{...}
type GetProfileLinkInput interface {
	pulumi.Input

	ToGetProfileLinkOutput() GetProfileLinkOutput
	ToGetProfileLinkOutputWithContext(context.Context) GetProfileLinkOutput
}

type GetProfileLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetProfileLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileLink)(nil)).Elem()
}

func (i GetProfileLinkArgs) ToGetProfileLinkOutput() GetProfileLinkOutput {
	return i.ToGetProfileLinkOutputWithContext(context.Background())
}

func (i GetProfileLinkArgs) ToGetProfileLinkOutputWithContext(ctx context.Context) GetProfileLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfileLinkOutput)
}

// GetProfileLinkArrayInput is an input type that accepts GetProfileLinkArray and GetProfileLinkArrayOutput values.
// You can construct a concrete instance of `GetProfileLinkArrayInput` via:
//
//          GetProfileLinkArray{ GetProfileLinkArgs{...} }
type GetProfileLinkArrayInput interface {
	pulumi.Input

	ToGetProfileLinkArrayOutput() GetProfileLinkArrayOutput
	ToGetProfileLinkArrayOutputWithContext(context.Context) GetProfileLinkArrayOutput
}

type GetProfileLinkArray []GetProfileLinkInput

func (GetProfileLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfileLink)(nil)).Elem()
}

func (i GetProfileLinkArray) ToGetProfileLinkArrayOutput() GetProfileLinkArrayOutput {
	return i.ToGetProfileLinkArrayOutputWithContext(context.Background())
}

func (i GetProfileLinkArray) ToGetProfileLinkArrayOutputWithContext(ctx context.Context) GetProfileLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfileLinkArrayOutput)
}

type GetProfileLinkOutput struct{ *pulumi.OutputState }

func (GetProfileLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileLink)(nil)).Elem()
}

func (o GetProfileLinkOutput) ToGetProfileLinkOutput() GetProfileLinkOutput {
	return o
}

func (o GetProfileLinkOutput) ToGetProfileLinkOutputWithContext(ctx context.Context) GetProfileLinkOutput {
	return o
}

func (o GetProfileLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProfileLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetProfileLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProfileLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetProfileLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetProfileLinkArrayOutput struct{ *pulumi.OutputState }

func (GetProfileLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfileLink)(nil)).Elem()
}

func (o GetProfileLinkArrayOutput) ToGetProfileLinkArrayOutput() GetProfileLinkArrayOutput {
	return o
}

func (o GetProfileLinkArrayOutput) ToGetProfileLinkArrayOutputWithContext(ctx context.Context) GetProfileLinkArrayOutput {
	return o
}

func (o GetProfileLinkArrayOutput) Index(i pulumi.IntInput) GetProfileLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProfileLink {
		return vs[0].([]GetProfileLink)[vs[1].(int)]
	}).(GetProfileLinkOutput)
}

type GetProfileTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetProfileTagInput is an input type that accepts GetProfileTagArgs and GetProfileTagOutput values.
// You can construct a concrete instance of `GetProfileTagInput` via:
//
//          GetProfileTagArgs{...}
type GetProfileTagInput interface {
	pulumi.Input

	ToGetProfileTagOutput() GetProfileTagOutput
	ToGetProfileTagOutputWithContext(context.Context) GetProfileTagOutput
}

type GetProfileTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetProfileTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileTag)(nil)).Elem()
}

func (i GetProfileTagArgs) ToGetProfileTagOutput() GetProfileTagOutput {
	return i.ToGetProfileTagOutputWithContext(context.Background())
}

func (i GetProfileTagArgs) ToGetProfileTagOutputWithContext(ctx context.Context) GetProfileTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfileTagOutput)
}

// GetProfileTagArrayInput is an input type that accepts GetProfileTagArray and GetProfileTagArrayOutput values.
// You can construct a concrete instance of `GetProfileTagArrayInput` via:
//
//          GetProfileTagArray{ GetProfileTagArgs{...} }
type GetProfileTagArrayInput interface {
	pulumi.Input

	ToGetProfileTagArrayOutput() GetProfileTagArrayOutput
	ToGetProfileTagArrayOutputWithContext(context.Context) GetProfileTagArrayOutput
}

type GetProfileTagArray []GetProfileTagInput

func (GetProfileTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfileTag)(nil)).Elem()
}

func (i GetProfileTagArray) ToGetProfileTagArrayOutput() GetProfileTagArrayOutput {
	return i.ToGetProfileTagArrayOutputWithContext(context.Background())
}

func (i GetProfileTagArray) ToGetProfileTagArrayOutputWithContext(ctx context.Context) GetProfileTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfileTagArrayOutput)
}

type GetProfileTagOutput struct{ *pulumi.OutputState }

func (GetProfileTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileTag)(nil)).Elem()
}

func (o GetProfileTagOutput) ToGetProfileTagOutput() GetProfileTagOutput {
	return o
}

func (o GetProfileTagOutput) ToGetProfileTagOutputWithContext(ctx context.Context) GetProfileTagOutput {
	return o
}

func (o GetProfileTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetProfileTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetProfileTagArrayOutput struct{ *pulumi.OutputState }

func (GetProfileTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProfileTag)(nil)).Elem()
}

func (o GetProfileTagArrayOutput) ToGetProfileTagArrayOutput() GetProfileTagArrayOutput {
	return o
}

func (o GetProfileTagArrayOutput) ToGetProfileTagArrayOutputWithContext(ctx context.Context) GetProfileTagArrayOutput {
	return o
}

func (o GetProfileTagArrayOutput) Index(i pulumi.IntInput) GetProfileTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProfileTag {
		return vs[0].([]GetProfileTag)[vs[1].(int)]
	}).(GetProfileTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeLinkInput)(nil)).Elem(), IpRangeLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeLinkArrayInput)(nil)).Elem(), IpRangeLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeTagInput)(nil)).Elem(), IpRangeTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeTagArrayInput)(nil)).Elem(), IpRangeTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConstraintInput)(nil)).Elem(), NetworkConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConstraintArrayInput)(nil)).Elem(), NetworkConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkInput)(nil)).Elem(), NetworkLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkLinkArrayInput)(nil)).Elem(), NetworkLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTagInput)(nil)).Elem(), NetworkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTagArrayInput)(nil)).Elem(), NetworkTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileLinkInput)(nil)).Elem(), ProfileLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileLinkArrayInput)(nil)).Elem(), ProfileLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagInput)(nil)).Elem(), ProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileTagArrayInput)(nil)).Elem(), ProfileTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainLinkInput)(nil)).Elem(), GetDomainLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainLinkArrayInput)(nil)).Elem(), GetDomainLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainTagInput)(nil)).Elem(), GetDomainTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDomainTagArrayInput)(nil)).Elem(), GetDomainTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkConstraintInput)(nil)).Elem(), GetNetworkConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkConstraintArrayInput)(nil)).Elem(), GetNetworkConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkInput)(nil)).Elem(), GetNetworkLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkLinkArrayInput)(nil)).Elem(), GetNetworkLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkTagInput)(nil)).Elem(), GetNetworkTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkTagArrayInput)(nil)).Elem(), GetNetworkTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfileLinkInput)(nil)).Elem(), GetProfileLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfileLinkArrayInput)(nil)).Elem(), GetProfileLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfileTagInput)(nil)).Elem(), GetProfileTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProfileTagArrayInput)(nil)).Elem(), GetProfileTagArray{})
	pulumi.RegisterOutputType(IpRangeLinkOutput{})
	pulumi.RegisterOutputType(IpRangeLinkArrayOutput{})
	pulumi.RegisterOutputType(IpRangeTagOutput{})
	pulumi.RegisterOutputType(IpRangeTagArrayOutput{})
	pulumi.RegisterOutputType(NetworkConstraintOutput{})
	pulumi.RegisterOutputType(NetworkConstraintArrayOutput{})
	pulumi.RegisterOutputType(NetworkLinkOutput{})
	pulumi.RegisterOutputType(NetworkLinkArrayOutput{})
	pulumi.RegisterOutputType(NetworkTagOutput{})
	pulumi.RegisterOutputType(NetworkTagArrayOutput{})
	pulumi.RegisterOutputType(ProfileLinkOutput{})
	pulumi.RegisterOutputType(ProfileLinkArrayOutput{})
	pulumi.RegisterOutputType(ProfileTagOutput{})
	pulumi.RegisterOutputType(ProfileTagArrayOutput{})
	pulumi.RegisterOutputType(GetDomainLinkOutput{})
	pulumi.RegisterOutputType(GetDomainLinkArrayOutput{})
	pulumi.RegisterOutputType(GetDomainTagOutput{})
	pulumi.RegisterOutputType(GetDomainTagArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkConstraintOutput{})
	pulumi.RegisterOutputType(GetNetworkConstraintArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkOutput{})
	pulumi.RegisterOutputType(GetNetworkLinkArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkTagOutput{})
	pulumi.RegisterOutputType(GetNetworkTagArrayOutput{})
	pulumi.RegisterOutputType(GetProfileLinkOutput{})
	pulumi.RegisterOutputType(GetProfileLinkArrayOutput{})
	pulumi.RegisterOutputType(GetProfileTagOutput{})
	pulumi.RegisterOutputType(GetProfileTagArrayOutput{})
}
