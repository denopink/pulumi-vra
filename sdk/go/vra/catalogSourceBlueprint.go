// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a VMware vRealize Automation catalog source resource of type cloud template, formerly known as a blueprint.
//
// ## Example Usage
// ### S
//
// The following example shows how to create a catalog source resource.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/schmidtw/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewCatalogSourceBlueprint(ctx, "this", &vra.CatalogSourceBlueprintArgs{
//				ProjectId: pulumi.Any(_var.Vra_project_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Attribute Reference
//
// * `createdAt` - Date when entity was created. Date and time format is ISO 8601 and UTC.
//
// * `createdBy` - User who created the entity.
//
// * `global` - Flag indicating that all items can be requested across all projects.
//
// * `id` - ID of catalog source.
//
// * `itemsFound` - Number of items found in the catalog source.
//
// * `itemsImported` - Number of items imported from the catalog source.
//
// * `lastImportCompletedAt` - Time at which the last import completed.
//
// * `lastImportErrors` - List of errors seen when the catalog source was last imported.
//
// * `lastImportStartedAt` - Time at which the last import started.
//
// * `lastUpdatedBy` - User who last updated the catalog source.
//
// * `typeId` - Type of catalog source. Example: `blueprint`, `CFT`, etc.
//
// ## Import
//
// # To import the cloud template catalog source, use the ID as in the following example
//
// ```sh
//
//	$ pulumi import vra:index/catalogSourceBlueprint:CatalogSourceBlueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type CatalogSourceBlueprint struct {
	pulumi.CustomResourceState

	// Custom configuration of the catalog source as a map of key values.
	Config    pulumi.StringMapOutput `pulumi:"config"`
	CreatedAt pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy pulumi.StringOutput    `pulumi:"createdBy"`
	// Human-friendly description.
	Description           pulumi.StringPtrOutput   `pulumi:"description"`
	Global                pulumi.BoolOutput        `pulumi:"global"`
	ItemsFound            pulumi.StringOutput      `pulumi:"itemsFound"`
	ItemsImported         pulumi.StringOutput      `pulumi:"itemsImported"`
	LastImportCompletedAt pulumi.StringOutput      `pulumi:"lastImportCompletedAt"`
	LastImportErrors      pulumi.StringArrayOutput `pulumi:"lastImportErrors"`
	LastImportStartedAt   pulumi.StringOutput      `pulumi:"lastImportStartedAt"`
	LastUpdatedBy         pulumi.StringOutput      `pulumi:"lastUpdatedBy"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	TypeId    pulumi.StringOutput `pulumi:"typeId"`
}

// NewCatalogSourceBlueprint registers a new resource with the given unique name, arguments, and options.
func NewCatalogSourceBlueprint(ctx *pulumi.Context,
	name string, args *CatalogSourceBlueprintArgs, opts ...pulumi.ResourceOption) (*CatalogSourceBlueprint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CatalogSourceBlueprint
	err := ctx.RegisterResource("vra:index/catalogSourceBlueprint:CatalogSourceBlueprint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalogSourceBlueprint gets an existing CatalogSourceBlueprint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalogSourceBlueprint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogSourceBlueprintState, opts ...pulumi.ResourceOption) (*CatalogSourceBlueprint, error) {
	var resource CatalogSourceBlueprint
	err := ctx.ReadResource("vra:index/catalogSourceBlueprint:CatalogSourceBlueprint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CatalogSourceBlueprint resources.
type catalogSourceBlueprintState struct {
	// Custom configuration of the catalog source as a map of key values.
	Config    map[string]string `pulumi:"config"`
	CreatedAt *string           `pulumi:"createdAt"`
	CreatedBy *string           `pulumi:"createdBy"`
	// Human-friendly description.
	Description           *string  `pulumi:"description"`
	Global                *bool    `pulumi:"global"`
	ItemsFound            *string  `pulumi:"itemsFound"`
	ItemsImported         *string  `pulumi:"itemsImported"`
	LastImportCompletedAt *string  `pulumi:"lastImportCompletedAt"`
	LastImportErrors      []string `pulumi:"lastImportErrors"`
	LastImportStartedAt   *string  `pulumi:"lastImportStartedAt"`
	LastUpdatedBy         *string  `pulumi:"lastUpdatedBy"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
	TypeId    *string `pulumi:"typeId"`
}

type CatalogSourceBlueprintState struct {
	// Custom configuration of the catalog source as a map of key values.
	Config    pulumi.StringMapInput
	CreatedAt pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// Human-friendly description.
	Description           pulumi.StringPtrInput
	Global                pulumi.BoolPtrInput
	ItemsFound            pulumi.StringPtrInput
	ItemsImported         pulumi.StringPtrInput
	LastImportCompletedAt pulumi.StringPtrInput
	LastImportErrors      pulumi.StringArrayInput
	LastImportStartedAt   pulumi.StringPtrInput
	LastUpdatedBy         pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
	TypeId    pulumi.StringPtrInput
}

func (CatalogSourceBlueprintState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogSourceBlueprintState)(nil)).Elem()
}

type catalogSourceBlueprintArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config map[string]string `pulumi:"config"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a CatalogSourceBlueprint resource.
type CatalogSourceBlueprintArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config pulumi.StringMapInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of the project this entity belongs to.
	ProjectId pulumi.StringInput
}

func (CatalogSourceBlueprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogSourceBlueprintArgs)(nil)).Elem()
}

type CatalogSourceBlueprintInput interface {
	pulumi.Input

	ToCatalogSourceBlueprintOutput() CatalogSourceBlueprintOutput
	ToCatalogSourceBlueprintOutputWithContext(ctx context.Context) CatalogSourceBlueprintOutput
}

func (*CatalogSourceBlueprint) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogSourceBlueprint)(nil)).Elem()
}

func (i *CatalogSourceBlueprint) ToCatalogSourceBlueprintOutput() CatalogSourceBlueprintOutput {
	return i.ToCatalogSourceBlueprintOutputWithContext(context.Background())
}

func (i *CatalogSourceBlueprint) ToCatalogSourceBlueprintOutputWithContext(ctx context.Context) CatalogSourceBlueprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceBlueprintOutput)
}

// CatalogSourceBlueprintArrayInput is an input type that accepts CatalogSourceBlueprintArray and CatalogSourceBlueprintArrayOutput values.
// You can construct a concrete instance of `CatalogSourceBlueprintArrayInput` via:
//
//	CatalogSourceBlueprintArray{ CatalogSourceBlueprintArgs{...} }
type CatalogSourceBlueprintArrayInput interface {
	pulumi.Input

	ToCatalogSourceBlueprintArrayOutput() CatalogSourceBlueprintArrayOutput
	ToCatalogSourceBlueprintArrayOutputWithContext(context.Context) CatalogSourceBlueprintArrayOutput
}

type CatalogSourceBlueprintArray []CatalogSourceBlueprintInput

func (CatalogSourceBlueprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogSourceBlueprint)(nil)).Elem()
}

func (i CatalogSourceBlueprintArray) ToCatalogSourceBlueprintArrayOutput() CatalogSourceBlueprintArrayOutput {
	return i.ToCatalogSourceBlueprintArrayOutputWithContext(context.Background())
}

func (i CatalogSourceBlueprintArray) ToCatalogSourceBlueprintArrayOutputWithContext(ctx context.Context) CatalogSourceBlueprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceBlueprintArrayOutput)
}

// CatalogSourceBlueprintMapInput is an input type that accepts CatalogSourceBlueprintMap and CatalogSourceBlueprintMapOutput values.
// You can construct a concrete instance of `CatalogSourceBlueprintMapInput` via:
//
//	CatalogSourceBlueprintMap{ "key": CatalogSourceBlueprintArgs{...} }
type CatalogSourceBlueprintMapInput interface {
	pulumi.Input

	ToCatalogSourceBlueprintMapOutput() CatalogSourceBlueprintMapOutput
	ToCatalogSourceBlueprintMapOutputWithContext(context.Context) CatalogSourceBlueprintMapOutput
}

type CatalogSourceBlueprintMap map[string]CatalogSourceBlueprintInput

func (CatalogSourceBlueprintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogSourceBlueprint)(nil)).Elem()
}

func (i CatalogSourceBlueprintMap) ToCatalogSourceBlueprintMapOutput() CatalogSourceBlueprintMapOutput {
	return i.ToCatalogSourceBlueprintMapOutputWithContext(context.Background())
}

func (i CatalogSourceBlueprintMap) ToCatalogSourceBlueprintMapOutputWithContext(ctx context.Context) CatalogSourceBlueprintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogSourceBlueprintMapOutput)
}

type CatalogSourceBlueprintOutput struct{ *pulumi.OutputState }

func (CatalogSourceBlueprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogSourceBlueprint)(nil)).Elem()
}

func (o CatalogSourceBlueprintOutput) ToCatalogSourceBlueprintOutput() CatalogSourceBlueprintOutput {
	return o
}

func (o CatalogSourceBlueprintOutput) ToCatalogSourceBlueprintOutputWithContext(ctx context.Context) CatalogSourceBlueprintOutput {
	return o
}

// Custom configuration of the catalog source as a map of key values.
func (o CatalogSourceBlueprintOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

func (o CatalogSourceBlueprintOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o CatalogSourceBlueprintOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CatalogSourceBlueprintOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.BoolOutput { return v.Global }).(pulumi.BoolOutput)
}

func (o CatalogSourceBlueprintOutput) ItemsFound() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.ItemsFound }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) ItemsImported() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.ItemsImported }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) LastImportCompletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.LastImportCompletedAt }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) LastImportErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringArrayOutput { return v.LastImportErrors }).(pulumi.StringArrayOutput)
}

func (o CatalogSourceBlueprintOutput) LastImportStartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.LastImportStartedAt }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o CatalogSourceBlueprintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the project this entity belongs to.
func (o CatalogSourceBlueprintOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o CatalogSourceBlueprintOutput) TypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *CatalogSourceBlueprint) pulumi.StringOutput { return v.TypeId }).(pulumi.StringOutput)
}

type CatalogSourceBlueprintArrayOutput struct{ *pulumi.OutputState }

func (CatalogSourceBlueprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CatalogSourceBlueprint)(nil)).Elem()
}

func (o CatalogSourceBlueprintArrayOutput) ToCatalogSourceBlueprintArrayOutput() CatalogSourceBlueprintArrayOutput {
	return o
}

func (o CatalogSourceBlueprintArrayOutput) ToCatalogSourceBlueprintArrayOutputWithContext(ctx context.Context) CatalogSourceBlueprintArrayOutput {
	return o
}

func (o CatalogSourceBlueprintArrayOutput) Index(i pulumi.IntInput) CatalogSourceBlueprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CatalogSourceBlueprint {
		return vs[0].([]*CatalogSourceBlueprint)[vs[1].(int)]
	}).(CatalogSourceBlueprintOutput)
}

type CatalogSourceBlueprintMapOutput struct{ *pulumi.OutputState }

func (CatalogSourceBlueprintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CatalogSourceBlueprint)(nil)).Elem()
}

func (o CatalogSourceBlueprintMapOutput) ToCatalogSourceBlueprintMapOutput() CatalogSourceBlueprintMapOutput {
	return o
}

func (o CatalogSourceBlueprintMapOutput) ToCatalogSourceBlueprintMapOutputWithContext(ctx context.Context) CatalogSourceBlueprintMapOutput {
	return o
}

func (o CatalogSourceBlueprintMapOutput) MapIndex(k pulumi.StringInput) CatalogSourceBlueprintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CatalogSourceBlueprint {
		return vs[0].(map[string]*CatalogSourceBlueprint)[vs[1].(string)]
	}).(CatalogSourceBlueprintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceBlueprintInput)(nil)).Elem(), &CatalogSourceBlueprint{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceBlueprintArrayInput)(nil)).Elem(), CatalogSourceBlueprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CatalogSourceBlueprintMapInput)(nil)).Elem(), CatalogSourceBlueprintMap{})
	pulumi.RegisterOutputType(CatalogSourceBlueprintOutput{})
	pulumi.RegisterOutputType(CatalogSourceBlueprintArrayOutput{})
	pulumi.RegisterOutputType(CatalogSourceBlueprintMapOutput{})
}
