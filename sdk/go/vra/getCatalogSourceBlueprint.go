// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides information about a catalog source of type cloud template (blueprint) in vRA.
//
// ## Example Usage
// ### S
//
// This is an example of how to get a vRA cloud template catalog source by its name.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.LookupCatalogSourceBlueprint(ctx, &GetCatalogSourceBlueprintArgs{
//				Name: pulumi.StringRef(_var.Catalog_source_name),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This is an example of how to get a vRA cloud template catalog source by its id.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.LookupCatalogSourceBlueprint(ctx, &GetCatalogSourceBlueprintArgs{
//				Id: pulumi.StringRef(_var.Catalog_source_id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.LookupCatalogSourceBlueprint(ctx, &GetCatalogSourceBlueprintArgs{
//				ProjectId: pulumi.StringRef(_var.Project_id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCatalogSourceBlueprint(ctx *pulumi.Context, args *LookupCatalogSourceBlueprintArgs, opts ...pulumi.InvokeOption) (*LookupCatalogSourceBlueprintResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupCatalogSourceBlueprintResult
	err := ctx.Invoke("vra:index/getCatalogSourceBlueprint:getCatalogSourceBlueprint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalogSourceBlueprint.
type LookupCatalogSourceBlueprintArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config map[string]string `pulumi:"config"`
	// Catalog source description.
	Description *string `pulumi:"description"`
	// The id of catalog source. One of `id`, `name` or `projectId`  must be provided.
	Id *string `pulumi:"id"`
	// Name of the catalog source. One of `id`, `name` or `projectId` must be provided.
	Name *string `pulumi:"name"`
	// The id of the project.  One of `id`, `name` or `projectId` must be provided.
	ProjectId *string `pulumi:"projectId"`
}

// A collection of values returned by getCatalogSourceBlueprint.
type LookupCatalogSourceBlueprintResult struct {
	// Custom configuration of the catalog source as a map of key values.
	Config map[string]string `pulumi:"config"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt string `pulumi:"createdAt"`
	// The user the entity was created by.
	CreatedBy string `pulumi:"createdBy"`
	// Catalog source description.
	Description *string `pulumi:"description"`
	// A flag indicating that all the items can be requested across all projects.
	Global bool    `pulumi:"global"`
	Id     *string `pulumi:"id"`
	// Number of items found in the catalog source.
	ItemsFound string `pulumi:"itemsFound"`
	// Number of items imported from the catalog source.
	ItemsImported string `pulumi:"itemsImported"`
	// Time at which the last import was completed at.
	LastImportCompletedAt string `pulumi:"lastImportCompletedAt"`
	// A list of errors seen at last time the catalog source is imported.
	LastImportErrors []string `pulumi:"lastImportErrors"`
	// Time at which the last import was started at.
	LastImportStartedAt string `pulumi:"lastImportStartedAt"`
	// The user that last updated the catalog source.
	LastUpdatedBy string `pulumi:"lastUpdatedBy"`
	Name          string `pulumi:"name"`
	ProjectId     string `pulumi:"projectId"`
	// Type of catalog source. Example: `blueprint`, `CFT`, etc.
	TypeId string `pulumi:"typeId"`
}

func LookupCatalogSourceBlueprintOutput(ctx *pulumi.Context, args LookupCatalogSourceBlueprintOutputArgs, opts ...pulumi.InvokeOption) LookupCatalogSourceBlueprintResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCatalogSourceBlueprintResult, error) {
			args := v.(LookupCatalogSourceBlueprintArgs)
			r, err := LookupCatalogSourceBlueprint(ctx, &args, opts...)
			var s LookupCatalogSourceBlueprintResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCatalogSourceBlueprintResultOutput)
}

// A collection of arguments for invoking getCatalogSourceBlueprint.
type LookupCatalogSourceBlueprintOutputArgs struct {
	// Custom configuration of the catalog source as a map of key values.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Catalog source description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The id of catalog source. One of `id`, `name` or `projectId`  must be provided.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the catalog source. One of `id`, `name` or `projectId` must be provided.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The id of the project.  One of `id`, `name` or `projectId` must be provided.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (LookupCatalogSourceBlueprintOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogSourceBlueprintArgs)(nil)).Elem()
}

// A collection of values returned by getCatalogSourceBlueprint.
type LookupCatalogSourceBlueprintResultOutput struct{ *pulumi.OutputState }

func (LookupCatalogSourceBlueprintResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogSourceBlueprintResult)(nil)).Elem()
}

func (o LookupCatalogSourceBlueprintResultOutput) ToLookupCatalogSourceBlueprintResultOutput() LookupCatalogSourceBlueprintResultOutput {
	return o
}

func (o LookupCatalogSourceBlueprintResultOutput) ToLookupCatalogSourceBlueprintResultOutputWithContext(ctx context.Context) LookupCatalogSourceBlueprintResultOutput {
	return o
}

// Custom configuration of the catalog source as a map of key values.
func (o LookupCatalogSourceBlueprintResultOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o LookupCatalogSourceBlueprintResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The user the entity was created by.
func (o LookupCatalogSourceBlueprintResultOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Catalog source description.
func (o LookupCatalogSourceBlueprintResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A flag indicating that all the items can be requested across all projects.
func (o LookupCatalogSourceBlueprintResultOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) bool { return v.Global }).(pulumi.BoolOutput)
}

func (o LookupCatalogSourceBlueprintResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Number of items found in the catalog source.
func (o LookupCatalogSourceBlueprintResultOutput) ItemsFound() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.ItemsFound }).(pulumi.StringOutput)
}

// Number of items imported from the catalog source.
func (o LookupCatalogSourceBlueprintResultOutput) ItemsImported() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.ItemsImported }).(pulumi.StringOutput)
}

// Time at which the last import was completed at.
func (o LookupCatalogSourceBlueprintResultOutput) LastImportCompletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.LastImportCompletedAt }).(pulumi.StringOutput)
}

// A list of errors seen at last time the catalog source is imported.
func (o LookupCatalogSourceBlueprintResultOutput) LastImportErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) []string { return v.LastImportErrors }).(pulumi.StringArrayOutput)
}

// Time at which the last import was started at.
func (o LookupCatalogSourceBlueprintResultOutput) LastImportStartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.LastImportStartedAt }).(pulumi.StringOutput)
}

// The user that last updated the catalog source.
func (o LookupCatalogSourceBlueprintResultOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

func (o LookupCatalogSourceBlueprintResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCatalogSourceBlueprintResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Type of catalog source. Example: `blueprint`, `CFT`, etc.
func (o LookupCatalogSourceBlueprintResultOutput) TypeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogSourceBlueprintResult) string { return v.TypeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCatalogSourceBlueprintResultOutput{})
}
