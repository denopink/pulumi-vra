// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MachineBootConfig struct {
	// Calid cloud config data in json-escaped yaml syntax.
	Content *string `pulumi:"content"`
}

// MachineBootConfigInput is an input type that accepts MachineBootConfigArgs and MachineBootConfigOutput values.
// You can construct a concrete instance of `MachineBootConfigInput` via:
//
//          MachineBootConfigArgs{...}
type MachineBootConfigInput interface {
	pulumi.Input

	ToMachineBootConfigOutput() MachineBootConfigOutput
	ToMachineBootConfigOutputWithContext(context.Context) MachineBootConfigOutput
}

type MachineBootConfigArgs struct {
	// Calid cloud config data in json-escaped yaml syntax.
	Content pulumi.StringPtrInput `pulumi:"content"`
}

func (MachineBootConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineBootConfig)(nil)).Elem()
}

func (i MachineBootConfigArgs) ToMachineBootConfigOutput() MachineBootConfigOutput {
	return i.ToMachineBootConfigOutputWithContext(context.Background())
}

func (i MachineBootConfigArgs) ToMachineBootConfigOutputWithContext(ctx context.Context) MachineBootConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineBootConfigOutput)
}

func (i MachineBootConfigArgs) ToMachineBootConfigPtrOutput() MachineBootConfigPtrOutput {
	return i.ToMachineBootConfigPtrOutputWithContext(context.Background())
}

func (i MachineBootConfigArgs) ToMachineBootConfigPtrOutputWithContext(ctx context.Context) MachineBootConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineBootConfigOutput).ToMachineBootConfigPtrOutputWithContext(ctx)
}

// MachineBootConfigPtrInput is an input type that accepts MachineBootConfigArgs, MachineBootConfigPtr and MachineBootConfigPtrOutput values.
// You can construct a concrete instance of `MachineBootConfigPtrInput` via:
//
//          MachineBootConfigArgs{...}
//
//  or:
//
//          nil
type MachineBootConfigPtrInput interface {
	pulumi.Input

	ToMachineBootConfigPtrOutput() MachineBootConfigPtrOutput
	ToMachineBootConfigPtrOutputWithContext(context.Context) MachineBootConfigPtrOutput
}

type machineBootConfigPtrType MachineBootConfigArgs

func MachineBootConfigPtr(v *MachineBootConfigArgs) MachineBootConfigPtrInput {
	return (*machineBootConfigPtrType)(v)
}

func (*machineBootConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineBootConfig)(nil)).Elem()
}

func (i *machineBootConfigPtrType) ToMachineBootConfigPtrOutput() MachineBootConfigPtrOutput {
	return i.ToMachineBootConfigPtrOutputWithContext(context.Background())
}

func (i *machineBootConfigPtrType) ToMachineBootConfigPtrOutputWithContext(ctx context.Context) MachineBootConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineBootConfigPtrOutput)
}

type MachineBootConfigOutput struct{ *pulumi.OutputState }

func (MachineBootConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineBootConfig)(nil)).Elem()
}

func (o MachineBootConfigOutput) ToMachineBootConfigOutput() MachineBootConfigOutput {
	return o
}

func (o MachineBootConfigOutput) ToMachineBootConfigOutputWithContext(ctx context.Context) MachineBootConfigOutput {
	return o
}

func (o MachineBootConfigOutput) ToMachineBootConfigPtrOutput() MachineBootConfigPtrOutput {
	return o.ToMachineBootConfigPtrOutputWithContext(context.Background())
}

func (o MachineBootConfigOutput) ToMachineBootConfigPtrOutputWithContext(ctx context.Context) MachineBootConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineBootConfig) *MachineBootConfig {
		return &v
	}).(MachineBootConfigPtrOutput)
}

// Calid cloud config data in json-escaped yaml syntax.
func (o MachineBootConfigOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineBootConfig) *string { return v.Content }).(pulumi.StringPtrOutput)
}

type MachineBootConfigPtrOutput struct{ *pulumi.OutputState }

func (MachineBootConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineBootConfig)(nil)).Elem()
}

func (o MachineBootConfigPtrOutput) ToMachineBootConfigPtrOutput() MachineBootConfigPtrOutput {
	return o
}

func (o MachineBootConfigPtrOutput) ToMachineBootConfigPtrOutputWithContext(ctx context.Context) MachineBootConfigPtrOutput {
	return o
}

func (o MachineBootConfigPtrOutput) Elem() MachineBootConfigOutput {
	return o.ApplyT(func(v *MachineBootConfig) MachineBootConfig {
		if v != nil {
			return *v
		}
		var ret MachineBootConfig
		return ret
	}).(MachineBootConfigOutput)
}

// Calid cloud config data in json-escaped yaml syntax.
func (o MachineBootConfigPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineBootConfig) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

type MachineConstraint struct {
	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression string `pulumi:"expression"`
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory bool `pulumi:"mandatory"`
}

// MachineConstraintInput is an input type that accepts MachineConstraintArgs and MachineConstraintOutput values.
// You can construct a concrete instance of `MachineConstraintInput` via:
//
//          MachineConstraintArgs{...}
type MachineConstraintInput interface {
	pulumi.Input

	ToMachineConstraintOutput() MachineConstraintOutput
	ToMachineConstraintOutputWithContext(context.Context) MachineConstraintOutput
}

type MachineConstraintArgs struct {
	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory pulumi.BoolInput `pulumi:"mandatory"`
}

func (MachineConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConstraint)(nil)).Elem()
}

func (i MachineConstraintArgs) ToMachineConstraintOutput() MachineConstraintOutput {
	return i.ToMachineConstraintOutputWithContext(context.Background())
}

func (i MachineConstraintArgs) ToMachineConstraintOutputWithContext(ctx context.Context) MachineConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConstraintOutput)
}

// MachineConstraintArrayInput is an input type that accepts MachineConstraintArray and MachineConstraintArrayOutput values.
// You can construct a concrete instance of `MachineConstraintArrayInput` via:
//
//          MachineConstraintArray{ MachineConstraintArgs{...} }
type MachineConstraintArrayInput interface {
	pulumi.Input

	ToMachineConstraintArrayOutput() MachineConstraintArrayOutput
	ToMachineConstraintArrayOutputWithContext(context.Context) MachineConstraintArrayOutput
}

type MachineConstraintArray []MachineConstraintInput

func (MachineConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineConstraint)(nil)).Elem()
}

func (i MachineConstraintArray) ToMachineConstraintArrayOutput() MachineConstraintArrayOutput {
	return i.ToMachineConstraintArrayOutputWithContext(context.Background())
}

func (i MachineConstraintArray) ToMachineConstraintArrayOutputWithContext(ctx context.Context) MachineConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConstraintArrayOutput)
}

type MachineConstraintOutput struct{ *pulumi.OutputState }

func (MachineConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConstraint)(nil)).Elem()
}

func (o MachineConstraintOutput) ToMachineConstraintOutput() MachineConstraintOutput {
	return o
}

func (o MachineConstraintOutput) ToMachineConstraintOutputWithContext(ctx context.Context) MachineConstraintOutput {
	return o
}

// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
func (o MachineConstraintOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v MachineConstraint) string { return v.Expression }).(pulumi.StringOutput)
}

// Indicates whether this constraint should be strictly enforced or not.
func (o MachineConstraintOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v MachineConstraint) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type MachineConstraintArrayOutput struct{ *pulumi.OutputState }

func (MachineConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineConstraint)(nil)).Elem()
}

func (o MachineConstraintArrayOutput) ToMachineConstraintArrayOutput() MachineConstraintArrayOutput {
	return o
}

func (o MachineConstraintArrayOutput) ToMachineConstraintArrayOutputWithContext(ctx context.Context) MachineConstraintArrayOutput {
	return o
}

func (o MachineConstraintArrayOutput) Index(i pulumi.IntInput) MachineConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineConstraint {
		return vs[0].([]MachineConstraint)[vs[1].(int)]
	}).(MachineConstraintOutput)
}

type MachineDisk struct {
	// ID of the existing block device.
	BlockDeviceId string `pulumi:"blockDeviceId"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
}

// MachineDiskInput is an input type that accepts MachineDiskArgs and MachineDiskOutput values.
// You can construct a concrete instance of `MachineDiskInput` via:
//
//          MachineDiskArgs{...}
type MachineDiskInput interface {
	pulumi.Input

	ToMachineDiskOutput() MachineDiskOutput
	ToMachineDiskOutputWithContext(context.Context) MachineDiskOutput
}

type MachineDiskArgs struct {
	// ID of the existing block device.
	BlockDeviceId pulumi.StringInput `pulumi:"blockDeviceId"`
	// Human-friendly description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MachineDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDisk)(nil)).Elem()
}

func (i MachineDiskArgs) ToMachineDiskOutput() MachineDiskOutput {
	return i.ToMachineDiskOutputWithContext(context.Background())
}

func (i MachineDiskArgs) ToMachineDiskOutputWithContext(ctx context.Context) MachineDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDiskOutput)
}

// MachineDiskArrayInput is an input type that accepts MachineDiskArray and MachineDiskArrayOutput values.
// You can construct a concrete instance of `MachineDiskArrayInput` via:
//
//          MachineDiskArray{ MachineDiskArgs{...} }
type MachineDiskArrayInput interface {
	pulumi.Input

	ToMachineDiskArrayOutput() MachineDiskArrayOutput
	ToMachineDiskArrayOutputWithContext(context.Context) MachineDiskArrayOutput
}

type MachineDiskArray []MachineDiskInput

func (MachineDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDisk)(nil)).Elem()
}

func (i MachineDiskArray) ToMachineDiskArrayOutput() MachineDiskArrayOutput {
	return i.ToMachineDiskArrayOutputWithContext(context.Background())
}

func (i MachineDiskArray) ToMachineDiskArrayOutputWithContext(ctx context.Context) MachineDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDiskArrayOutput)
}

type MachineDiskOutput struct{ *pulumi.OutputState }

func (MachineDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDisk)(nil)).Elem()
}

func (o MachineDiskOutput) ToMachineDiskOutput() MachineDiskOutput {
	return o
}

func (o MachineDiskOutput) ToMachineDiskOutputWithContext(ctx context.Context) MachineDiskOutput {
	return o
}

// ID of the existing block device.
func (o MachineDiskOutput) BlockDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDisk) string { return v.BlockDeviceId }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o MachineDiskOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDisk) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o MachineDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MachineDiskArrayOutput struct{ *pulumi.OutputState }

func (MachineDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDisk)(nil)).Elem()
}

func (o MachineDiskArrayOutput) ToMachineDiskArrayOutput() MachineDiskArrayOutput {
	return o
}

func (o MachineDiskArrayOutput) ToMachineDiskArrayOutputWithContext(ctx context.Context) MachineDiskArrayOutput {
	return o
}

func (o MachineDiskArrayOutput) Index(i pulumi.IntInput) MachineDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineDisk {
		return vs[0].([]MachineDisk)[vs[1].(int)]
	}).(MachineDiskOutput)
}

type MachineDisksList struct {
	// ID of the existing block device.
	BlockDeviceId string `pulumi:"blockDeviceId"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
}

// MachineDisksListInput is an input type that accepts MachineDisksListArgs and MachineDisksListOutput values.
// You can construct a concrete instance of `MachineDisksListInput` via:
//
//          MachineDisksListArgs{...}
type MachineDisksListInput interface {
	pulumi.Input

	ToMachineDisksListOutput() MachineDisksListOutput
	ToMachineDisksListOutputWithContext(context.Context) MachineDisksListOutput
}

type MachineDisksListArgs struct {
	// ID of the existing block device.
	BlockDeviceId pulumi.StringInput `pulumi:"blockDeviceId"`
	// Human-friendly description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MachineDisksListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDisksList)(nil)).Elem()
}

func (i MachineDisksListArgs) ToMachineDisksListOutput() MachineDisksListOutput {
	return i.ToMachineDisksListOutputWithContext(context.Background())
}

func (i MachineDisksListArgs) ToMachineDisksListOutputWithContext(ctx context.Context) MachineDisksListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDisksListOutput)
}

// MachineDisksListArrayInput is an input type that accepts MachineDisksListArray and MachineDisksListArrayOutput values.
// You can construct a concrete instance of `MachineDisksListArrayInput` via:
//
//          MachineDisksListArray{ MachineDisksListArgs{...} }
type MachineDisksListArrayInput interface {
	pulumi.Input

	ToMachineDisksListArrayOutput() MachineDisksListArrayOutput
	ToMachineDisksListArrayOutputWithContext(context.Context) MachineDisksListArrayOutput
}

type MachineDisksListArray []MachineDisksListInput

func (MachineDisksListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDisksList)(nil)).Elem()
}

func (i MachineDisksListArray) ToMachineDisksListArrayOutput() MachineDisksListArrayOutput {
	return i.ToMachineDisksListArrayOutputWithContext(context.Background())
}

func (i MachineDisksListArray) ToMachineDisksListArrayOutputWithContext(ctx context.Context) MachineDisksListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineDisksListArrayOutput)
}

type MachineDisksListOutput struct{ *pulumi.OutputState }

func (MachineDisksListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineDisksList)(nil)).Elem()
}

func (o MachineDisksListOutput) ToMachineDisksListOutput() MachineDisksListOutput {
	return o
}

func (o MachineDisksListOutput) ToMachineDisksListOutputWithContext(ctx context.Context) MachineDisksListOutput {
	return o
}

// ID of the existing block device.
func (o MachineDisksListOutput) BlockDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v MachineDisksList) string { return v.BlockDeviceId }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o MachineDisksListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDisksList) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o MachineDisksListOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineDisksList) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MachineDisksListArrayOutput struct{ *pulumi.OutputState }

func (MachineDisksListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineDisksList)(nil)).Elem()
}

func (o MachineDisksListArrayOutput) ToMachineDisksListArrayOutput() MachineDisksListArrayOutput {
	return o
}

func (o MachineDisksListArrayOutput) ToMachineDisksListArrayOutputWithContext(ctx context.Context) MachineDisksListArrayOutput {
	return o
}

func (o MachineDisksListArrayOutput) Index(i pulumi.IntInput) MachineDisksListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineDisksList {
		return vs[0].([]MachineDisksList)[vs[1].(int)]
	}).(MachineDisksListOutput)
}

type MachineImageDiskConstraint struct {
	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression string `pulumi:"expression"`
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory bool `pulumi:"mandatory"`
}

// MachineImageDiskConstraintInput is an input type that accepts MachineImageDiskConstraintArgs and MachineImageDiskConstraintOutput values.
// You can construct a concrete instance of `MachineImageDiskConstraintInput` via:
//
//          MachineImageDiskConstraintArgs{...}
type MachineImageDiskConstraintInput interface {
	pulumi.Input

	ToMachineImageDiskConstraintOutput() MachineImageDiskConstraintOutput
	ToMachineImageDiskConstraintOutputWithContext(context.Context) MachineImageDiskConstraintOutput
}

type MachineImageDiskConstraintArgs struct {
	// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Indicates whether this constraint should be strictly enforced or not.
	Mandatory pulumi.BoolInput `pulumi:"mandatory"`
}

func (MachineImageDiskConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineImageDiskConstraint)(nil)).Elem()
}

func (i MachineImageDiskConstraintArgs) ToMachineImageDiskConstraintOutput() MachineImageDiskConstraintOutput {
	return i.ToMachineImageDiskConstraintOutputWithContext(context.Background())
}

func (i MachineImageDiskConstraintArgs) ToMachineImageDiskConstraintOutputWithContext(ctx context.Context) MachineImageDiskConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageDiskConstraintOutput)
}

// MachineImageDiskConstraintArrayInput is an input type that accepts MachineImageDiskConstraintArray and MachineImageDiskConstraintArrayOutput values.
// You can construct a concrete instance of `MachineImageDiskConstraintArrayInput` via:
//
//          MachineImageDiskConstraintArray{ MachineImageDiskConstraintArgs{...} }
type MachineImageDiskConstraintArrayInput interface {
	pulumi.Input

	ToMachineImageDiskConstraintArrayOutput() MachineImageDiskConstraintArrayOutput
	ToMachineImageDiskConstraintArrayOutputWithContext(context.Context) MachineImageDiskConstraintArrayOutput
}

type MachineImageDiskConstraintArray []MachineImageDiskConstraintInput

func (MachineImageDiskConstraintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineImageDiskConstraint)(nil)).Elem()
}

func (i MachineImageDiskConstraintArray) ToMachineImageDiskConstraintArrayOutput() MachineImageDiskConstraintArrayOutput {
	return i.ToMachineImageDiskConstraintArrayOutputWithContext(context.Background())
}

func (i MachineImageDiskConstraintArray) ToMachineImageDiskConstraintArrayOutputWithContext(ctx context.Context) MachineImageDiskConstraintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageDiskConstraintArrayOutput)
}

type MachineImageDiskConstraintOutput struct{ *pulumi.OutputState }

func (MachineImageDiskConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineImageDiskConstraint)(nil)).Elem()
}

func (o MachineImageDiskConstraintOutput) ToMachineImageDiskConstraintOutput() MachineImageDiskConstraintOutput {
	return o
}

func (o MachineImageDiskConstraintOutput) ToMachineImageDiskConstraintOutputWithContext(ctx context.Context) MachineImageDiskConstraintOutput {
	return o
}

// Constraint that is conveyed to the policy engine. An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
func (o MachineImageDiskConstraintOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v MachineImageDiskConstraint) string { return v.Expression }).(pulumi.StringOutput)
}

// Indicates whether this constraint should be strictly enforced or not.
func (o MachineImageDiskConstraintOutput) Mandatory() pulumi.BoolOutput {
	return o.ApplyT(func(v MachineImageDiskConstraint) bool { return v.Mandatory }).(pulumi.BoolOutput)
}

type MachineImageDiskConstraintArrayOutput struct{ *pulumi.OutputState }

func (MachineImageDiskConstraintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineImageDiskConstraint)(nil)).Elem()
}

func (o MachineImageDiskConstraintArrayOutput) ToMachineImageDiskConstraintArrayOutput() MachineImageDiskConstraintArrayOutput {
	return o
}

func (o MachineImageDiskConstraintArrayOutput) ToMachineImageDiskConstraintArrayOutputWithContext(ctx context.Context) MachineImageDiskConstraintArrayOutput {
	return o
}

func (o MachineImageDiskConstraintArrayOutput) Index(i pulumi.IntInput) MachineImageDiskConstraintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineImageDiskConstraint {
		return vs[0].([]MachineImageDiskConstraint)[vs[1].(int)]
	}).(MachineImageDiskConstraintOutput)
}

type MachineLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// MachineLinkInput is an input type that accepts MachineLinkArgs and MachineLinkOutput values.
// You can construct a concrete instance of `MachineLinkInput` via:
//
//          MachineLinkArgs{...}
type MachineLinkInput interface {
	pulumi.Input

	ToMachineLinkOutput() MachineLinkOutput
	ToMachineLinkOutputWithContext(context.Context) MachineLinkOutput
}

type MachineLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (MachineLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLink)(nil)).Elem()
}

func (i MachineLinkArgs) ToMachineLinkOutput() MachineLinkOutput {
	return i.ToMachineLinkOutputWithContext(context.Background())
}

func (i MachineLinkArgs) ToMachineLinkOutputWithContext(ctx context.Context) MachineLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLinkOutput)
}

// MachineLinkArrayInput is an input type that accepts MachineLinkArray and MachineLinkArrayOutput values.
// You can construct a concrete instance of `MachineLinkArrayInput` via:
//
//          MachineLinkArray{ MachineLinkArgs{...} }
type MachineLinkArrayInput interface {
	pulumi.Input

	ToMachineLinkArrayOutput() MachineLinkArrayOutput
	ToMachineLinkArrayOutputWithContext(context.Context) MachineLinkArrayOutput
}

type MachineLinkArray []MachineLinkInput

func (MachineLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineLink)(nil)).Elem()
}

func (i MachineLinkArray) ToMachineLinkArrayOutput() MachineLinkArrayOutput {
	return i.ToMachineLinkArrayOutputWithContext(context.Background())
}

func (i MachineLinkArray) ToMachineLinkArrayOutputWithContext(ctx context.Context) MachineLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLinkArrayOutput)
}

type MachineLinkOutput struct{ *pulumi.OutputState }

func (MachineLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLink)(nil)).Elem()
}

func (o MachineLinkOutput) ToMachineLinkOutput() MachineLinkOutput {
	return o
}

func (o MachineLinkOutput) ToMachineLinkOutputWithContext(ctx context.Context) MachineLinkOutput {
	return o
}

func (o MachineLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o MachineLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o MachineLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v MachineLink) string { return v.Rel }).(pulumi.StringOutput)
}

type MachineLinkArrayOutput struct{ *pulumi.OutputState }

func (MachineLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineLink)(nil)).Elem()
}

func (o MachineLinkArrayOutput) ToMachineLinkArrayOutput() MachineLinkArrayOutput {
	return o
}

func (o MachineLinkArrayOutput) ToMachineLinkArrayOutputWithContext(ctx context.Context) MachineLinkArrayOutput {
	return o
}

func (o MachineLinkArrayOutput) Index(i pulumi.IntInput) MachineLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineLink {
		return vs[0].([]MachineLink)[vs[1].(int)]
	}).(MachineLinkOutput)
}

type MachineNic struct {
	// List of IP addresses allocated or in use by this network interface.
	// example:[ "10.1.2.190" ]
	Addresses []string `pulumi:"addresses"`
	// Additional properties that may be used to extend the base type.
	CustomProperties map[string]interface{} `pulumi:"customProperties"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// The device index of this network interface.
	DeviceIndex *int `pulumi:"deviceIndex"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of the network instance that this network interface plugs into.
	NetworkId string `pulumi:"networkId"`
	// List of security group ids which this network interface will be assigned to.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
}

// MachineNicInput is an input type that accepts MachineNicArgs and MachineNicOutput values.
// You can construct a concrete instance of `MachineNicInput` via:
//
//          MachineNicArgs{...}
type MachineNicInput interface {
	pulumi.Input

	ToMachineNicOutput() MachineNicOutput
	ToMachineNicOutputWithContext(context.Context) MachineNicOutput
}

type MachineNicArgs struct {
	// List of IP addresses allocated or in use by this network interface.
	// example:[ "10.1.2.190" ]
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Additional properties that may be used to extend the base type.
	CustomProperties pulumi.MapInput `pulumi:"customProperties"`
	// Human-friendly description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The device index of this network interface.
	DeviceIndex pulumi.IntPtrInput `pulumi:"deviceIndex"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the network instance that this network interface plugs into.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// List of security group ids which this network interface will be assigned to.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
}

func (MachineNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineNic)(nil)).Elem()
}

func (i MachineNicArgs) ToMachineNicOutput() MachineNicOutput {
	return i.ToMachineNicOutputWithContext(context.Background())
}

func (i MachineNicArgs) ToMachineNicOutputWithContext(ctx context.Context) MachineNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineNicOutput)
}

// MachineNicArrayInput is an input type that accepts MachineNicArray and MachineNicArrayOutput values.
// You can construct a concrete instance of `MachineNicArrayInput` via:
//
//          MachineNicArray{ MachineNicArgs{...} }
type MachineNicArrayInput interface {
	pulumi.Input

	ToMachineNicArrayOutput() MachineNicArrayOutput
	ToMachineNicArrayOutputWithContext(context.Context) MachineNicArrayOutput
}

type MachineNicArray []MachineNicInput

func (MachineNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineNic)(nil)).Elem()
}

func (i MachineNicArray) ToMachineNicArrayOutput() MachineNicArrayOutput {
	return i.ToMachineNicArrayOutputWithContext(context.Background())
}

func (i MachineNicArray) ToMachineNicArrayOutputWithContext(ctx context.Context) MachineNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineNicArrayOutput)
}

type MachineNicOutput struct{ *pulumi.OutputState }

func (MachineNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineNic)(nil)).Elem()
}

func (o MachineNicOutput) ToMachineNicOutput() MachineNicOutput {
	return o
}

func (o MachineNicOutput) ToMachineNicOutputWithContext(ctx context.Context) MachineNicOutput {
	return o
}

// List of IP addresses allocated or in use by this network interface.
// example:[ "10.1.2.190" ]
func (o MachineNicOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineNic) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Additional properties that may be used to extend the base type.
func (o MachineNicOutput) CustomProperties() pulumi.MapOutput {
	return o.ApplyT(func(v MachineNic) map[string]interface{} { return v.CustomProperties }).(pulumi.MapOutput)
}

// Human-friendly description.
func (o MachineNicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineNic) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The device index of this network interface.
func (o MachineNicOutput) DeviceIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineNic) *int { return v.DeviceIndex }).(pulumi.IntPtrOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o MachineNicOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineNic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the network instance that this network interface plugs into.
func (o MachineNicOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v MachineNic) string { return v.NetworkId }).(pulumi.StringOutput)
}

// List of security group ids which this network interface will be assigned to.
func (o MachineNicOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineNic) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

type MachineNicArrayOutput struct{ *pulumi.OutputState }

func (MachineNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineNic)(nil)).Elem()
}

func (o MachineNicArrayOutput) ToMachineNicArrayOutput() MachineNicArrayOutput {
	return o
}

func (o MachineNicArrayOutput) ToMachineNicArrayOutputWithContext(ctx context.Context) MachineNicArrayOutput {
	return o
}

func (o MachineNicArrayOutput) Index(i pulumi.IntInput) MachineNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineNic {
		return vs[0].([]MachineNic)[vs[1].(int)]
	}).(MachineNicOutput)
}

type MachineTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// MachineTagInput is an input type that accepts MachineTagArgs and MachineTagOutput values.
// You can construct a concrete instance of `MachineTagInput` via:
//
//          MachineTagArgs{...}
type MachineTagInput interface {
	pulumi.Input

	ToMachineTagOutput() MachineTagOutput
	ToMachineTagOutputWithContext(context.Context) MachineTagOutput
}

type MachineTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MachineTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineTag)(nil)).Elem()
}

func (i MachineTagArgs) ToMachineTagOutput() MachineTagOutput {
	return i.ToMachineTagOutputWithContext(context.Background())
}

func (i MachineTagArgs) ToMachineTagOutputWithContext(ctx context.Context) MachineTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineTagOutput)
}

// MachineTagArrayInput is an input type that accepts MachineTagArray and MachineTagArrayOutput values.
// You can construct a concrete instance of `MachineTagArrayInput` via:
//
//          MachineTagArray{ MachineTagArgs{...} }
type MachineTagArrayInput interface {
	pulumi.Input

	ToMachineTagArrayOutput() MachineTagArrayOutput
	ToMachineTagArrayOutputWithContext(context.Context) MachineTagArrayOutput
}

type MachineTagArray []MachineTagInput

func (MachineTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineTag)(nil)).Elem()
}

func (i MachineTagArray) ToMachineTagArrayOutput() MachineTagArrayOutput {
	return i.ToMachineTagArrayOutputWithContext(context.Background())
}

func (i MachineTagArray) ToMachineTagArrayOutputWithContext(ctx context.Context) MachineTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineTagArrayOutput)
}

type MachineTagOutput struct{ *pulumi.OutputState }

func (MachineTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineTag)(nil)).Elem()
}

func (o MachineTagOutput) ToMachineTagOutput() MachineTagOutput {
	return o
}

func (o MachineTagOutput) ToMachineTagOutputWithContext(ctx context.Context) MachineTagOutput {
	return o
}

// Tag’s key.
func (o MachineTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MachineTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o MachineTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MachineTag) string { return v.Value }).(pulumi.StringOutput)
}

type MachineTagArrayOutput struct{ *pulumi.OutputState }

func (MachineTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineTag)(nil)).Elem()
}

func (o MachineTagArrayOutput) ToMachineTagArrayOutput() MachineTagArrayOutput {
	return o
}

func (o MachineTagArrayOutput) ToMachineTagArrayOutputWithContext(ctx context.Context) MachineTagArrayOutput {
	return o
}

func (o MachineTagArrayOutput) Index(i pulumi.IntInput) MachineTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineTag {
		return vs[0].([]MachineTag)[vs[1].(int)]
	}).(MachineTagOutput)
}

type GetMachineLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetMachineLinkInput is an input type that accepts GetMachineLinkArgs and GetMachineLinkOutput values.
// You can construct a concrete instance of `GetMachineLinkInput` via:
//
//          GetMachineLinkArgs{...}
type GetMachineLinkInput interface {
	pulumi.Input

	ToGetMachineLinkOutput() GetMachineLinkOutput
	ToGetMachineLinkOutputWithContext(context.Context) GetMachineLinkOutput
}

type GetMachineLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetMachineLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineLink)(nil)).Elem()
}

func (i GetMachineLinkArgs) ToGetMachineLinkOutput() GetMachineLinkOutput {
	return i.ToGetMachineLinkOutputWithContext(context.Background())
}

func (i GetMachineLinkArgs) ToGetMachineLinkOutputWithContext(ctx context.Context) GetMachineLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMachineLinkOutput)
}

// GetMachineLinkArrayInput is an input type that accepts GetMachineLinkArray and GetMachineLinkArrayOutput values.
// You can construct a concrete instance of `GetMachineLinkArrayInput` via:
//
//          GetMachineLinkArray{ GetMachineLinkArgs{...} }
type GetMachineLinkArrayInput interface {
	pulumi.Input

	ToGetMachineLinkArrayOutput() GetMachineLinkArrayOutput
	ToGetMachineLinkArrayOutputWithContext(context.Context) GetMachineLinkArrayOutput
}

type GetMachineLinkArray []GetMachineLinkInput

func (GetMachineLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMachineLink)(nil)).Elem()
}

func (i GetMachineLinkArray) ToGetMachineLinkArrayOutput() GetMachineLinkArrayOutput {
	return i.ToGetMachineLinkArrayOutputWithContext(context.Background())
}

func (i GetMachineLinkArray) ToGetMachineLinkArrayOutputWithContext(ctx context.Context) GetMachineLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMachineLinkArrayOutput)
}

type GetMachineLinkOutput struct{ *pulumi.OutputState }

func (GetMachineLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineLink)(nil)).Elem()
}

func (o GetMachineLinkOutput) ToGetMachineLinkOutput() GetMachineLinkOutput {
	return o
}

func (o GetMachineLinkOutput) ToGetMachineLinkOutputWithContext(ctx context.Context) GetMachineLinkOutput {
	return o
}

func (o GetMachineLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMachineLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetMachineLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetMachineLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetMachineLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetMachineLinkArrayOutput struct{ *pulumi.OutputState }

func (GetMachineLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMachineLink)(nil)).Elem()
}

func (o GetMachineLinkArrayOutput) ToGetMachineLinkArrayOutput() GetMachineLinkArrayOutput {
	return o
}

func (o GetMachineLinkArrayOutput) ToGetMachineLinkArrayOutputWithContext(ctx context.Context) GetMachineLinkArrayOutput {
	return o
}

func (o GetMachineLinkArrayOutput) Index(i pulumi.IntInput) GetMachineLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMachineLink {
		return vs[0].([]GetMachineLink)[vs[1].(int)]
	}).(GetMachineLinkOutput)
}

type GetMachineTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetMachineTagInput is an input type that accepts GetMachineTagArgs and GetMachineTagOutput values.
// You can construct a concrete instance of `GetMachineTagInput` via:
//
//          GetMachineTagArgs{...}
type GetMachineTagInput interface {
	pulumi.Input

	ToGetMachineTagOutput() GetMachineTagOutput
	ToGetMachineTagOutputWithContext(context.Context) GetMachineTagOutput
}

type GetMachineTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetMachineTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTag)(nil)).Elem()
}

func (i GetMachineTagArgs) ToGetMachineTagOutput() GetMachineTagOutput {
	return i.ToGetMachineTagOutputWithContext(context.Background())
}

func (i GetMachineTagArgs) ToGetMachineTagOutputWithContext(ctx context.Context) GetMachineTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMachineTagOutput)
}

// GetMachineTagArrayInput is an input type that accepts GetMachineTagArray and GetMachineTagArrayOutput values.
// You can construct a concrete instance of `GetMachineTagArrayInput` via:
//
//          GetMachineTagArray{ GetMachineTagArgs{...} }
type GetMachineTagArrayInput interface {
	pulumi.Input

	ToGetMachineTagArrayOutput() GetMachineTagArrayOutput
	ToGetMachineTagArrayOutputWithContext(context.Context) GetMachineTagArrayOutput
}

type GetMachineTagArray []GetMachineTagInput

func (GetMachineTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMachineTag)(nil)).Elem()
}

func (i GetMachineTagArray) ToGetMachineTagArrayOutput() GetMachineTagArrayOutput {
	return i.ToGetMachineTagArrayOutputWithContext(context.Background())
}

func (i GetMachineTagArray) ToGetMachineTagArrayOutputWithContext(ctx context.Context) GetMachineTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMachineTagArrayOutput)
}

type GetMachineTagOutput struct{ *pulumi.OutputState }

func (GetMachineTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMachineTag)(nil)).Elem()
}

func (o GetMachineTagOutput) ToGetMachineTagOutput() GetMachineTagOutput {
	return o
}

func (o GetMachineTagOutput) ToGetMachineTagOutputWithContext(ctx context.Context) GetMachineTagOutput {
	return o
}

func (o GetMachineTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetMachineTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetMachineTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetMachineTagArrayOutput struct{ *pulumi.OutputState }

func (GetMachineTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMachineTag)(nil)).Elem()
}

func (o GetMachineTagArrayOutput) ToGetMachineTagArrayOutput() GetMachineTagArrayOutput {
	return o
}

func (o GetMachineTagArrayOutput) ToGetMachineTagArrayOutputWithContext(ctx context.Context) GetMachineTagArrayOutput {
	return o
}

func (o GetMachineTagArrayOutput) Index(i pulumi.IntInput) GetMachineTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMachineTag {
		return vs[0].([]GetMachineTag)[vs[1].(int)]
	}).(GetMachineTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineBootConfigInput)(nil)).Elem(), MachineBootConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineBootConfigPtrInput)(nil)).Elem(), MachineBootConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConstraintInput)(nil)).Elem(), MachineConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConstraintArrayInput)(nil)).Elem(), MachineConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDiskInput)(nil)).Elem(), MachineDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDiskArrayInput)(nil)).Elem(), MachineDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDisksListInput)(nil)).Elem(), MachineDisksListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineDisksListArrayInput)(nil)).Elem(), MachineDisksListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineImageDiskConstraintInput)(nil)).Elem(), MachineImageDiskConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineImageDiskConstraintArrayInput)(nil)).Elem(), MachineImageDiskConstraintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLinkInput)(nil)).Elem(), MachineLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLinkArrayInput)(nil)).Elem(), MachineLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineNicInput)(nil)).Elem(), MachineNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineNicArrayInput)(nil)).Elem(), MachineNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineTagInput)(nil)).Elem(), MachineTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineTagArrayInput)(nil)).Elem(), MachineTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMachineLinkInput)(nil)).Elem(), GetMachineLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMachineLinkArrayInput)(nil)).Elem(), GetMachineLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMachineTagInput)(nil)).Elem(), GetMachineTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMachineTagArrayInput)(nil)).Elem(), GetMachineTagArray{})
	pulumi.RegisterOutputType(MachineBootConfigOutput{})
	pulumi.RegisterOutputType(MachineBootConfigPtrOutput{})
	pulumi.RegisterOutputType(MachineConstraintOutput{})
	pulumi.RegisterOutputType(MachineConstraintArrayOutput{})
	pulumi.RegisterOutputType(MachineDiskOutput{})
	pulumi.RegisterOutputType(MachineDiskArrayOutput{})
	pulumi.RegisterOutputType(MachineDisksListOutput{})
	pulumi.RegisterOutputType(MachineDisksListArrayOutput{})
	pulumi.RegisterOutputType(MachineImageDiskConstraintOutput{})
	pulumi.RegisterOutputType(MachineImageDiskConstraintArrayOutput{})
	pulumi.RegisterOutputType(MachineLinkOutput{})
	pulumi.RegisterOutputType(MachineLinkArrayOutput{})
	pulumi.RegisterOutputType(MachineNicOutput{})
	pulumi.RegisterOutputType(MachineNicArrayOutput{})
	pulumi.RegisterOutputType(MachineTagOutput{})
	pulumi.RegisterOutputType(MachineTagArrayOutput{})
	pulumi.RegisterOutputType(GetMachineLinkOutput{})
	pulumi.RegisterOutputType(GetMachineLinkArrayOutput{})
	pulumi.RegisterOutputType(GetMachineTagOutput{})
	pulumi.RegisterOutputType(GetMachineTagArrayOutput{})
}
