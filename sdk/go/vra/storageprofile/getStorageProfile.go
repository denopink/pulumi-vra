// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storageprofile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile data source.
//
// **Storage profile data source by its id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storageprofile.LookupStorageProfile(ctx, &storageprofile.LookupStorageProfileArgs{
//				Id: pulumi.StringRef(vra_storage_profile.This.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Vra storage profile data source filter by external region id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storageprofile.LookupStorageProfile(ctx, &storageprofile.LookupStorageProfileArgs{
//				Filter: pulumi.StringRef("externalRegionId eq 'foobar'"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile data source supports the following arguments:
func LookupStorageProfile(ctx *pulumi.Context, args *LookupStorageProfileArgs, opts ...pulumi.InvokeOption) (*LookupStorageProfileResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupStorageProfileResult
	err := ctx.Invoke("vra:storageprofile/getStorageProfile:getStorageProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorageProfile.
type LookupStorageProfileArgs struct {
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties map[string]interface{} `pulumi:"diskProperties"`
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter *string `pulumi:"filter"`
	// The id of the image profile instance.
	Id *string `pulumi:"id"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetStorageProfileTag `pulumi:"tags"`
}

// A collection of values returned by getStorageProfile.
type LookupStorageProfileResult struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates if this storage profile is a default profile.
	DefaultItem    bool                   `pulumi:"defaultItem"`
	Description    *string                `pulumi:"description"`
	DiskProperties map[string]interface{} `pulumi:"diskProperties"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId string  `pulumi:"externalRegionId"`
	Filter           *string `pulumi:"filter"`
	Id               string  `pulumi:"id"`
	// HATEOAS of the entity
	Links []GetStorageProfileLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner string `pulumi:"owner"`
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetStorageProfileTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupStorageProfileOutput(ctx *pulumi.Context, args LookupStorageProfileOutputArgs, opts ...pulumi.InvokeOption) LookupStorageProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStorageProfileResult, error) {
			args := v.(LookupStorageProfileArgs)
			r, err := LookupStorageProfile(ctx, &args, opts...)
			var s LookupStorageProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStorageProfileResultOutput)
}

// A collection of arguments for invoking getStorageProfile.
type LookupStorageProfileOutputArgs struct {
	// A human-friendly description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties pulumi.MapInput `pulumi:"diskProperties"`
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The id of the image profile instance.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags GetStorageProfileTagArrayInput `pulumi:"tags"`
}

func (LookupStorageProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageProfileArgs)(nil)).Elem()
}

// A collection of values returned by getStorageProfile.
type LookupStorageProfileResultOutput struct{ *pulumi.OutputState }

func (LookupStorageProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageProfileResult)(nil)).Elem()
}

func (o LookupStorageProfileResultOutput) ToLookupStorageProfileResultOutput() LookupStorageProfileResultOutput {
	return o
}

func (o LookupStorageProfileResultOutput) ToLookupStorageProfileResultOutputWithContext(ctx context.Context) LookupStorageProfileResultOutput {
	return o
}

// Id of the cloud account this storage profile belongs to.
func (o LookupStorageProfileResultOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o LookupStorageProfileResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates if this storage profile is a default profile.
func (o LookupStorageProfileResultOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) bool { return v.DefaultItem }).(pulumi.BoolOutput)
}

func (o LookupStorageProfileResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupStorageProfileResultOutput) DiskProperties() pulumi.MapOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) map[string]interface{} { return v.DiskProperties }).(pulumi.MapOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o LookupStorageProfileResultOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.ExternalRegionId }).(pulumi.StringOutput)
}

func (o LookupStorageProfileResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o LookupStorageProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o LookupStorageProfileResultOutput) Links() GetStorageProfileLinkArrayOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) []GetStorageProfileLink { return v.Links }).(GetStorageProfileLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o LookupStorageProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o LookupStorageProfileResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o LookupStorageProfileResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.Owner }).(pulumi.StringOutput)
}

// Indicates whether this storage profile supports encryption or not.
func (o LookupStorageProfileResultOutput) SupportsEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) bool { return v.SupportsEncryption }).(pulumi.BoolOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o LookupStorageProfileResultOutput) Tags() GetStorageProfileTagArrayOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) []GetStorageProfileTag { return v.Tags }).(GetStorageProfileTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o LookupStorageProfileResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStorageProfileResultOutput{})
}
