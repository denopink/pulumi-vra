// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storageprofile

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile azure resource.
//
// **Vra storage profile azure:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storageprofile.NewAzure(ctx, "thisAzure", &storageprofile.AzureArgs{
//				Description:        pulumi.String("Azure Storage Profile with managed disks."),
//				RegionId:           pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem:        pulumi.Bool(false),
//				SupportsEncryption: pulumi.Bool(false),
//				DataDiskCaching:    pulumi.String("None"),
//				DiskType:           pulumi.String("Standard_LRS"),
//				OsDiskCaching:      pulumi.String("None"),
//				Tags: storageprofile.AzureTagArray{
//					&storageprofile.AzureTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = storageprofile.NewAzure(ctx, "thisStorageprofile/azureAzure", &storageprofile.AzureArgs{
//				Description:        pulumi.String("Azure Storage Profile with unmanaged disks."),
//				RegionId:           pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem:        pulumi.Bool(false),
//				SupportsEncryption: pulumi.Bool(false),
//				DataDiskCaching:    pulumi.String("None"),
//				OsDiskCaching:      pulumi.String("None"),
//				Tags: storageprofile.AzureTagArray{
//					&storageprofile.AzureTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile azure resource supports the following arguments:
type Azure struct {
	pulumi.CustomResourceState

	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching pulumi.StringOutput `pulumi:"dataDiskCaching"`
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolOutput `pulumi:"defaultItem"`
	// A human-friendly description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// HATEOAS of the entity
	Links AzureLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching pulumi.StringOutput `pulumi:"osDiskCaching"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// A link to the region that is associated with the storage profile.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Id of a storage account where in the disk is placed.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolOutput `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags AzureTagArrayOutput `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAzure registers a new resource with the given unique name, arguments, and options.
func NewAzure(ctx *pulumi.Context,
	name string, args *AzureArgs, opts ...pulumi.ResourceOption) (*Azure, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultItem == nil {
		return nil, errors.New("invalid value for required argument 'DefaultItem'")
	}
	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Azure
	err := ctx.RegisterResource("vra:storageprofile/azure:Azure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzure gets an existing Azure resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzure(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureState, opts ...pulumi.ResourceOption) (*Azure, error) {
	var resource Azure
	err := ctx.ReadResource("vra:storageprofile/azure:Azure", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Azure resources.
type azureState struct {
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching *string `pulumi:"dataDiskCaching"`
	// Indicates if this storage profile is a default profile.
	DefaultItem *bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// HATEOAS of the entity
	Links []AzureLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrganizationId *string `pulumi:"organizationId"`
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching *string `pulumi:"osDiskCaching"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// A link to the region that is associated with the storage profile.
	RegionId *string `pulumi:"regionId"`
	// Id of a storage account where in the disk is placed.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []AzureTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AzureState struct {
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringPtrInput
	// HATEOAS of the entity
	Links AzureLinkArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrganizationId pulumi.StringPtrInput
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// A link to the region that is associated with the storage profile.
	RegionId pulumi.StringPtrInput
	// Id of a storage account where in the disk is placed.
	StorageAccountId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags AzureTagArrayInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (AzureState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureState)(nil)).Elem()
}

type azureArgs struct {
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching *string `pulumi:"dataDiskCaching"`
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching *string `pulumi:"osDiskCaching"`
	// A link to the region that is associated with the storage profile.
	RegionId string `pulumi:"regionId"`
	// Id of a storage account where in the disk is placed.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []AzureTag `pulumi:"tags"`
}

// The set of arguments for constructing a Azure resource.
type AzureArgs struct {
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching pulumi.StringPtrInput
	// A link to the region that is associated with the storage profile.
	RegionId pulumi.StringInput
	// Id of a storage account where in the disk is placed.
	StorageAccountId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags AzureTagArrayInput
}

func (AzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureArgs)(nil)).Elem()
}

type AzureInput interface {
	pulumi.Input

	ToAzureOutput() AzureOutput
	ToAzureOutputWithContext(ctx context.Context) AzureOutput
}

func (*Azure) ElementType() reflect.Type {
	return reflect.TypeOf((**Azure)(nil)).Elem()
}

func (i *Azure) ToAzureOutput() AzureOutput {
	return i.ToAzureOutputWithContext(context.Background())
}

func (i *Azure) ToAzureOutputWithContext(ctx context.Context) AzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureOutput)
}

// AzureArrayInput is an input type that accepts AzureArray and AzureArrayOutput values.
// You can construct a concrete instance of `AzureArrayInput` via:
//
//	AzureArray{ AzureArgs{...} }
type AzureArrayInput interface {
	pulumi.Input

	ToAzureArrayOutput() AzureArrayOutput
	ToAzureArrayOutputWithContext(context.Context) AzureArrayOutput
}

type AzureArray []AzureInput

func (AzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Azure)(nil)).Elem()
}

func (i AzureArray) ToAzureArrayOutput() AzureArrayOutput {
	return i.ToAzureArrayOutputWithContext(context.Background())
}

func (i AzureArray) ToAzureArrayOutputWithContext(ctx context.Context) AzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureArrayOutput)
}

// AzureMapInput is an input type that accepts AzureMap and AzureMapOutput values.
// You can construct a concrete instance of `AzureMapInput` via:
//
//	AzureMap{ "key": AzureArgs{...} }
type AzureMapInput interface {
	pulumi.Input

	ToAzureMapOutput() AzureMapOutput
	ToAzureMapOutputWithContext(context.Context) AzureMapOutput
}

type AzureMap map[string]AzureInput

func (AzureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Azure)(nil)).Elem()
}

func (i AzureMap) ToAzureMapOutput() AzureMapOutput {
	return i.ToAzureMapOutputWithContext(context.Background())
}

func (i AzureMap) ToAzureMapOutputWithContext(ctx context.Context) AzureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMapOutput)
}

type AzureOutput struct{ *pulumi.OutputState }

func (AzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Azure)(nil)).Elem()
}

func (o AzureOutput) ToAzureOutput() AzureOutput {
	return o
}

func (o AzureOutput) ToAzureOutputWithContext(ctx context.Context) AzureOutput {
	return o
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o AzureOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates the caching mechanism for additional disk.
func (o AzureOutput) DataDiskCaching() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.DataDiskCaching }).(pulumi.StringOutput)
}

// Indicates if this storage profile is a default profile.
func (o AzureOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v *Azure) pulumi.BoolOutput { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o AzureOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
func (o AzureOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o AzureOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o AzureOutput) Links() AzureLinkArrayOutput {
	return o.ApplyT(func(v *Azure) AzureLinkArrayOutput { return v.Links }).(AzureLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o AzureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o AzureOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
func (o AzureOutput) OsDiskCaching() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.OsDiskCaching }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o AzureOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// A link to the region that is associated with the storage profile.
func (o AzureOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Id of a storage account where in the disk is placed.
func (o AzureOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Indicates whether this storage policy should support encryption or not.
func (o AzureOutput) SupportsEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v *Azure) pulumi.BoolOutput { return v.SupportsEncryption }).(pulumi.BoolOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o AzureOutput) Tags() AzureTagArrayOutput {
	return o.ApplyT(func(v *Azure) AzureTagArrayOutput { return v.Tags }).(AzureTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o AzureOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Azure) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AzureArrayOutput struct{ *pulumi.OutputState }

func (AzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Azure)(nil)).Elem()
}

func (o AzureArrayOutput) ToAzureArrayOutput() AzureArrayOutput {
	return o
}

func (o AzureArrayOutput) ToAzureArrayOutputWithContext(ctx context.Context) AzureArrayOutput {
	return o
}

func (o AzureArrayOutput) Index(i pulumi.IntInput) AzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Azure {
		return vs[0].([]*Azure)[vs[1].(int)]
	}).(AzureOutput)
}

type AzureMapOutput struct{ *pulumi.OutputState }

func (AzureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Azure)(nil)).Elem()
}

func (o AzureMapOutput) ToAzureMapOutput() AzureMapOutput {
	return o
}

func (o AzureMapOutput) ToAzureMapOutputWithContext(ctx context.Context) AzureMapOutput {
	return o
}

func (o AzureMapOutput) MapIndex(k pulumi.StringInput) AzureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Azure {
		return vs[0].(map[string]*Azure)[vs[1].(string)]
	}).(AzureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureInput)(nil)).Elem(), &Azure{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureArrayInput)(nil)).Elem(), AzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureMapInput)(nil)).Elem(), AzureMap{})
	pulumi.RegisterOutputType(AzureOutput{})
	pulumi.RegisterOutputType(AzureArrayOutput{})
	pulumi.RegisterOutputType(AzureMapOutput{})
}
