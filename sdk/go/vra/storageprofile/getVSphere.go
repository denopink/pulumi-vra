// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storageprofile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile vsphere data source.
//
// **Storage profile vsphere data source by its id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storageprofile.LookupVSphere(ctx, &storageprofile.LookupVSphereArgs{
//				Id: pulumi.StringRef(vra_storage_profile_vsphere.This.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Vra storage profile data source filter by external region id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := storageprofile.LookupVSphere(ctx, &storageprofile.LookupVSphereArgs{
//				Filter: pulumi.StringRef("externalRegionId eq 'foobar'"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile vsphere data source supports the following arguments:
func LookupVSphere(ctx *pulumi.Context, args *LookupVSphereArgs, opts ...pulumi.InvokeOption) (*LookupVSphereResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupVSphereResult
	err := ctx.Invoke("vra:storageprofile/getVSphere:getVSphere", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVSphere.
type LookupVSphereArgs struct {
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter *string `pulumi:"filter"`
	// The id of the image profile instance.
	Id *string `pulumi:"id"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel *string `pulumi:"sharesLevel"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetVSphereTag `pulumi:"tags"`
}

// A collection of values returned by getVSphere.
type LookupVSphereResult struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description string `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode string `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType string `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId string  `pulumi:"externalRegionId"`
	Filter           *string `pulumi:"filter"`
	Id               string  `pulumi:"id"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops string `pulumi:"limitIops"`
	// HATEOAS of the entity
	Links []GetVSphereLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner string `pulumi:"owner"`
	// Type of provisioning policy for the disk.
	ProvisioningType string `pulumi:"provisioningType"`
	// A specific number of shares assigned to each virtual machine.
	Shares      string  `pulumi:"shares"`
	SharesLevel *string `pulumi:"sharesLevel"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetVSphereTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupVSphereOutput(ctx *pulumi.Context, args LookupVSphereOutputArgs, opts ...pulumi.InvokeOption) LookupVSphereResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVSphereResult, error) {
			args := v.(LookupVSphereArgs)
			r, err := LookupVSphere(ctx, &args, opts...)
			var s LookupVSphereResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVSphereResultOutput)
}

// A collection of arguments for invoking getVSphere.
type LookupVSphereOutputArgs struct {
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The id of the image profile instance.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrInput `pulumi:"sharesLevel"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags GetVSphereTagArrayInput `pulumi:"tags"`
}

func (LookupVSphereOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVSphereArgs)(nil)).Elem()
}

// A collection of values returned by getVSphere.
type LookupVSphereResultOutput struct{ *pulumi.OutputState }

func (LookupVSphereResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVSphereResult)(nil)).Elem()
}

func (o LookupVSphereResultOutput) ToLookupVSphereResultOutput() LookupVSphereResultOutput {
	return o
}

func (o LookupVSphereResultOutput) ToLookupVSphereResultOutputWithContext(ctx context.Context) LookupVSphereResultOutput {
	return o
}

// Id of the cloud account this storage profile belongs to.
func (o LookupVSphereResultOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o LookupVSphereResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates if this storage profile is a default profile.
func (o LookupVSphereResultOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVSphereResult) bool { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o LookupVSphereResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Description }).(pulumi.StringOutput)
}

// Type of mode for the disk.
func (o LookupVSphereResultOutput) DiskMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.DiskMode }).(pulumi.StringOutput)
}

// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
func (o LookupVSphereResultOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.DiskType }).(pulumi.StringOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o LookupVSphereResultOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.ExternalRegionId }).(pulumi.StringOutput)
}

func (o LookupVSphereResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVSphereResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o LookupVSphereResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Id }).(pulumi.StringOutput)
}

// The upper bound for the I/O operations per second allocated for each virtual disk.
func (o LookupVSphereResultOutput) LimitIops() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.LimitIops }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o LookupVSphereResultOutput) Links() GetVSphereLinkArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []GetVSphereLink { return v.Links }).(GetVSphereLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o LookupVSphereResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o LookupVSphereResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o LookupVSphereResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Owner }).(pulumi.StringOutput)
}

// Type of provisioning policy for the disk.
func (o LookupVSphereResultOutput) ProvisioningType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.ProvisioningType }).(pulumi.StringOutput)
}

// A specific number of shares assigned to each virtual machine.
func (o LookupVSphereResultOutput) Shares() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Shares }).(pulumi.StringOutput)
}

func (o LookupVSphereResultOutput) SharesLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVSphereResult) *string { return v.SharesLevel }).(pulumi.StringPtrOutput)
}

// Indicates whether this storage policy should support encryption or not.
func (o LookupVSphereResultOutput) SupportsEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVSphereResult) bool { return v.SupportsEncryption }).(pulumi.BoolOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o LookupVSphereResultOutput) Tags() GetVSphereTagArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []GetVSphereTag { return v.Tags }).(GetVSphereTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o LookupVSphereResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVSphereResultOutput{})
}
