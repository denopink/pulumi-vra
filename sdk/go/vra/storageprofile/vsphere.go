// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storageprofile

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile vsphere resource.
//
// **Vra storage profile vsphere:**
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vra/sdk/go/vra/storageprofile"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/storageprofile"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := storageprofile.NewVSphere(ctx, "this", &storageprofile.VSphereArgs{
// 			Description:      pulumi.String("vSphere Storage Profile with FCD disk."),
// 			RegionId:         pulumi.Any(data.Vra_region.This.Id),
// 			DefaultItem:      pulumi.Bool(false),
// 			DiskType:         pulumi.String("firstClass"),
// 			ProvisioningType: pulumi.String("thin"),
// 			DatastoreId:      pulumi.Any(data.Vra_fabric_datastore_vsphere.This.Id),
// 			StoragePolicyId:  pulumi.Any(data.Vra_fabric_storage_policy_vsphere.This.Id),
// 			Tags: storageprofile.VSphereTagArray{
// 				&storageprofile.VSphereTagArgs{
// 					Key:   pulumi.String("foo"),
// 					Value: pulumi.String("bar"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// A storage profile vsphere resource supports the following arguments:
type VSphere struct {
	pulumi.CustomResourceState

	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringOutput `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrOutput `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolOutput `pulumi:"defaultItem"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode pulumi.StringOutput `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrOutput `pulumi:"limitIops"`
	// HATEOAS of the entity
	Links VSphereLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrOutput `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrOutput `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrOutput `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrOutput `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrOutput `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags VSphereTagArrayOutput `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewVSphere registers a new resource with the given unique name, arguments, and options.
func NewVSphere(ctx *pulumi.Context,
	name string, args *VSphereArgs, opts ...pulumi.ResourceOption) (*VSphere, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultItem == nil {
		return nil, errors.New("invalid value for required argument 'DefaultItem'")
	}
	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VSphere
	err := ctx.RegisterResource("vra:storageprofile/vSphere:VSphere", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVSphere gets an existing VSphere resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVSphere(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VSphereState, opts ...pulumi.ResourceOption) (*VSphere, error) {
	var resource VSphere
	err := ctx.ReadResource("vra:storageprofile/vSphere:VSphere", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VSphere resources.
type vsphereState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId *string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId *string `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem *bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode *string `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops *string `pulumi:"limitIops"`
	// HATEOAS of the entity
	Links []VSphereLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// Type of provisioning policy for the disk.
	ProvisioningType *string `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId *string `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares *string `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel *string `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []VSphereTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type VSphereState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringPtrInput
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Type of mode for the disk.
	DiskMode pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringPtrInput
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrInput
	// HATEOAS of the entity
	Links VSphereLinkArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrInput
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringPtrInput
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrInput
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrInput
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags VSphereTagArrayInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (VSphereState) ElementType() reflect.Type {
	return reflect.TypeOf((*vsphereState)(nil)).Elem()
}

type vsphereArgs struct {
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId *string `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode *string `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops *string `pulumi:"limitIops"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// Type of provisioning policy for the disk.
	ProvisioningType *string `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId string `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares *string `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel *string `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []VSphereTag `pulumi:"tags"`
}

// The set of arguments for constructing a VSphere resource.
type VSphereArgs struct {
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Type of mode for the disk.
	DiskMode pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrInput
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringInput
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrInput
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrInput
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags VSphereTagArrayInput
}

func (VSphereArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vsphereArgs)(nil)).Elem()
}

type VSphereInput interface {
	pulumi.Input

	ToVSphereOutput() VSphereOutput
	ToVSphereOutputWithContext(ctx context.Context) VSphereOutput
}

func (*VSphere) ElementType() reflect.Type {
	return reflect.TypeOf((**VSphere)(nil)).Elem()
}

func (i *VSphere) ToVSphereOutput() VSphereOutput {
	return i.ToVSphereOutputWithContext(context.Background())
}

func (i *VSphere) ToVSphereOutputWithContext(ctx context.Context) VSphereOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereOutput)
}

// VSphereArrayInput is an input type that accepts VSphereArray and VSphereArrayOutput values.
// You can construct a concrete instance of `VSphereArrayInput` via:
//
//          VSphereArray{ VSphereArgs{...} }
type VSphereArrayInput interface {
	pulumi.Input

	ToVSphereArrayOutput() VSphereArrayOutput
	ToVSphereArrayOutputWithContext(context.Context) VSphereArrayOutput
}

type VSphereArray []VSphereInput

func (VSphereArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VSphere)(nil)).Elem()
}

func (i VSphereArray) ToVSphereArrayOutput() VSphereArrayOutput {
	return i.ToVSphereArrayOutputWithContext(context.Background())
}

func (i VSphereArray) ToVSphereArrayOutputWithContext(ctx context.Context) VSphereArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereArrayOutput)
}

// VSphereMapInput is an input type that accepts VSphereMap and VSphereMapOutput values.
// You can construct a concrete instance of `VSphereMapInput` via:
//
//          VSphereMap{ "key": VSphereArgs{...} }
type VSphereMapInput interface {
	pulumi.Input

	ToVSphereMapOutput() VSphereMapOutput
	ToVSphereMapOutputWithContext(context.Context) VSphereMapOutput
}

type VSphereMap map[string]VSphereInput

func (VSphereMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VSphere)(nil)).Elem()
}

func (i VSphereMap) ToVSphereMapOutput() VSphereMapOutput {
	return i.ToVSphereMapOutputWithContext(context.Background())
}

func (i VSphereMap) ToVSphereMapOutputWithContext(ctx context.Context) VSphereMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereMapOutput)
}

type VSphereOutput struct{ *pulumi.OutputState }

func (VSphereOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VSphere)(nil)).Elem()
}

func (o VSphereOutput) ToVSphereOutput() VSphereOutput {
	return o
}

func (o VSphereOutput) ToVSphereOutputWithContext(ctx context.Context) VSphereOutput {
	return o
}

// Id of the cloud account this storage profile belongs to.
func (o VSphereOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o VSphereOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Id of the vSphere Datastore for placing disk and VM.
func (o VSphereOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// Indicates if this storage profile is a default profile.
func (o VSphereOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v *VSphere) pulumi.BoolOutput { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o VSphereOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of mode for the disk.
func (o VSphereOutput) DiskMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.DiskMode }).(pulumi.StringOutput)
}

// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
func (o VSphereOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o VSphereOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// The upper bound for the I/O operations per second allocated for each virtual disk.
func (o VSphereOutput) LimitIops() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.LimitIops }).(pulumi.StringPtrOutput)
}

// HATEOAS of the entity
func (o VSphereOutput) Links() VSphereLinkArrayOutput {
	return o.ApplyT(func(v *VSphere) VSphereLinkArrayOutput { return v.Links }).(VSphereLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o VSphereOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o VSphereOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o VSphereOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Type of provisioning policy for the disk.
func (o VSphereOutput) ProvisioningType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.ProvisioningType }).(pulumi.StringPtrOutput)
}

// The Id of the region that is associated with the storage profile.
func (o VSphereOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// A specific number of shares assigned to each virtual machine.
func (o VSphereOutput) Shares() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.Shares }).(pulumi.StringPtrOutput)
}

// Indicates whether this storage profile supports encryption or not.
func (o VSphereOutput) SharesLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.SharesLevel }).(pulumi.StringPtrOutput)
}

// Id of the vSphere Storage Policy to be applied.
func (o VSphereOutput) StoragePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringPtrOutput { return v.StoragePolicyId }).(pulumi.StringPtrOutput)
}

// Indicates whether this storage policy should support encryption or not.
func (o VSphereOutput) SupportsEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VSphere) pulumi.BoolPtrOutput { return v.SupportsEncryption }).(pulumi.BoolPtrOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o VSphereOutput) Tags() VSphereTagArrayOutput {
	return o.ApplyT(func(v *VSphere) VSphereTagArrayOutput { return v.Tags }).(VSphereTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o VSphereOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VSphere) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type VSphereArrayOutput struct{ *pulumi.OutputState }

func (VSphereArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VSphere)(nil)).Elem()
}

func (o VSphereArrayOutput) ToVSphereArrayOutput() VSphereArrayOutput {
	return o
}

func (o VSphereArrayOutput) ToVSphereArrayOutputWithContext(ctx context.Context) VSphereArrayOutput {
	return o
}

func (o VSphereArrayOutput) Index(i pulumi.IntInput) VSphereOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VSphere {
		return vs[0].([]*VSphere)[vs[1].(int)]
	}).(VSphereOutput)
}

type VSphereMapOutput struct{ *pulumi.OutputState }

func (VSphereMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VSphere)(nil)).Elem()
}

func (o VSphereMapOutput) ToVSphereMapOutput() VSphereMapOutput {
	return o
}

func (o VSphereMapOutput) ToVSphereMapOutputWithContext(ctx context.Context) VSphereMapOutput {
	return o
}

func (o VSphereMapOutput) MapIndex(k pulumi.StringInput) VSphereOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VSphere {
		return vs[0].(map[string]*VSphere)[vs[1].(string)]
	}).(VSphereOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereInput)(nil)).Elem(), &VSphere{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereArrayInput)(nil)).Elem(), VSphereArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereMapInput)(nil)).Elem(), VSphereMap{})
	pulumi.RegisterOutputType(VSphereOutput{})
	pulumi.RegisterOutputType(VSphereArrayOutput{})
	pulumi.RegisterOutputType(VSphereMapOutput{})
}
