// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a VMware vRealize Automation (vRA) cloud template resource, formerly known as a blueprint.
//
// ## Example Usage
//
// The following example shows how to create a blueprint resource.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/schmidtw/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewBlueprint(ctx, "this", &vra.BlueprintArgs{
//				Description: pulumi.String("Created by vRA terraform provider"),
//				ProjectId:   pulumi.Any(vra_project.This.Id),
//				Content: pulumi.String(fmt.Sprintf(`formatVersion: 1
//
// inputs:
//
//	image:
//	  type: string
//	  description: "Image"
//	flavor:
//	  type: string
//	  description: "Flavor"
//
// resources:
//
//	Machine:
//	  type: Cloud.Machine
//	  properties:
//	    image: %v
//	    flavor: %v
//
// `, input.Image, input.Flavor)),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # To import the cloud template, use the ID as in the following example
//
// ```sh
//
//	$ pulumi import vra:index/blueprint:Blueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type Blueprint struct {
	pulumi.CustomResourceState

	// Blueprint YAML content.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// ID of content source.
	ContentSourceId pulumi.StringOutput `pulumi:"contentSourceId"`
	// Content source path.
	ContentSourcePath pulumi.StringOutput `pulumi:"contentSourcePath"`
	// Date when content source was last synced. The date is in ISO 8601 and UTC.
	ContentSourceSyncAt pulumi.StringOutput `pulumi:"contentSourceSyncAt"`
	// Content source last sync messages.
	ContentSourceSyncMessages pulumi.StringArrayOutput `pulumi:"contentSourceSyncMessages"`
	// Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
	ContentSourceSyncStatus pulumi.StringOutput `pulumi:"contentSourceSyncStatus"`
	// Content source type.
	ContentSourceType pulumi.StringOutput `pulumi:"contentSourceType"`
	// Date when entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The user who created entity.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Human-friendly description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// ID of project that entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Name of project that entity belongs to.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
	RequestScopeOrg pulumi.BoolOutput `pulumi:"requestScopeOrg"`
	// HATEOAS of entity.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Total number of released versions.
	TotalReleasedVersions pulumi.IntOutput `pulumi:"totalReleasedVersions"`
	// Total number of versions.
	TotalVersions pulumi.IntOutput `pulumi:"totalVersions"`
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The user who last updated the entity.
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
	// Flag to indicate if the current content of the cloud template/blueprint is valid.
	Valid pulumi.BoolOutput `pulumi:"valid"`
	// List of validations messages.
	// * message - Validation message.
	ValidationMessages BlueprintValidationMessageArrayOutput `pulumi:"validationMessages"`
}

// NewBlueprint registers a new resource with the given unique name, arguments, and options.
func NewBlueprint(ctx *pulumi.Context,
	name string, args *BlueprintArgs, opts ...pulumi.ResourceOption) (*Blueprint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Blueprint
	err := ctx.RegisterResource("vra:index/blueprint:Blueprint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlueprint gets an existing Blueprint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlueprint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlueprintState, opts ...pulumi.ResourceOption) (*Blueprint, error) {
	var resource Blueprint
	err := ctx.ReadResource("vra:index/blueprint:Blueprint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Blueprint resources.
type blueprintState struct {
	// Blueprint YAML content.
	Content *string `pulumi:"content"`
	// ID of content source.
	ContentSourceId *string `pulumi:"contentSourceId"`
	// Content source path.
	ContentSourcePath *string `pulumi:"contentSourcePath"`
	// Date when content source was last synced. The date is in ISO 8601 and UTC.
	ContentSourceSyncAt *string `pulumi:"contentSourceSyncAt"`
	// Content source last sync messages.
	ContentSourceSyncMessages []string `pulumi:"contentSourceSyncMessages"`
	// Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
	ContentSourceSyncStatus *string `pulumi:"contentSourceSyncStatus"`
	// Content source type.
	ContentSourceType *string `pulumi:"contentSourceType"`
	// Date when entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The user who created entity.
	CreatedBy *string `pulumi:"createdBy"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// ID of project that entity belongs to.
	ProjectId *string `pulumi:"projectId"`
	// Name of project that entity belongs to.
	ProjectName *string `pulumi:"projectName"`
	// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
	RequestScopeOrg *bool `pulumi:"requestScopeOrg"`
	// HATEOAS of entity.
	SelfLink *string `pulumi:"selfLink"`
	// Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
	Status *string `pulumi:"status"`
	// Total number of released versions.
	TotalReleasedVersions *int `pulumi:"totalReleasedVersions"`
	// Total number of versions.
	TotalVersions *int `pulumi:"totalVersions"`
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The user who last updated the entity.
	UpdatedBy *string `pulumi:"updatedBy"`
	// Flag to indicate if the current content of the cloud template/blueprint is valid.
	Valid *bool `pulumi:"valid"`
	// List of validations messages.
	// * message - Validation message.
	ValidationMessages []BlueprintValidationMessage `pulumi:"validationMessages"`
}

type BlueprintState struct {
	// Blueprint YAML content.
	Content pulumi.StringPtrInput
	// ID of content source.
	ContentSourceId pulumi.StringPtrInput
	// Content source path.
	ContentSourcePath pulumi.StringPtrInput
	// Date when content source was last synced. The date is in ISO 8601 and UTC.
	ContentSourceSyncAt pulumi.StringPtrInput
	// Content source last sync messages.
	ContentSourceSyncMessages pulumi.StringArrayInput
	// Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
	ContentSourceSyncStatus pulumi.StringPtrInput
	// Content source type.
	ContentSourceType pulumi.StringPtrInput
	// Date when entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringPtrInput
	// The user who created entity.
	CreatedBy pulumi.StringPtrInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of organization that entity belongs to.
	OrgId pulumi.StringPtrInput
	// ID of project that entity belongs to.
	ProjectId pulumi.StringPtrInput
	// Name of project that entity belongs to.
	ProjectName pulumi.StringPtrInput
	// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
	RequestScopeOrg pulumi.BoolPtrInput
	// HATEOAS of entity.
	SelfLink pulumi.StringPtrInput
	// Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
	Status pulumi.StringPtrInput
	// Total number of released versions.
	TotalReleasedVersions pulumi.IntPtrInput
	// Total number of versions.
	TotalVersions pulumi.IntPtrInput
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
	// The user who last updated the entity.
	UpdatedBy pulumi.StringPtrInput
	// Flag to indicate if the current content of the cloud template/blueprint is valid.
	Valid pulumi.BoolPtrInput
	// List of validations messages.
	// * message - Validation message.
	ValidationMessages BlueprintValidationMessageArrayInput
}

func (BlueprintState) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintState)(nil)).Elem()
}

type blueprintArgs struct {
	// Blueprint YAML content.
	Content *string `pulumi:"content"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of project that entity belongs to.
	ProjectId string `pulumi:"projectId"`
	// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
	RequestScopeOrg *bool `pulumi:"requestScopeOrg"`
}

// The set of arguments for constructing a Blueprint resource.
type BlueprintArgs struct {
	// Blueprint YAML content.
	Content pulumi.StringPtrInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of project that entity belongs to.
	ProjectId pulumi.StringInput
	// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
	RequestScopeOrg pulumi.BoolPtrInput
}

func (BlueprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blueprintArgs)(nil)).Elem()
}

type BlueprintInput interface {
	pulumi.Input

	ToBlueprintOutput() BlueprintOutput
	ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput
}

func (*Blueprint) ElementType() reflect.Type {
	return reflect.TypeOf((**Blueprint)(nil)).Elem()
}

func (i *Blueprint) ToBlueprintOutput() BlueprintOutput {
	return i.ToBlueprintOutputWithContext(context.Background())
}

func (i *Blueprint) ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintOutput)
}

// BlueprintArrayInput is an input type that accepts BlueprintArray and BlueprintArrayOutput values.
// You can construct a concrete instance of `BlueprintArrayInput` via:
//
//	BlueprintArray{ BlueprintArgs{...} }
type BlueprintArrayInput interface {
	pulumi.Input

	ToBlueprintArrayOutput() BlueprintArrayOutput
	ToBlueprintArrayOutputWithContext(context.Context) BlueprintArrayOutput
}

type BlueprintArray []BlueprintInput

func (BlueprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Blueprint)(nil)).Elem()
}

func (i BlueprintArray) ToBlueprintArrayOutput() BlueprintArrayOutput {
	return i.ToBlueprintArrayOutputWithContext(context.Background())
}

func (i BlueprintArray) ToBlueprintArrayOutputWithContext(ctx context.Context) BlueprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintArrayOutput)
}

// BlueprintMapInput is an input type that accepts BlueprintMap and BlueprintMapOutput values.
// You can construct a concrete instance of `BlueprintMapInput` via:
//
//	BlueprintMap{ "key": BlueprintArgs{...} }
type BlueprintMapInput interface {
	pulumi.Input

	ToBlueprintMapOutput() BlueprintMapOutput
	ToBlueprintMapOutputWithContext(context.Context) BlueprintMapOutput
}

type BlueprintMap map[string]BlueprintInput

func (BlueprintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Blueprint)(nil)).Elem()
}

func (i BlueprintMap) ToBlueprintMapOutput() BlueprintMapOutput {
	return i.ToBlueprintMapOutputWithContext(context.Background())
}

func (i BlueprintMap) ToBlueprintMapOutputWithContext(ctx context.Context) BlueprintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueprintMapOutput)
}

type BlueprintOutput struct{ *pulumi.OutputState }

func (BlueprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Blueprint)(nil)).Elem()
}

func (o BlueprintOutput) ToBlueprintOutput() BlueprintOutput {
	return o
}

func (o BlueprintOutput) ToBlueprintOutputWithContext(ctx context.Context) BlueprintOutput {
	return o
}

// Blueprint YAML content.
func (o BlueprintOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// ID of content source.
func (o BlueprintOutput) ContentSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ContentSourceId }).(pulumi.StringOutput)
}

// Content source path.
func (o BlueprintOutput) ContentSourcePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ContentSourcePath }).(pulumi.StringOutput)
}

// Date when content source was last synced. The date is in ISO 8601 and UTC.
func (o BlueprintOutput) ContentSourceSyncAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ContentSourceSyncAt }).(pulumi.StringOutput)
}

// Content source last sync messages.
func (o BlueprintOutput) ContentSourceSyncMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringArrayOutput { return v.ContentSourceSyncMessages }).(pulumi.StringArrayOutput)
}

// Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
func (o BlueprintOutput) ContentSourceSyncStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ContentSourceSyncStatus }).(pulumi.StringOutput)
}

// Content source type.
func (o BlueprintOutput) ContentSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ContentSourceType }).(pulumi.StringOutput)
}

// Date when entity was created. The date is in ISO 8601 and UTC.
func (o BlueprintOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The user who created entity.
func (o BlueprintOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o BlueprintOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o BlueprintOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of organization that entity belongs to.
func (o BlueprintOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// ID of project that entity belongs to.
func (o BlueprintOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Name of project that entity belongs to.
func (o BlueprintOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
func (o BlueprintOutput) RequestScopeOrg() pulumi.BoolOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.BoolOutput { return v.RequestScopeOrg }).(pulumi.BoolOutput)
}

// HATEOAS of entity.
func (o BlueprintOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
func (o BlueprintOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Total number of released versions.
func (o BlueprintOutput) TotalReleasedVersions() pulumi.IntOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.IntOutput { return v.TotalReleasedVersions }).(pulumi.IntOutput)
}

// Total number of versions.
func (o BlueprintOutput) TotalVersions() pulumi.IntOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.IntOutput { return v.TotalVersions }).(pulumi.IntOutput)
}

// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
func (o BlueprintOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The user who last updated the entity.
func (o BlueprintOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

// Flag to indicate if the current content of the cloud template/blueprint is valid.
func (o BlueprintOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v *Blueprint) pulumi.BoolOutput { return v.Valid }).(pulumi.BoolOutput)
}

// List of validations messages.
// * message - Validation message.
func (o BlueprintOutput) ValidationMessages() BlueprintValidationMessageArrayOutput {
	return o.ApplyT(func(v *Blueprint) BlueprintValidationMessageArrayOutput { return v.ValidationMessages }).(BlueprintValidationMessageArrayOutput)
}

type BlueprintArrayOutput struct{ *pulumi.OutputState }

func (BlueprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Blueprint)(nil)).Elem()
}

func (o BlueprintArrayOutput) ToBlueprintArrayOutput() BlueprintArrayOutput {
	return o
}

func (o BlueprintArrayOutput) ToBlueprintArrayOutputWithContext(ctx context.Context) BlueprintArrayOutput {
	return o
}

func (o BlueprintArrayOutput) Index(i pulumi.IntInput) BlueprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Blueprint {
		return vs[0].([]*Blueprint)[vs[1].(int)]
	}).(BlueprintOutput)
}

type BlueprintMapOutput struct{ *pulumi.OutputState }

func (BlueprintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Blueprint)(nil)).Elem()
}

func (o BlueprintMapOutput) ToBlueprintMapOutput() BlueprintMapOutput {
	return o
}

func (o BlueprintMapOutput) ToBlueprintMapOutputWithContext(ctx context.Context) BlueprintMapOutput {
	return o
}

func (o BlueprintMapOutput) MapIndex(k pulumi.StringInput) BlueprintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Blueprint {
		return vs[0].(map[string]*Blueprint)[vs[1].(string)]
	}).(BlueprintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintInput)(nil)).Elem(), &Blueprint{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintArrayInput)(nil)).Elem(), BlueprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueprintMapInput)(nil)).Elem(), BlueprintMap{})
	pulumi.RegisterOutputType(BlueprintOutput{})
	pulumi.RegisterOutputType(BlueprintArrayOutput{})
	pulumi.RegisterOutputType(BlueprintMapOutput{})
}
