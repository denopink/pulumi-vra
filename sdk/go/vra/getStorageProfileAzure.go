// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile azure resource.
//
// **Storage profile azure data source by its id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.LookupStorageProfileAzure(ctx, &GetStorageProfileAzureArgs{
//				Id: pulumi.StringRef(vra_storage_profile_azure.This.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// **Vra storage profile data source filter by external region id:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.LookupStorageProfileAzure(ctx, &GetStorageProfileAzureArgs{
//				Filter: pulumi.StringRef("externalRegionId eq 'foobar'"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile azure data source supports the following arguments:
func LookupStorageProfileAzure(ctx *pulumi.Context, args *LookupStorageProfileAzureArgs, opts ...pulumi.InvokeOption) (*LookupStorageProfileAzureResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupStorageProfileAzureResult
	err := ctx.Invoke("vra:index/getStorageProfileAzure:getStorageProfileAzure", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorageProfileAzure.
type LookupStorageProfileAzureArgs struct {
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter *string `pulumi:"filter"`
	// The id of the image profile instance.
	Id *string `pulumi:"id"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetStorageProfileAzureTag `pulumi:"tags"`
}

// A collection of values returned by getStorageProfileAzure.
type LookupStorageProfileAzureResult struct {
	CloudAccountId string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates the caching mechanism for additional disk.
	DataDiskCaching string `pulumi:"dataDiskCaching"`
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description string `pulumi:"description"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType string `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId string  `pulumi:"externalRegionId"`
	Filter           *string `pulumi:"filter"`
	Id               string  `pulumi:"id"`
	// HATEOAS of the entity
	Links []GetStorageProfileAzureLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name  string `pulumi:"name"`
	OrgId string `pulumi:"orgId"`
	// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
	OsDiskCaching string `pulumi:"osDiskCaching"`
	// Email of the user that owns the entity.
	Owner string `pulumi:"owner"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []GetStorageProfileAzureTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupStorageProfileAzureOutput(ctx *pulumi.Context, args LookupStorageProfileAzureOutputArgs, opts ...pulumi.InvokeOption) LookupStorageProfileAzureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStorageProfileAzureResult, error) {
			args := v.(LookupStorageProfileAzureArgs)
			r, err := LookupStorageProfileAzure(ctx, &args, opts...)
			var s LookupStorageProfileAzureResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStorageProfileAzureResultOutput)
}

// A collection of arguments for invoking getStorageProfileAzure.
type LookupStorageProfileAzureOutputArgs struct {
	// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The id of the image profile instance.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags GetStorageProfileAzureTagArrayInput `pulumi:"tags"`
}

func (LookupStorageProfileAzureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageProfileAzureArgs)(nil)).Elem()
}

// A collection of values returned by getStorageProfileAzure.
type LookupStorageProfileAzureResultOutput struct{ *pulumi.OutputState }

func (LookupStorageProfileAzureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStorageProfileAzureResult)(nil)).Elem()
}

func (o LookupStorageProfileAzureResultOutput) ToLookupStorageProfileAzureResultOutput() LookupStorageProfileAzureResultOutput {
	return o
}

func (o LookupStorageProfileAzureResultOutput) ToLookupStorageProfileAzureResultOutputWithContext(ctx context.Context) LookupStorageProfileAzureResultOutput {
	return o
}

func (o LookupStorageProfileAzureResultOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o LookupStorageProfileAzureResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates the caching mechanism for additional disk.
func (o LookupStorageProfileAzureResultOutput) DataDiskCaching() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.DataDiskCaching }).(pulumi.StringOutput)
}

// Indicates if this storage profile is a default profile.
func (o LookupStorageProfileAzureResultOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) bool { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o LookupStorageProfileAzureResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
func (o LookupStorageProfileAzureResultOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.DiskType }).(pulumi.StringOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o LookupStorageProfileAzureResultOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.ExternalRegionId }).(pulumi.StringOutput)
}

func (o LookupStorageProfileAzureResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o LookupStorageProfileAzureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.Id }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o LookupStorageProfileAzureResultOutput) Links() GetStorageProfileAzureLinkArrayOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) []GetStorageProfileAzureLink { return v.Links }).(GetStorageProfileAzureLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o LookupStorageProfileAzureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupStorageProfileAzureResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
func (o LookupStorageProfileAzureResultOutput) OsDiskCaching() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.OsDiskCaching }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o LookupStorageProfileAzureResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.Owner }).(pulumi.StringOutput)
}

// Indicates whether this storage policy should support encryption or not.
func (o LookupStorageProfileAzureResultOutput) SupportsEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) bool { return v.SupportsEncryption }).(pulumi.BoolOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o LookupStorageProfileAzureResultOutput) Tags() GetStorageProfileAzureTagArrayOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) []GetStorageProfileAzureTag { return v.Tags }).(GetStorageProfileAzureTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o LookupStorageProfileAzureResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStorageProfileAzureResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStorageProfileAzureResultOutput{})
}
