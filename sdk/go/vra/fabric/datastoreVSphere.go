// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Updates a VMware vRealize Automation fabricDatastoreVsphere resource.
//
// ## Example Usage
// ### S
//
// You cannot create a fabric datastore vSphere resource, however you can import it using the command specified in the import section below.
//
// Once a resource is imported, you can update it as shown below:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vra/sdk/go/vra/fabric"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/fabric"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fabric.NewDatastoreVSphere(ctx, "this", &fabric.DatastoreVSphereArgs{
// 			Tags: fabric.DatastoreVSphereTagArray{
// 				&fabric.DatastoreVSphereTagArgs{
// 					Key:   pulumi.String("foo"),
// 					Value: pulumi.String("bar"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// To import the fabric datastore vSphere resource, use the ID as in the following example
//
// ```sh
//  $ pulumi import vra:fabric/datastoreVSphere:DatastoreVSphere this 8e0c9a4c-3ab8-48e8-b9d5-0751c871e282
// ```
type DatastoreVSphere struct {
	pulumi.CustomResourceState

	// Set of ids of the cloud accounts this entity belongs to.
	CloudAccountIds pulumi.StringArrayOutput `pulumi:"cloudAccountIds"`
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A human-friendly description.
	Description pulumi.StringOutput `pulumi:"description"`
	// External entity Id on the provider side.
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// Id of datacenter in which the datastore is present.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// Indicates free size available in datastore.
	FreeSizeGb pulumi.StringOutput `pulumi:"freeSizeGb"`
	// HATEOAS of the entity
	Links DatastoreVSphereLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// A set of tag keys and optional values that were set on this resource:
	Tags DatastoreVSphereTagArrayOutput `pulumi:"tags"`
	// Type of datastore.
	Type pulumi.StringOutput `pulumi:"type"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDatastoreVSphere registers a new resource with the given unique name, arguments, and options.
func NewDatastoreVSphere(ctx *pulumi.Context,
	name string, args *DatastoreVSphereArgs, opts ...pulumi.ResourceOption) (*DatastoreVSphere, error) {
	if args == nil {
		args = &DatastoreVSphereArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource DatastoreVSphere
	err := ctx.RegisterResource("vra:fabric/datastoreVSphere:DatastoreVSphere", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastoreVSphere gets an existing DatastoreVSphere resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastoreVSphere(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreVSphereState, opts ...pulumi.ResourceOption) (*DatastoreVSphere, error) {
	var resource DatastoreVSphere
	err := ctx.ReadResource("vra:fabric/datastoreVSphere:DatastoreVSphere", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatastoreVSphere resources.
type datastoreVSphereState struct {
	// Set of ids of the cloud accounts this entity belongs to.
	CloudAccountIds []string `pulumi:"cloudAccountIds"`
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// External entity Id on the provider side.
	ExternalId *string `pulumi:"externalId"`
	// Id of datacenter in which the datastore is present.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// Indicates free size available in datastore.
	FreeSizeGb *string `pulumi:"freeSizeGb"`
	// HATEOAS of the entity
	Links []DatastoreVSphereLink `pulumi:"links"`
	// A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// A set of tag keys and optional values that were set on this resource:
	Tags []DatastoreVSphereTag `pulumi:"tags"`
	// Type of datastore.
	Type *string `pulumi:"type"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type DatastoreVSphereState struct {
	// Set of ids of the cloud accounts this entity belongs to.
	CloudAccountIds pulumi.StringArrayInput
	// Date when the entity was created. The date is in ISO 8601 and UTC.
	CreatedAt pulumi.StringPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// External entity Id on the provider side.
	ExternalId pulumi.StringPtrInput
	// Id of datacenter in which the datastore is present.
	ExternalRegionId pulumi.StringPtrInput
	// Indicates free size available in datastore.
	FreeSizeGb pulumi.StringPtrInput
	// HATEOAS of the entity
	Links DatastoreVSphereLinkArrayInput
	// A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// A set of tag keys and optional values that were set on this resource:
	Tags DatastoreVSphereTagArrayInput
	// Type of datastore.
	Type pulumi.StringPtrInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (DatastoreVSphereState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreVSphereState)(nil)).Elem()
}

type datastoreVSphereArgs struct {
	// A set of tag keys and optional values that were set on this resource:
	Tags []DatastoreVSphereTag `pulumi:"tags"`
}

// The set of arguments for constructing a DatastoreVSphere resource.
type DatastoreVSphereArgs struct {
	// A set of tag keys and optional values that were set on this resource:
	Tags DatastoreVSphereTagArrayInput
}

func (DatastoreVSphereArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreVSphereArgs)(nil)).Elem()
}

type DatastoreVSphereInput interface {
	pulumi.Input

	ToDatastoreVSphereOutput() DatastoreVSphereOutput
	ToDatastoreVSphereOutputWithContext(ctx context.Context) DatastoreVSphereOutput
}

func (*DatastoreVSphere) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreVSphere)(nil)).Elem()
}

func (i *DatastoreVSphere) ToDatastoreVSphereOutput() DatastoreVSphereOutput {
	return i.ToDatastoreVSphereOutputWithContext(context.Background())
}

func (i *DatastoreVSphere) ToDatastoreVSphereOutputWithContext(ctx context.Context) DatastoreVSphereOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreVSphereOutput)
}

// DatastoreVSphereArrayInput is an input type that accepts DatastoreVSphereArray and DatastoreVSphereArrayOutput values.
// You can construct a concrete instance of `DatastoreVSphereArrayInput` via:
//
//          DatastoreVSphereArray{ DatastoreVSphereArgs{...} }
type DatastoreVSphereArrayInput interface {
	pulumi.Input

	ToDatastoreVSphereArrayOutput() DatastoreVSphereArrayOutput
	ToDatastoreVSphereArrayOutputWithContext(context.Context) DatastoreVSphereArrayOutput
}

type DatastoreVSphereArray []DatastoreVSphereInput

func (DatastoreVSphereArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreVSphere)(nil)).Elem()
}

func (i DatastoreVSphereArray) ToDatastoreVSphereArrayOutput() DatastoreVSphereArrayOutput {
	return i.ToDatastoreVSphereArrayOutputWithContext(context.Background())
}

func (i DatastoreVSphereArray) ToDatastoreVSphereArrayOutputWithContext(ctx context.Context) DatastoreVSphereArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreVSphereArrayOutput)
}

// DatastoreVSphereMapInput is an input type that accepts DatastoreVSphereMap and DatastoreVSphereMapOutput values.
// You can construct a concrete instance of `DatastoreVSphereMapInput` via:
//
//          DatastoreVSphereMap{ "key": DatastoreVSphereArgs{...} }
type DatastoreVSphereMapInput interface {
	pulumi.Input

	ToDatastoreVSphereMapOutput() DatastoreVSphereMapOutput
	ToDatastoreVSphereMapOutputWithContext(context.Context) DatastoreVSphereMapOutput
}

type DatastoreVSphereMap map[string]DatastoreVSphereInput

func (DatastoreVSphereMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreVSphere)(nil)).Elem()
}

func (i DatastoreVSphereMap) ToDatastoreVSphereMapOutput() DatastoreVSphereMapOutput {
	return i.ToDatastoreVSphereMapOutputWithContext(context.Background())
}

func (i DatastoreVSphereMap) ToDatastoreVSphereMapOutputWithContext(ctx context.Context) DatastoreVSphereMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreVSphereMapOutput)
}

type DatastoreVSphereOutput struct{ *pulumi.OutputState }

func (DatastoreVSphereOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreVSphere)(nil)).Elem()
}

func (o DatastoreVSphereOutput) ToDatastoreVSphereOutput() DatastoreVSphereOutput {
	return o
}

func (o DatastoreVSphereOutput) ToDatastoreVSphereOutputWithContext(ctx context.Context) DatastoreVSphereOutput {
	return o
}

// Set of ids of the cloud accounts this entity belongs to.
func (o DatastoreVSphereOutput) CloudAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringArrayOutput { return v.CloudAccountIds }).(pulumi.StringArrayOutput)
}

// Date when the entity was created. The date is in ISO 8601 and UTC.
func (o DatastoreVSphereOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A human-friendly description.
func (o DatastoreVSphereOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// External entity Id on the provider side.
func (o DatastoreVSphereOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// Id of datacenter in which the datastore is present.
func (o DatastoreVSphereOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// Indicates free size available in datastore.
func (o DatastoreVSphereOutput) FreeSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.FreeSizeGb }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o DatastoreVSphereOutput) Links() DatastoreVSphereLinkArrayOutput {
	return o.ApplyT(func(v *DatastoreVSphere) DatastoreVSphereLinkArrayOutput { return v.Links }).(DatastoreVSphereLinkArrayOutput)
}

// A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
func (o DatastoreVSphereOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o DatastoreVSphereOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o DatastoreVSphereOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// A set of tag keys and optional values that were set on this resource:
func (o DatastoreVSphereOutput) Tags() DatastoreVSphereTagArrayOutput {
	return o.ApplyT(func(v *DatastoreVSphere) DatastoreVSphereTagArrayOutput { return v.Tags }).(DatastoreVSphereTagArrayOutput)
}

// Type of datastore.
func (o DatastoreVSphereOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o DatastoreVSphereOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DatastoreVSphere) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DatastoreVSphereArrayOutput struct{ *pulumi.OutputState }

func (DatastoreVSphereArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatastoreVSphere)(nil)).Elem()
}

func (o DatastoreVSphereArrayOutput) ToDatastoreVSphereArrayOutput() DatastoreVSphereArrayOutput {
	return o
}

func (o DatastoreVSphereArrayOutput) ToDatastoreVSphereArrayOutputWithContext(ctx context.Context) DatastoreVSphereArrayOutput {
	return o
}

func (o DatastoreVSphereArrayOutput) Index(i pulumi.IntInput) DatastoreVSphereOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatastoreVSphere {
		return vs[0].([]*DatastoreVSphere)[vs[1].(int)]
	}).(DatastoreVSphereOutput)
}

type DatastoreVSphereMapOutput struct{ *pulumi.OutputState }

func (DatastoreVSphereMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatastoreVSphere)(nil)).Elem()
}

func (o DatastoreVSphereMapOutput) ToDatastoreVSphereMapOutput() DatastoreVSphereMapOutput {
	return o
}

func (o DatastoreVSphereMapOutput) ToDatastoreVSphereMapOutputWithContext(ctx context.Context) DatastoreVSphereMapOutput {
	return o
}

func (o DatastoreVSphereMapOutput) MapIndex(k pulumi.StringInput) DatastoreVSphereOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatastoreVSphere {
		return vs[0].(map[string]*DatastoreVSphere)[vs[1].(string)]
	}).(DatastoreVSphereOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreVSphereInput)(nil)).Elem(), &DatastoreVSphere{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreVSphereArrayInput)(nil)).Elem(), DatastoreVSphereArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreVSphereMapInput)(nil)).Elem(), DatastoreVSphereMap{})
	pulumi.RegisterOutputType(DatastoreVSphereOutput{})
	pulumi.RegisterOutputType(DatastoreVSphereArrayOutput{})
	pulumi.RegisterOutputType(DatastoreVSphereMapOutput{})
}
