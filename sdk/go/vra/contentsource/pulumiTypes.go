// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contentsource

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContentSourceConfig struct {
	// Content source branch name.
	Branch *string `pulumi:"branch"`
	// Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
	ContentType *string `pulumi:"contentType"`
	// Content source integration id as seen in vRA integrations.
	IntegrationId string `pulumi:"integrationId"`
	// Path to refer to in the content source repository and branch.
	Path string `pulumi:"path"`
	// Name of the project.
	ProjectName string `pulumi:"projectName"`
	// Content source repository.
	Repository *string `pulumi:"repository"`
}

// ContentSourceConfigInput is an input type that accepts ContentSourceConfigArgs and ContentSourceConfigOutput values.
// You can construct a concrete instance of `ContentSourceConfigInput` via:
//
//          ContentSourceConfigArgs{...}
type ContentSourceConfigInput interface {
	pulumi.Input

	ToContentSourceConfigOutput() ContentSourceConfigOutput
	ToContentSourceConfigOutputWithContext(context.Context) ContentSourceConfigOutput
}

type ContentSourceConfigArgs struct {
	// Content source branch name.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Content source integration id as seen in vRA integrations.
	IntegrationId pulumi.StringInput `pulumi:"integrationId"`
	// Path to refer to in the content source repository and branch.
	Path pulumi.StringInput `pulumi:"path"`
	// Name of the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Content source repository.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (ContentSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentSourceConfig)(nil)).Elem()
}

func (i ContentSourceConfigArgs) ToContentSourceConfigOutput() ContentSourceConfigOutput {
	return i.ToContentSourceConfigOutputWithContext(context.Background())
}

func (i ContentSourceConfigArgs) ToContentSourceConfigOutputWithContext(ctx context.Context) ContentSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceConfigOutput)
}

func (i ContentSourceConfigArgs) ToContentSourceConfigPtrOutput() ContentSourceConfigPtrOutput {
	return i.ToContentSourceConfigPtrOutputWithContext(context.Background())
}

func (i ContentSourceConfigArgs) ToContentSourceConfigPtrOutputWithContext(ctx context.Context) ContentSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceConfigOutput).ToContentSourceConfigPtrOutputWithContext(ctx)
}

// ContentSourceConfigPtrInput is an input type that accepts ContentSourceConfigArgs, ContentSourceConfigPtr and ContentSourceConfigPtrOutput values.
// You can construct a concrete instance of `ContentSourceConfigPtrInput` via:
//
//          ContentSourceConfigArgs{...}
//
//  or:
//
//          nil
type ContentSourceConfigPtrInput interface {
	pulumi.Input

	ToContentSourceConfigPtrOutput() ContentSourceConfigPtrOutput
	ToContentSourceConfigPtrOutputWithContext(context.Context) ContentSourceConfigPtrOutput
}

type contentSourceConfigPtrType ContentSourceConfigArgs

func ContentSourceConfigPtr(v *ContentSourceConfigArgs) ContentSourceConfigPtrInput {
	return (*contentSourceConfigPtrType)(v)
}

func (*contentSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentSourceConfig)(nil)).Elem()
}

func (i *contentSourceConfigPtrType) ToContentSourceConfigPtrOutput() ContentSourceConfigPtrOutput {
	return i.ToContentSourceConfigPtrOutputWithContext(context.Background())
}

func (i *contentSourceConfigPtrType) ToContentSourceConfigPtrOutputWithContext(ctx context.Context) ContentSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceConfigPtrOutput)
}

type ContentSourceConfigOutput struct{ *pulumi.OutputState }

func (ContentSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentSourceConfig)(nil)).Elem()
}

func (o ContentSourceConfigOutput) ToContentSourceConfigOutput() ContentSourceConfigOutput {
	return o
}

func (o ContentSourceConfigOutput) ToContentSourceConfigOutputWithContext(ctx context.Context) ContentSourceConfigOutput {
	return o
}

func (o ContentSourceConfigOutput) ToContentSourceConfigPtrOutput() ContentSourceConfigPtrOutput {
	return o.ToContentSourceConfigPtrOutputWithContext(context.Background())
}

func (o ContentSourceConfigOutput) ToContentSourceConfigPtrOutputWithContext(ctx context.Context) ContentSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentSourceConfig) *ContentSourceConfig {
		return &v
	}).(ContentSourceConfigPtrOutput)
}

// Content source branch name.
func (o ContentSourceConfigOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSourceConfig) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
func (o ContentSourceConfigOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSourceConfig) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Content source integration id as seen in vRA integrations.
func (o ContentSourceConfigOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSourceConfig) string { return v.IntegrationId }).(pulumi.StringOutput)
}

// Path to refer to in the content source repository and branch.
func (o ContentSourceConfigOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSourceConfig) string { return v.Path }).(pulumi.StringOutput)
}

// Name of the project.
func (o ContentSourceConfigOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSourceConfig) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Content source repository.
func (o ContentSourceConfigOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSourceConfig) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type ContentSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (ContentSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentSourceConfig)(nil)).Elem()
}

func (o ContentSourceConfigPtrOutput) ToContentSourceConfigPtrOutput() ContentSourceConfigPtrOutput {
	return o
}

func (o ContentSourceConfigPtrOutput) ToContentSourceConfigPtrOutputWithContext(ctx context.Context) ContentSourceConfigPtrOutput {
	return o
}

func (o ContentSourceConfigPtrOutput) Elem() ContentSourceConfigOutput {
	return o.ApplyT(func(v *ContentSourceConfig) ContentSourceConfig {
		if v != nil {
			return *v
		}
		var ret ContentSourceConfig
		return ret
	}).(ContentSourceConfigOutput)
}

// Content source branch name.
func (o ContentSourceConfigPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
func (o ContentSourceConfigPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Content source integration id as seen in vRA integrations.
func (o ContentSourceConfigPtrOutput) IntegrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.IntegrationId
	}).(pulumi.StringPtrOutput)
}

// Path to refer to in the content source repository and branch.
func (o ContentSourceConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Name of the project.
func (o ContentSourceConfigPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// Content source repository.
func (o ContentSourceConfigPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSourceConfig) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentSourceConfigInput)(nil)).Elem(), ContentSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentSourceConfigPtrInput)(nil)).Elem(), ContentSourceConfigArgs{})
	pulumi.RegisterOutputType(ContentSourceConfigOutput{})
	pulumi.RegisterOutputType(ContentSourceConfigPtrOutput{})
}
