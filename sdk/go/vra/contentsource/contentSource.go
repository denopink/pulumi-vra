// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contentsource

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides a way to create a content source vRealize Automation(vRA).
//
// ## Example Usage
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/contentsource"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/contentsource"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := contentsource.NewContentSource(ctx, "this", &contentsource.ContentSourceArgs{
//				ProjectId:   pulumi.Any(_var.Project_id),
//				TypeId:      pulumi.String("com.gitlab"),
//				Description: pulumi.String("Some content Source"),
//				SyncEnabled: pulumi.Bool(false),
//				Config: &contentsource.ContentSourceConfigArgs{
//					Path:          pulumi.String("blueprint01"),
//					Branch:        pulumi.String("master"),
//					Repository:    pulumi.String("vracontent/vra8_content_source_test"),
//					ContentType:   pulumi.String("BLUEPRINT"),
//					ProjectName:   pulumi.Any(_var.Project_name),
//					IntegrationId: pulumi.Any(_var.Integration_id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Content source can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import vra:contentsource/contentSource:ContentSource this 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type ContentSource struct {
	pulumi.CustomResourceState

	// Content source custom configuration.
	Config ContentSourceConfigOutput `pulumi:"config"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The user the entity was created by.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Date when the entity was last updated. The date is in ISO 6801 and UTC.
	LastUpdatedAt pulumi.StringOutput `pulumi:"lastUpdatedAt"`
	// The user the entity was last updated by.
	LastUpdatedBy pulumi.StringOutput `pulumi:"lastUpdatedBy"`
	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled pulumi.BoolOutput `pulumi:"syncEnabled"`
	// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
	TypeId pulumi.StringOutput `pulumi:"typeId"`
}

// NewContentSource registers a new resource with the given unique name, arguments, and options.
func NewContentSource(ctx *pulumi.Context,
	name string, args *ContentSourceArgs, opts ...pulumi.ResourceOption) (*ContentSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SyncEnabled == nil {
		return nil, errors.New("invalid value for required argument 'SyncEnabled'")
	}
	if args.TypeId == nil {
		return nil, errors.New("invalid value for required argument 'TypeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ContentSource
	err := ctx.RegisterResource("vra:contentsource/contentSource:ContentSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentSource gets an existing ContentSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentSourceState, opts ...pulumi.ResourceOption) (*ContentSource, error) {
	var resource ContentSource
	err := ctx.ReadResource("vra:contentsource/contentSource:ContentSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentSource resources.
type contentSourceState struct {
	// Content source custom configuration.
	Config *ContentSourceConfig `pulumi:"config"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// The user the entity was created by.
	CreatedBy *string `pulumi:"createdBy"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Date when the entity was last updated. The date is in ISO 6801 and UTC.
	LastUpdatedAt *string `pulumi:"lastUpdatedAt"`
	// The user the entity was last updated by.
	LastUpdatedBy *string `pulumi:"lastUpdatedBy"`
	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// The id of the project this entity belongs to.
	ProjectId *string `pulumi:"projectId"`
	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled *bool `pulumi:"syncEnabled"`
	// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
	TypeId *string `pulumi:"typeId"`
}

type ContentSourceState struct {
	// Content source custom configuration.
	Config ContentSourceConfigPtrInput
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// The user the entity was created by.
	CreatedBy pulumi.StringPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Date when the entity was last updated. The date is in ISO 6801 and UTC.
	LastUpdatedAt pulumi.StringPtrInput
	// The user the entity was last updated by.
	LastUpdatedBy pulumi.StringPtrInput
	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringPtrInput
	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled pulumi.BoolPtrInput
	// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
	TypeId pulumi.StringPtrInput
}

func (ContentSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentSourceState)(nil)).Elem()
}

type contentSourceArgs struct {
	// Content source custom configuration.
	Config ContentSourceConfig `pulumi:"config"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the project this entity belongs to.
	ProjectId string `pulumi:"projectId"`
	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled bool `pulumi:"syncEnabled"`
	// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
	TypeId string `pulumi:"typeId"`
}

// The set of arguments for constructing a ContentSource resource.
type ContentSourceArgs struct {
	// Content source custom configuration.
	Config ContentSourceConfigInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// A human-friendly name for content source used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the project this entity belongs to.
	ProjectId pulumi.StringInput
	// Flag indicating whether sync is enabled for this content source.
	SyncEnabled pulumi.BoolInput
	// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
	TypeId pulumi.StringInput
}

func (ContentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentSourceArgs)(nil)).Elem()
}

type ContentSourceInput interface {
	pulumi.Input

	ToContentSourceOutput() ContentSourceOutput
	ToContentSourceOutputWithContext(ctx context.Context) ContentSourceOutput
}

func (*ContentSource) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentSource)(nil)).Elem()
}

func (i *ContentSource) ToContentSourceOutput() ContentSourceOutput {
	return i.ToContentSourceOutputWithContext(context.Background())
}

func (i *ContentSource) ToContentSourceOutputWithContext(ctx context.Context) ContentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceOutput)
}

// ContentSourceArrayInput is an input type that accepts ContentSourceArray and ContentSourceArrayOutput values.
// You can construct a concrete instance of `ContentSourceArrayInput` via:
//
//	ContentSourceArray{ ContentSourceArgs{...} }
type ContentSourceArrayInput interface {
	pulumi.Input

	ToContentSourceArrayOutput() ContentSourceArrayOutput
	ToContentSourceArrayOutputWithContext(context.Context) ContentSourceArrayOutput
}

type ContentSourceArray []ContentSourceInput

func (ContentSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentSource)(nil)).Elem()
}

func (i ContentSourceArray) ToContentSourceArrayOutput() ContentSourceArrayOutput {
	return i.ToContentSourceArrayOutputWithContext(context.Background())
}

func (i ContentSourceArray) ToContentSourceArrayOutputWithContext(ctx context.Context) ContentSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceArrayOutput)
}

// ContentSourceMapInput is an input type that accepts ContentSourceMap and ContentSourceMapOutput values.
// You can construct a concrete instance of `ContentSourceMapInput` via:
//
//	ContentSourceMap{ "key": ContentSourceArgs{...} }
type ContentSourceMapInput interface {
	pulumi.Input

	ToContentSourceMapOutput() ContentSourceMapOutput
	ToContentSourceMapOutputWithContext(context.Context) ContentSourceMapOutput
}

type ContentSourceMap map[string]ContentSourceInput

func (ContentSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentSource)(nil)).Elem()
}

func (i ContentSourceMap) ToContentSourceMapOutput() ContentSourceMapOutput {
	return i.ToContentSourceMapOutputWithContext(context.Background())
}

func (i ContentSourceMap) ToContentSourceMapOutputWithContext(ctx context.Context) ContentSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSourceMapOutput)
}

type ContentSourceOutput struct{ *pulumi.OutputState }

func (ContentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentSource)(nil)).Elem()
}

func (o ContentSourceOutput) ToContentSourceOutput() ContentSourceOutput {
	return o
}

func (o ContentSourceOutput) ToContentSourceOutputWithContext(ctx context.Context) ContentSourceOutput {
	return o
}

// Content source custom configuration.
func (o ContentSourceOutput) Config() ContentSourceConfigOutput {
	return o.ApplyT(func(v *ContentSource) ContentSourceConfigOutput { return v.Config }).(ContentSourceConfigOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o ContentSourceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The user the entity was created by.
func (o ContentSourceOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// A human-friendly description.
func (o ContentSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Date when the entity was last updated. The date is in ISO 6801 and UTC.
func (o ContentSourceOutput) LastUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.LastUpdatedAt }).(pulumi.StringOutput)
}

// The user the entity was last updated by.
func (o ContentSourceOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// A human-friendly name for content source used as an identifier in APIs that support this option.
func (o ContentSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o ContentSourceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The id of the project this entity belongs to.
func (o ContentSourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Flag indicating whether sync is enabled for this content source.
func (o ContentSourceOutput) SyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.BoolOutput { return v.SyncEnabled }).(pulumi.BoolOutput)
}

// Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
func (o ContentSourceOutput) TypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentSource) pulumi.StringOutput { return v.TypeId }).(pulumi.StringOutput)
}

type ContentSourceArrayOutput struct{ *pulumi.OutputState }

func (ContentSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentSource)(nil)).Elem()
}

func (o ContentSourceArrayOutput) ToContentSourceArrayOutput() ContentSourceArrayOutput {
	return o
}

func (o ContentSourceArrayOutput) ToContentSourceArrayOutputWithContext(ctx context.Context) ContentSourceArrayOutput {
	return o
}

func (o ContentSourceArrayOutput) Index(i pulumi.IntInput) ContentSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentSource {
		return vs[0].([]*ContentSource)[vs[1].(int)]
	}).(ContentSourceOutput)
}

type ContentSourceMapOutput struct{ *pulumi.OutputState }

func (ContentSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentSource)(nil)).Elem()
}

func (o ContentSourceMapOutput) ToContentSourceMapOutput() ContentSourceMapOutput {
	return o
}

func (o ContentSourceMapOutput) ToContentSourceMapOutputWithContext(ctx context.Context) ContentSourceMapOutput {
	return o
}

func (o ContentSourceMapOutput) MapIndex(k pulumi.StringInput) ContentSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentSource {
		return vs[0].(map[string]*ContentSource)[vs[1].(string)]
	}).(ContentSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentSourceInput)(nil)).Elem(), &ContentSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentSourceArrayInput)(nil)).Elem(), ContentSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentSourceMapInput)(nil)).Elem(), ContentSourceMap{})
	pulumi.RegisterOutputType(ContentSourceOutput{})
	pulumi.RegisterOutputType(ContentSourceArrayOutput{})
	pulumi.RegisterOutputType(ContentSourceMapOutput{})
}
