// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a VMware vRealize Automation block device snapshot resource.
//
// ## Example Usage
// ### S
//
// The following example shows how to create a block device snapshot resource.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/schmidtw/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewBlockDeviceSnapshot(ctx, "snapshot1", &vra.BlockDeviceSnapshotArgs{
//				BlockDeviceId: pulumi.Any(_var.Block_device_id),
//				Description:   pulumi.String("terraform fcd snapshot"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BlockDeviceSnapshot struct {
	pulumi.CustomResourceState

	// ID of block device.
	BlockDeviceId pulumi.StringOutput `pulumi:"blockDeviceId"`
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates whether snapshot on block device is current.
	IsCurrent pulumi.BoolOutput `pulumi:"isCurrent"`
	// HATEOAS of entity
	Links BlockDeviceSnapshotLinkArrayOutput `pulumi:"links"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of entity owner.
	Owner     pulumi.StringOutput `pulumi:"owner"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewBlockDeviceSnapshot registers a new resource with the given unique name, arguments, and options.
func NewBlockDeviceSnapshot(ctx *pulumi.Context,
	name string, args *BlockDeviceSnapshotArgs, opts ...pulumi.ResourceOption) (*BlockDeviceSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockDeviceId == nil {
		return nil, errors.New("invalid value for required argument 'BlockDeviceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BlockDeviceSnapshot
	err := ctx.RegisterResource("vra:index/blockDeviceSnapshot:BlockDeviceSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockDeviceSnapshot gets an existing BlockDeviceSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockDeviceSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockDeviceSnapshotState, opts ...pulumi.ResourceOption) (*BlockDeviceSnapshot, error) {
	var resource BlockDeviceSnapshot
	err := ctx.ReadResource("vra:index/blockDeviceSnapshot:BlockDeviceSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockDeviceSnapshot resources.
type blockDeviceSnapshotState struct {
	// ID of block device.
	BlockDeviceId *string `pulumi:"blockDeviceId"`
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Indicates whether snapshot on block device is current.
	IsCurrent *bool `pulumi:"isCurrent"`
	// HATEOAS of entity
	Links []BlockDeviceSnapshotLink `pulumi:"links"`
	// Human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of entity owner.
	Owner     *string `pulumi:"owner"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type BlockDeviceSnapshotState struct {
	// ID of block device.
	BlockDeviceId pulumi.StringPtrInput
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Indicates whether snapshot on block device is current.
	IsCurrent pulumi.BoolPtrInput
	// HATEOAS of entity
	Links BlockDeviceSnapshotLinkArrayInput
	// Human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// ID of organization that entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of entity owner.
	Owner     pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (BlockDeviceSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockDeviceSnapshotState)(nil)).Elem()
}

type blockDeviceSnapshotArgs struct {
	// ID of block device.
	BlockDeviceId string `pulumi:"blockDeviceId"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
}

// The set of arguments for constructing a BlockDeviceSnapshot resource.
type BlockDeviceSnapshotArgs struct {
	// ID of block device.
	BlockDeviceId pulumi.StringInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
}

func (BlockDeviceSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockDeviceSnapshotArgs)(nil)).Elem()
}

type BlockDeviceSnapshotInput interface {
	pulumi.Input

	ToBlockDeviceSnapshotOutput() BlockDeviceSnapshotOutput
	ToBlockDeviceSnapshotOutputWithContext(ctx context.Context) BlockDeviceSnapshotOutput
}

func (*BlockDeviceSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockDeviceSnapshot)(nil)).Elem()
}

func (i *BlockDeviceSnapshot) ToBlockDeviceSnapshotOutput() BlockDeviceSnapshotOutput {
	return i.ToBlockDeviceSnapshotOutputWithContext(context.Background())
}

func (i *BlockDeviceSnapshot) ToBlockDeviceSnapshotOutputWithContext(ctx context.Context) BlockDeviceSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceSnapshotOutput)
}

// BlockDeviceSnapshotArrayInput is an input type that accepts BlockDeviceSnapshotArray and BlockDeviceSnapshotArrayOutput values.
// You can construct a concrete instance of `BlockDeviceSnapshotArrayInput` via:
//
//	BlockDeviceSnapshotArray{ BlockDeviceSnapshotArgs{...} }
type BlockDeviceSnapshotArrayInput interface {
	pulumi.Input

	ToBlockDeviceSnapshotArrayOutput() BlockDeviceSnapshotArrayOutput
	ToBlockDeviceSnapshotArrayOutputWithContext(context.Context) BlockDeviceSnapshotArrayOutput
}

type BlockDeviceSnapshotArray []BlockDeviceSnapshotInput

func (BlockDeviceSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockDeviceSnapshot)(nil)).Elem()
}

func (i BlockDeviceSnapshotArray) ToBlockDeviceSnapshotArrayOutput() BlockDeviceSnapshotArrayOutput {
	return i.ToBlockDeviceSnapshotArrayOutputWithContext(context.Background())
}

func (i BlockDeviceSnapshotArray) ToBlockDeviceSnapshotArrayOutputWithContext(ctx context.Context) BlockDeviceSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceSnapshotArrayOutput)
}

// BlockDeviceSnapshotMapInput is an input type that accepts BlockDeviceSnapshotMap and BlockDeviceSnapshotMapOutput values.
// You can construct a concrete instance of `BlockDeviceSnapshotMapInput` via:
//
//	BlockDeviceSnapshotMap{ "key": BlockDeviceSnapshotArgs{...} }
type BlockDeviceSnapshotMapInput interface {
	pulumi.Input

	ToBlockDeviceSnapshotMapOutput() BlockDeviceSnapshotMapOutput
	ToBlockDeviceSnapshotMapOutputWithContext(context.Context) BlockDeviceSnapshotMapOutput
}

type BlockDeviceSnapshotMap map[string]BlockDeviceSnapshotInput

func (BlockDeviceSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockDeviceSnapshot)(nil)).Elem()
}

func (i BlockDeviceSnapshotMap) ToBlockDeviceSnapshotMapOutput() BlockDeviceSnapshotMapOutput {
	return i.ToBlockDeviceSnapshotMapOutputWithContext(context.Background())
}

func (i BlockDeviceSnapshotMap) ToBlockDeviceSnapshotMapOutputWithContext(ctx context.Context) BlockDeviceSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceSnapshotMapOutput)
}

type BlockDeviceSnapshotOutput struct{ *pulumi.OutputState }

func (BlockDeviceSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockDeviceSnapshot)(nil)).Elem()
}

func (o BlockDeviceSnapshotOutput) ToBlockDeviceSnapshotOutput() BlockDeviceSnapshotOutput {
	return o
}

func (o BlockDeviceSnapshotOutput) ToBlockDeviceSnapshotOutputWithContext(ctx context.Context) BlockDeviceSnapshotOutput {
	return o
}

// ID of block device.
func (o BlockDeviceSnapshotOutput) BlockDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.BlockDeviceId }).(pulumi.StringOutput)
}

// Date when entity was created. Date and time format is ISO 8601 and UTC.
func (o BlockDeviceSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o BlockDeviceSnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether snapshot on block device is current.
func (o BlockDeviceSnapshotOutput) IsCurrent() pulumi.BoolOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.BoolOutput { return v.IsCurrent }).(pulumi.BoolOutput)
}

// HATEOAS of entity
func (o BlockDeviceSnapshotOutput) Links() BlockDeviceSnapshotLinkArrayOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) BlockDeviceSnapshotLinkArrayOutput { return v.Links }).(BlockDeviceSnapshotLinkArrayOutput)
}

// Human-friendly name used as an identifier in APIs that support this option.
func (o BlockDeviceSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of organization that entity belongs to.
func (o BlockDeviceSnapshotOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of entity owner.
func (o BlockDeviceSnapshotOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o BlockDeviceSnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDeviceSnapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type BlockDeviceSnapshotArrayOutput struct{ *pulumi.OutputState }

func (BlockDeviceSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockDeviceSnapshot)(nil)).Elem()
}

func (o BlockDeviceSnapshotArrayOutput) ToBlockDeviceSnapshotArrayOutput() BlockDeviceSnapshotArrayOutput {
	return o
}

func (o BlockDeviceSnapshotArrayOutput) ToBlockDeviceSnapshotArrayOutputWithContext(ctx context.Context) BlockDeviceSnapshotArrayOutput {
	return o
}

func (o BlockDeviceSnapshotArrayOutput) Index(i pulumi.IntInput) BlockDeviceSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockDeviceSnapshot {
		return vs[0].([]*BlockDeviceSnapshot)[vs[1].(int)]
	}).(BlockDeviceSnapshotOutput)
}

type BlockDeviceSnapshotMapOutput struct{ *pulumi.OutputState }

func (BlockDeviceSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockDeviceSnapshot)(nil)).Elem()
}

func (o BlockDeviceSnapshotMapOutput) ToBlockDeviceSnapshotMapOutput() BlockDeviceSnapshotMapOutput {
	return o
}

func (o BlockDeviceSnapshotMapOutput) ToBlockDeviceSnapshotMapOutputWithContext(ctx context.Context) BlockDeviceSnapshotMapOutput {
	return o
}

func (o BlockDeviceSnapshotMapOutput) MapIndex(k pulumi.StringInput) BlockDeviceSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockDeviceSnapshot {
		return vs[0].(map[string]*BlockDeviceSnapshot)[vs[1].(string)]
	}).(BlockDeviceSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceSnapshotInput)(nil)).Elem(), &BlockDeviceSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceSnapshotArrayInput)(nil)).Elem(), BlockDeviceSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceSnapshotMapInput)(nil)).Elem(), BlockDeviceSnapshotMap{})
	pulumi.RegisterOutputType(BlockDeviceSnapshotOutput{})
	pulumi.RegisterOutputType(BlockDeviceSnapshotArrayOutput{})
	pulumi.RegisterOutputType(BlockDeviceSnapshotMapOutput{})
}
