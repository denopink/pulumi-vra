// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile resource.
//
// **Vra storage profile:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewStorageProfile(ctx, "thisStorageProfile", &vra.StorageProfileArgs{
//				Description: pulumi.String("vSphere Storage Profile with standard independent non-persistent disk."),
//				RegionId:    pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem: pulumi.Bool(false),
//				DiskProperties: pulumi.AnyMap{
//					"independent":      pulumi.Any("true"),
//					"persistent":       pulumi.Any("false"),
//					"limitIops":        pulumi.Any("2000"),
//					"provisioningType": pulumi.Any("eagerZeroedThick"),
//					"sharesLevel":      pulumi.Any("custom"),
//					"shares":           pulumi.Any("1500"),
//				},
//				DiskTargetProperties: pulumi.AnyMap{
//					"datastoreId":     pulumi.Any(data.Vra_fabric_datastore_vsphere.This.Id),
//					"storagePolicyId": pulumi.Any(data.Vra_fabric_storage_policy_vsphere.This.Id),
//				},
//				Tags: StorageProfileTagArray{
//					&StorageProfileTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vra.NewStorageProfile(ctx, "thisIndex/storageProfileStorageProfile", &vra.StorageProfileArgs{
//				Description: pulumi.String("AWS Storage Profile with instance store device type."),
//				RegionId:    pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem: pulumi.Bool(false),
//				DiskProperties: pulumi.AnyMap{
//					"deviceType": pulumi.Any("instance-store"),
//				},
//				Tags: StorageProfileTagArray{
//					&StorageProfileTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vra.NewStorageProfile(ctx, "thisVraIndex/storageProfileStorageProfile", &vra.StorageProfileArgs{
//				Description:        pulumi.String("Azure Storage Profile with managed disks."),
//				RegionId:           pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem:        pulumi.Bool(false),
//				SupportsEncryption: pulumi.Bool(false),
//				DiskProperties: pulumi.AnyMap{
//					"azureDataDiskCaching": pulumi.Any("None"),
//					"azureManagedDiskType": pulumi.Any("Standard_LRS"),
//					"azureOsDiskCaching":   pulumi.Any("None"),
//				},
//				Tags: StorageProfileTagArray{
//					&StorageProfileTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile resource supports the following arguments:
type StorageProfile struct {
	pulumi.CustomResourceState

	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringOutput `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolOutput `pulumi:"defaultItem"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties pulumi.MapOutput `pulumi:"diskProperties"`
	// Map of storage placements to know where the disk is provisioned.
	DiskTargetProperties pulumi.MapOutput `pulumi:"diskTargetProperties"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// HATEOAS of the entity
	Links StorageProfileLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption pulumi.BoolOutput `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileTagArrayOutput `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewStorageProfile registers a new resource with the given unique name, arguments, and options.
func NewStorageProfile(ctx *pulumi.Context,
	name string, args *StorageProfileArgs, opts ...pulumi.ResourceOption) (*StorageProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultItem == nil {
		return nil, errors.New("invalid value for required argument 'DefaultItem'")
	}
	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StorageProfile
	err := ctx.RegisterResource("vra:index/storageProfile:StorageProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageProfile gets an existing StorageProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageProfileState, opts ...pulumi.ResourceOption) (*StorageProfile, error) {
	var resource StorageProfile
	err := ctx.ReadResource("vra:index/storageProfile:StorageProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageProfile resources.
type storageProfileState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId *string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates if this storage profile is a default profile.
	DefaultItem *bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties map[string]interface{} `pulumi:"diskProperties"`
	// Map of storage placements to know where the disk is provisioned.
	DiskTargetProperties map[string]interface{} `pulumi:"diskTargetProperties"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// HATEOAS of the entity
	Links []StorageProfileLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId *string `pulumi:"regionId"`
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []StorageProfileTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type StorageProfileState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringPtrInput
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties pulumi.MapInput
	// Map of storage placements to know where the disk is provisioned.
	DiskTargetProperties pulumi.MapInput
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringPtrInput
	// HATEOAS of the entity
	Links StorageProfileLinkArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringPtrInput
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileTagArrayInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (StorageProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageProfileState)(nil)).Elem()
}

type storageProfileArgs struct {
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties map[string]interface{} `pulumi:"diskProperties"`
	// Map of storage placements to know where the disk is provisioned.
	DiskTargetProperties map[string]interface{} `pulumi:"diskTargetProperties"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId string `pulumi:"regionId"`
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []StorageProfileTag `pulumi:"tags"`
}

// The set of arguments for constructing a StorageProfile resource.
type StorageProfileArgs struct {
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Map of storage properties that are to be applied on disk while provisioning.
	DiskProperties pulumi.MapInput
	// Map of storage placements to know where the disk is provisioned.
	DiskTargetProperties pulumi.MapInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringInput
	// Indicates whether this storage profile supports encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileTagArrayInput
}

func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageProfileArgs)(nil)).Elem()
}

type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput
}

func (*StorageProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (i *StorageProfile) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i *StorageProfile) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

// StorageProfileArrayInput is an input type that accepts StorageProfileArray and StorageProfileArrayOutput values.
// You can construct a concrete instance of `StorageProfileArrayInput` via:
//
//	StorageProfileArray{ StorageProfileArgs{...} }
type StorageProfileArrayInput interface {
	pulumi.Input

	ToStorageProfileArrayOutput() StorageProfileArrayOutput
	ToStorageProfileArrayOutputWithContext(context.Context) StorageProfileArrayOutput
}

type StorageProfileArray []StorageProfileInput

func (StorageProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArray) ToStorageProfileArrayOutput() StorageProfileArrayOutput {
	return i.ToStorageProfileArrayOutputWithContext(context.Background())
}

func (i StorageProfileArray) ToStorageProfileArrayOutputWithContext(ctx context.Context) StorageProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileArrayOutput)
}

// StorageProfileMapInput is an input type that accepts StorageProfileMap and StorageProfileMapOutput values.
// You can construct a concrete instance of `StorageProfileMapInput` via:
//
//	StorageProfileMap{ "key": StorageProfileArgs{...} }
type StorageProfileMapInput interface {
	pulumi.Input

	ToStorageProfileMapOutput() StorageProfileMapOutput
	ToStorageProfileMapOutputWithContext(context.Context) StorageProfileMapOutput
}

type StorageProfileMap map[string]StorageProfileInput

func (StorageProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageProfile)(nil)).Elem()
}

func (i StorageProfileMap) ToStorageProfileMapOutput() StorageProfileMapOutput {
	return i.ToStorageProfileMapOutputWithContext(context.Background())
}

func (i StorageProfileMap) ToStorageProfileMapOutputWithContext(ctx context.Context) StorageProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileMapOutput)
}

type StorageProfileOutput struct{ *pulumi.OutputState }

func (StorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (o StorageProfileOutput) ToStorageProfileOutput() StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return o
}

// Id of the cloud account this storage profile belongs to.
func (o StorageProfileOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o StorageProfileOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates if this storage profile is a default profile.
func (o StorageProfileOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.BoolOutput { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o StorageProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Map of storage properties that are to be applied on disk while provisioning.
func (o StorageProfileOutput) DiskProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.MapOutput { return v.DiskProperties }).(pulumi.MapOutput)
}

// Map of storage placements to know where the disk is provisioned.
func (o StorageProfileOutput) DiskTargetProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.MapOutput { return v.DiskTargetProperties }).(pulumi.MapOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o StorageProfileOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// HATEOAS of the entity
func (o StorageProfileOutput) Links() StorageProfileLinkArrayOutput {
	return o.ApplyT(func(v *StorageProfile) StorageProfileLinkArrayOutput { return v.Links }).(StorageProfileLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o StorageProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o StorageProfileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o StorageProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The id of the region for which this profile is defined as in vRealize Automation(vRA).
func (o StorageProfileOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Indicates whether this storage profile supports encryption or not.
func (o StorageProfileOutput) SupportsEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.BoolOutput { return v.SupportsEncryption }).(pulumi.BoolOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o StorageProfileOutput) Tags() StorageProfileTagArrayOutput {
	return o.ApplyT(func(v *StorageProfile) StorageProfileTagArrayOutput { return v.Tags }).(StorageProfileTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o StorageProfileOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfile) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type StorageProfileArrayOutput struct{ *pulumi.OutputState }

func (StorageProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageProfile)(nil)).Elem()
}

func (o StorageProfileArrayOutput) ToStorageProfileArrayOutput() StorageProfileArrayOutput {
	return o
}

func (o StorageProfileArrayOutput) ToStorageProfileArrayOutputWithContext(ctx context.Context) StorageProfileArrayOutput {
	return o
}

func (o StorageProfileArrayOutput) Index(i pulumi.IntInput) StorageProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageProfile {
		return vs[0].([]*StorageProfile)[vs[1].(int)]
	}).(StorageProfileOutput)
}

type StorageProfileMapOutput struct{ *pulumi.OutputState }

func (StorageProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageProfile)(nil)).Elem()
}

func (o StorageProfileMapOutput) ToStorageProfileMapOutput() StorageProfileMapOutput {
	return o
}

func (o StorageProfileMapOutput) ToStorageProfileMapOutputWithContext(ctx context.Context) StorageProfileMapOutput {
	return o
}

func (o StorageProfileMapOutput) MapIndex(k pulumi.StringInput) StorageProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageProfile {
		return vs[0].(map[string]*StorageProfile)[vs[1].(string)]
	}).(StorageProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileInput)(nil)).Elem(), &StorageProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileArrayInput)(nil)).Elem(), StorageProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileMapInput)(nil)).Elem(), StorageProfileMap{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfileArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileMapOutput{})
}
