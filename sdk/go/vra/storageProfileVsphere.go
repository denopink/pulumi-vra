// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create a storage profile vsphere resource.
//
// **Vra storage profile vsphere:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/schmidtw/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewStorageProfileVsphere(ctx, "this", &vra.StorageProfileVsphereArgs{
//				Description:      pulumi.String("vSphere Storage Profile with FCD disk."),
//				RegionId:         pulumi.Any(data.Vra_region.This.Id),
//				DefaultItem:      pulumi.Bool(false),
//				DiskType:         pulumi.String("firstClass"),
//				ProvisioningType: pulumi.String("thin"),
//				DatastoreId:      pulumi.Any(data.Vra_fabric_datastore_vsphere.This.Id),
//				StoragePolicyId:  pulumi.Any(data.Vra_fabric_storage_policy_vsphere.This.Id),
//				Tags: StorageProfileVsphereTagArray{
//					&StorageProfileVsphereTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A storage profile vsphere resource supports the following arguments:
type StorageProfileVsphere struct {
	pulumi.CustomResourceState

	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringOutput `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrOutput `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolOutput `pulumi:"defaultItem"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode pulumi.StringOutput `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrOutput `pulumi:"limitIops"`
	// HATEOAS of the entity
	Links StorageProfileVsphereLinkArrayOutput `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrOutput `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrOutput `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrOutput `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrOutput `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrOutput `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileVsphereTagArrayOutput `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewStorageProfileVsphere registers a new resource with the given unique name, arguments, and options.
func NewStorageProfileVsphere(ctx *pulumi.Context,
	name string, args *StorageProfileVsphereArgs, opts ...pulumi.ResourceOption) (*StorageProfileVsphere, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultItem == nil {
		return nil, errors.New("invalid value for required argument 'DefaultItem'")
	}
	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StorageProfileVsphere
	err := ctx.RegisterResource("vra:index/storageProfileVsphere:StorageProfileVsphere", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageProfileVsphere gets an existing StorageProfileVsphere resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageProfileVsphere(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageProfileVsphereState, opts ...pulumi.ResourceOption) (*StorageProfileVsphere, error) {
	var resource StorageProfileVsphere
	err := ctx.ReadResource("vra:index/storageProfileVsphere:StorageProfileVsphere", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageProfileVsphere resources.
type storageProfileVsphereState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId *string `pulumi:"cloudAccountId"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId *string `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem *bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode *string `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops *string `pulumi:"limitIops"`
	// HATEOAS of the entity
	Links []StorageProfileVsphereLink `pulumi:"links"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// Type of provisioning policy for the disk.
	ProvisioningType *string `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId *string `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares *string `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel *string `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []StorageProfileVsphereTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type StorageProfileVsphereState struct {
	// Id of the cloud account this storage profile belongs to.
	CloudAccountId pulumi.StringPtrInput
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Type of mode for the disk.
	DiskMode pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// The id of the region as seen in the cloud provider for which this profile is defined.
	ExternalRegionId pulumi.StringPtrInput
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrInput
	// HATEOAS of the entity
	Links StorageProfileVsphereLinkArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the organization this entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrInput
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringPtrInput
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrInput
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrInput
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileVsphereTagArrayInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (StorageProfileVsphereState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageProfileVsphereState)(nil)).Elem()
}

type storageProfileVsphereArgs struct {
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId *string `pulumi:"datastoreId"`
	// Indicates if this storage profile is a default profile.
	DefaultItem bool `pulumi:"defaultItem"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Type of mode for the disk.
	DiskMode *string `pulumi:"diskMode"`
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType *string `pulumi:"diskType"`
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops *string `pulumi:"limitIops"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// Type of provisioning policy for the disk.
	ProvisioningType *string `pulumi:"provisioningType"`
	// The Id of the region that is associated with the storage profile.
	RegionId string `pulumi:"regionId"`
	// A specific number of shares assigned to each virtual machine.
	Shares *string `pulumi:"shares"`
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel *string `pulumi:"sharesLevel"`
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId *string `pulumi:"storagePolicyId"`
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption *bool `pulumi:"supportsEncryption"`
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags []StorageProfileVsphereTag `pulumi:"tags"`
}

// The set of arguments for constructing a StorageProfileVsphere resource.
type StorageProfileVsphereArgs struct {
	// Id of the vSphere Datastore for placing disk and VM.
	DatastoreId pulumi.StringPtrInput
	// Indicates if this storage profile is a default profile.
	DefaultItem pulumi.BoolInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Type of mode for the disk.
	DiskMode pulumi.StringPtrInput
	// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
	DiskType pulumi.StringPtrInput
	// The upper bound for the I/O operations per second allocated for each virtual disk.
	LimitIops pulumi.StringPtrInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// Type of provisioning policy for the disk.
	ProvisioningType pulumi.StringPtrInput
	// The Id of the region that is associated with the storage profile.
	RegionId pulumi.StringInput
	// A specific number of shares assigned to each virtual machine.
	Shares pulumi.StringPtrInput
	// Indicates whether this storage profile supports encryption or not.
	SharesLevel pulumi.StringPtrInput
	// Id of the vSphere Storage Policy to be applied.
	StoragePolicyId pulumi.StringPtrInput
	// Indicates whether this storage policy should support encryption or not.
	SupportsEncryption pulumi.BoolPtrInput
	// A set of tag keys and optional values that were set on this Network Profile.
	// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
	Tags StorageProfileVsphereTagArrayInput
}

func (StorageProfileVsphereArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageProfileVsphereArgs)(nil)).Elem()
}

type StorageProfileVsphereInput interface {
	pulumi.Input

	ToStorageProfileVsphereOutput() StorageProfileVsphereOutput
	ToStorageProfileVsphereOutputWithContext(ctx context.Context) StorageProfileVsphereOutput
}

func (*StorageProfileVsphere) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileVsphere)(nil)).Elem()
}

func (i *StorageProfileVsphere) ToStorageProfileVsphereOutput() StorageProfileVsphereOutput {
	return i.ToStorageProfileVsphereOutputWithContext(context.Background())
}

func (i *StorageProfileVsphere) ToStorageProfileVsphereOutputWithContext(ctx context.Context) StorageProfileVsphereOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileVsphereOutput)
}

// StorageProfileVsphereArrayInput is an input type that accepts StorageProfileVsphereArray and StorageProfileVsphereArrayOutput values.
// You can construct a concrete instance of `StorageProfileVsphereArrayInput` via:
//
//	StorageProfileVsphereArray{ StorageProfileVsphereArgs{...} }
type StorageProfileVsphereArrayInput interface {
	pulumi.Input

	ToStorageProfileVsphereArrayOutput() StorageProfileVsphereArrayOutput
	ToStorageProfileVsphereArrayOutputWithContext(context.Context) StorageProfileVsphereArrayOutput
}

type StorageProfileVsphereArray []StorageProfileVsphereInput

func (StorageProfileVsphereArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageProfileVsphere)(nil)).Elem()
}

func (i StorageProfileVsphereArray) ToStorageProfileVsphereArrayOutput() StorageProfileVsphereArrayOutput {
	return i.ToStorageProfileVsphereArrayOutputWithContext(context.Background())
}

func (i StorageProfileVsphereArray) ToStorageProfileVsphereArrayOutputWithContext(ctx context.Context) StorageProfileVsphereArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileVsphereArrayOutput)
}

// StorageProfileVsphereMapInput is an input type that accepts StorageProfileVsphereMap and StorageProfileVsphereMapOutput values.
// You can construct a concrete instance of `StorageProfileVsphereMapInput` via:
//
//	StorageProfileVsphereMap{ "key": StorageProfileVsphereArgs{...} }
type StorageProfileVsphereMapInput interface {
	pulumi.Input

	ToStorageProfileVsphereMapOutput() StorageProfileVsphereMapOutput
	ToStorageProfileVsphereMapOutputWithContext(context.Context) StorageProfileVsphereMapOutput
}

type StorageProfileVsphereMap map[string]StorageProfileVsphereInput

func (StorageProfileVsphereMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageProfileVsphere)(nil)).Elem()
}

func (i StorageProfileVsphereMap) ToStorageProfileVsphereMapOutput() StorageProfileVsphereMapOutput {
	return i.ToStorageProfileVsphereMapOutputWithContext(context.Background())
}

func (i StorageProfileVsphereMap) ToStorageProfileVsphereMapOutputWithContext(ctx context.Context) StorageProfileVsphereMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileVsphereMapOutput)
}

type StorageProfileVsphereOutput struct{ *pulumi.OutputState }

func (StorageProfileVsphereOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileVsphere)(nil)).Elem()
}

func (o StorageProfileVsphereOutput) ToStorageProfileVsphereOutput() StorageProfileVsphereOutput {
	return o
}

func (o StorageProfileVsphereOutput) ToStorageProfileVsphereOutputWithContext(ctx context.Context) StorageProfileVsphereOutput {
	return o
}

// Id of the cloud account this storage profile belongs to.
func (o StorageProfileVsphereOutput) CloudAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.CloudAccountId }).(pulumi.StringOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o StorageProfileVsphereOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Id of the vSphere Datastore for placing disk and VM.
func (o StorageProfileVsphereOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// Indicates if this storage profile is a default profile.
func (o StorageProfileVsphereOutput) DefaultItem() pulumi.BoolOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.BoolOutput { return v.DefaultItem }).(pulumi.BoolOutput)
}

// A human-friendly description.
func (o StorageProfileVsphereOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of mode for the disk.
func (o StorageProfileVsphereOutput) DiskMode() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.DiskMode }).(pulumi.StringOutput)
}

// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
func (o StorageProfileVsphereOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The id of the region as seen in the cloud provider for which this profile is defined.
func (o StorageProfileVsphereOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// The upper bound for the I/O operations per second allocated for each virtual disk.
func (o StorageProfileVsphereOutput) LimitIops() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.LimitIops }).(pulumi.StringPtrOutput)
}

// HATEOAS of the entity
func (o StorageProfileVsphereOutput) Links() StorageProfileVsphereLinkArrayOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) StorageProfileVsphereLinkArrayOutput { return v.Links }).(StorageProfileVsphereLinkArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o StorageProfileVsphereOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o StorageProfileVsphereOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o StorageProfileVsphereOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Type of provisioning policy for the disk.
func (o StorageProfileVsphereOutput) ProvisioningType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.ProvisioningType }).(pulumi.StringPtrOutput)
}

// The Id of the region that is associated with the storage profile.
func (o StorageProfileVsphereOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// A specific number of shares assigned to each virtual machine.
func (o StorageProfileVsphereOutput) Shares() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.Shares }).(pulumi.StringPtrOutput)
}

// Indicates whether this storage profile supports encryption or not.
func (o StorageProfileVsphereOutput) SharesLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.SharesLevel }).(pulumi.StringPtrOutput)
}

// Id of the vSphere Storage Policy to be applied.
func (o StorageProfileVsphereOutput) StoragePolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringPtrOutput { return v.StoragePolicyId }).(pulumi.StringPtrOutput)
}

// Indicates whether this storage policy should support encryption or not.
func (o StorageProfileVsphereOutput) SupportsEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.BoolPtrOutput { return v.SupportsEncryption }).(pulumi.BoolPtrOutput)
}

// A set of tag keys and optional values that were set on this Network Profile.
// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
func (o StorageProfileVsphereOutput) Tags() StorageProfileVsphereTagArrayOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) StorageProfileVsphereTagArrayOutput { return v.Tags }).(StorageProfileVsphereTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o StorageProfileVsphereOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageProfileVsphere) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type StorageProfileVsphereArrayOutput struct{ *pulumi.OutputState }

func (StorageProfileVsphereArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageProfileVsphere)(nil)).Elem()
}

func (o StorageProfileVsphereArrayOutput) ToStorageProfileVsphereArrayOutput() StorageProfileVsphereArrayOutput {
	return o
}

func (o StorageProfileVsphereArrayOutput) ToStorageProfileVsphereArrayOutputWithContext(ctx context.Context) StorageProfileVsphereArrayOutput {
	return o
}

func (o StorageProfileVsphereArrayOutput) Index(i pulumi.IntInput) StorageProfileVsphereOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageProfileVsphere {
		return vs[0].([]*StorageProfileVsphere)[vs[1].(int)]
	}).(StorageProfileVsphereOutput)
}

type StorageProfileVsphereMapOutput struct{ *pulumi.OutputState }

func (StorageProfileVsphereMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageProfileVsphere)(nil)).Elem()
}

func (o StorageProfileVsphereMapOutput) ToStorageProfileVsphereMapOutput() StorageProfileVsphereMapOutput {
	return o
}

func (o StorageProfileVsphereMapOutput) ToStorageProfileVsphereMapOutputWithContext(ctx context.Context) StorageProfileVsphereMapOutput {
	return o
}

func (o StorageProfileVsphereMapOutput) MapIndex(k pulumi.StringInput) StorageProfileVsphereOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageProfileVsphere {
		return vs[0].(map[string]*StorageProfileVsphere)[vs[1].(string)]
	}).(StorageProfileVsphereOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileVsphereInput)(nil)).Elem(), &StorageProfileVsphere{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileVsphereArrayInput)(nil)).Elem(), StorageProfileVsphereArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageProfileVsphereMapInput)(nil)).Elem(), StorageProfileVsphereMap{})
	pulumi.RegisterOutputType(StorageProfileVsphereOutput{})
	pulumi.RegisterOutputType(StorageProfileVsphereArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileVsphereMapOutput{})
}
