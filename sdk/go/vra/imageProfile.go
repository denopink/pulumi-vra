// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vra

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### S
// This is an example of how to create an image profile resource.
//
// **Image profile:**
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vra.NewImageProfile(ctx, "this", &vra.ImageProfileArgs{
//				Description: pulumi.String("test image profile"),
//				RegionId:    pulumi.Any(data.Vra_region.This.Id),
//				ImageMappings: ImageProfileImageMappingArray{
//					&ImageProfileImageMappingArgs{
//						Name:    pulumi.String("centos"),
//						ImageId: pulumi.Any(data.Vra_image.Centos.Id),
//						Constraints: ImageProfileImageMappingConstraintArray{
//							&ImageProfileImageMappingConstraintArgs{
//								Mandatory:  pulumi.Bool(true),
//								Expression: pulumi.String("!env:Test"),
//							},
//							&ImageProfileImageMappingConstraintArgs{
//								Mandatory:  pulumi.Bool(false),
//								Expression: pulumi.String("foo:bar"),
//							},
//						},
//					},
//					&ImageProfileImageMappingArgs{
//						Name:        pulumi.String("photon"),
//						ImageId:     pulumi.Any(data.Vra_image.Photon.Id),
//						CloudConfig: pulumi.String("runcmd echo 'Hello'"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// An image profile resource supports the following arguments:
type ImageProfile struct {
	pulumi.CustomResourceState

	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The external regionId of the resource.
	ExternalRegionId pulumi.StringOutput `pulumi:"externalRegionId"`
	// Image mapping defined for the corresponding region.
	ImageMappings ImageProfileImageMappingArrayOutput `pulumi:"imageMappings"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringOutput `pulumi:"name"`
	// Email of the user that owns the entity.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewImageProfile registers a new resource with the given unique name, arguments, and options.
func NewImageProfile(ctx *pulumi.Context,
	name string, args *ImageProfileArgs, opts ...pulumi.ResourceOption) (*ImageProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionId == nil {
		return nil, errors.New("invalid value for required argument 'RegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageProfile
	err := ctx.RegisterResource("vra:index/imageProfile:ImageProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageProfile gets an existing ImageProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageProfileState, opts ...pulumi.ResourceOption) (*ImageProfile, error) {
	var resource ImageProfile
	err := ctx.ReadResource("vra:index/imageProfile:ImageProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageProfile resources.
type imageProfileState struct {
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// The external regionId of the resource.
	ExternalRegionId *string `pulumi:"externalRegionId"`
	// Image mapping defined for the corresponding region.
	ImageMappings []ImageProfileImageMapping `pulumi:"imageMappings"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// Email of the user that owns the entity.
	Owner *string `pulumi:"owner"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId *string `pulumi:"regionId"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ImageProfileState struct {
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt pulumi.StringPtrInput
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// The external regionId of the resource.
	ExternalRegionId pulumi.StringPtrInput
	// Image mapping defined for the corresponding region.
	ImageMappings ImageProfileImageMappingArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// Email of the user that owns the entity.
	Owner pulumi.StringPtrInput
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringPtrInput
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (ImageProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageProfileState)(nil)).Elem()
}

type imageProfileArgs struct {
	// A human-friendly description.
	Description *string `pulumi:"description"`
	// Image mapping defined for the corresponding region.
	ImageMappings []ImageProfileImageMapping `pulumi:"imageMappings"`
	// A human-friendly name used as an identifier in APIs that support this option.
	Name *string `pulumi:"name"`
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId string `pulumi:"regionId"`
}

// The set of arguments for constructing a ImageProfile resource.
type ImageProfileArgs struct {
	// A human-friendly description.
	Description pulumi.StringPtrInput
	// Image mapping defined for the corresponding region.
	ImageMappings ImageProfileImageMappingArrayInput
	// A human-friendly name used as an identifier in APIs that support this option.
	Name pulumi.StringPtrInput
	// The id of the region for which this profile is defined as in vRealize Automation(vRA).
	RegionId pulumi.StringInput
}

func (ImageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageProfileArgs)(nil)).Elem()
}

type ImageProfileInput interface {
	pulumi.Input

	ToImageProfileOutput() ImageProfileOutput
	ToImageProfileOutputWithContext(ctx context.Context) ImageProfileOutput
}

func (*ImageProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageProfile)(nil)).Elem()
}

func (i *ImageProfile) ToImageProfileOutput() ImageProfileOutput {
	return i.ToImageProfileOutputWithContext(context.Background())
}

func (i *ImageProfile) ToImageProfileOutputWithContext(ctx context.Context) ImageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageProfileOutput)
}

// ImageProfileArrayInput is an input type that accepts ImageProfileArray and ImageProfileArrayOutput values.
// You can construct a concrete instance of `ImageProfileArrayInput` via:
//
//	ImageProfileArray{ ImageProfileArgs{...} }
type ImageProfileArrayInput interface {
	pulumi.Input

	ToImageProfileArrayOutput() ImageProfileArrayOutput
	ToImageProfileArrayOutputWithContext(context.Context) ImageProfileArrayOutput
}

type ImageProfileArray []ImageProfileInput

func (ImageProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageProfile)(nil)).Elem()
}

func (i ImageProfileArray) ToImageProfileArrayOutput() ImageProfileArrayOutput {
	return i.ToImageProfileArrayOutputWithContext(context.Background())
}

func (i ImageProfileArray) ToImageProfileArrayOutputWithContext(ctx context.Context) ImageProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageProfileArrayOutput)
}

// ImageProfileMapInput is an input type that accepts ImageProfileMap and ImageProfileMapOutput values.
// You can construct a concrete instance of `ImageProfileMapInput` via:
//
//	ImageProfileMap{ "key": ImageProfileArgs{...} }
type ImageProfileMapInput interface {
	pulumi.Input

	ToImageProfileMapOutput() ImageProfileMapOutput
	ToImageProfileMapOutputWithContext(context.Context) ImageProfileMapOutput
}

type ImageProfileMap map[string]ImageProfileInput

func (ImageProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageProfile)(nil)).Elem()
}

func (i ImageProfileMap) ToImageProfileMapOutput() ImageProfileMapOutput {
	return i.ToImageProfileMapOutputWithContext(context.Background())
}

func (i ImageProfileMap) ToImageProfileMapOutputWithContext(ctx context.Context) ImageProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageProfileMapOutput)
}

type ImageProfileOutput struct{ *pulumi.OutputState }

func (ImageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageProfile)(nil)).Elem()
}

func (o ImageProfileOutput) ToImageProfileOutput() ImageProfileOutput {
	return o
}

func (o ImageProfileOutput) ToImageProfileOutputWithContext(ctx context.Context) ImageProfileOutput {
	return o
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o ImageProfileOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A human-friendly description.
func (o ImageProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The external regionId of the resource.
func (o ImageProfileOutput) ExternalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.ExternalRegionId }).(pulumi.StringOutput)
}

// Image mapping defined for the corresponding region.
func (o ImageProfileOutput) ImageMappings() ImageProfileImageMappingArrayOutput {
	return o.ApplyT(func(v *ImageProfile) ImageProfileImageMappingArrayOutput { return v.ImageMappings }).(ImageProfileImageMappingArrayOutput)
}

// A human-friendly name used as an identifier in APIs that support this option.
func (o ImageProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o ImageProfileOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The id of the region for which this profile is defined as in vRealize Automation(vRA).
func (o ImageProfileOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o ImageProfileOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageProfile) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ImageProfileArrayOutput struct{ *pulumi.OutputState }

func (ImageProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageProfile)(nil)).Elem()
}

func (o ImageProfileArrayOutput) ToImageProfileArrayOutput() ImageProfileArrayOutput {
	return o
}

func (o ImageProfileArrayOutput) ToImageProfileArrayOutputWithContext(ctx context.Context) ImageProfileArrayOutput {
	return o
}

func (o ImageProfileArrayOutput) Index(i pulumi.IntInput) ImageProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageProfile {
		return vs[0].([]*ImageProfile)[vs[1].(int)]
	}).(ImageProfileOutput)
}

type ImageProfileMapOutput struct{ *pulumi.OutputState }

func (ImageProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageProfile)(nil)).Elem()
}

func (o ImageProfileMapOutput) ToImageProfileMapOutput() ImageProfileMapOutput {
	return o
}

func (o ImageProfileMapOutput) ToImageProfileMapOutputWithContext(ctx context.Context) ImageProfileMapOutput {
	return o
}

func (o ImageProfileMapOutput) MapIndex(k pulumi.StringInput) ImageProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageProfile {
		return vs[0].(map[string]*ImageProfile)[vs[1].(string)]
	}).(ImageProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageProfileInput)(nil)).Elem(), &ImageProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageProfileArrayInput)(nil)).Elem(), ImageProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageProfileMapInput)(nil)).Elem(), ImageProfileMap{})
	pulumi.RegisterOutputType(ImageProfileOutput{})
	pulumi.RegisterOutputType(ImageProfileArrayOutput{})
	pulumi.RegisterOutputType(ImageProfileMapOutput{})
}
