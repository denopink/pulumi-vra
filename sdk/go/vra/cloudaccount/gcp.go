// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudaccount

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a VMware vRealize Automation GCP cloud account resource.
//
// ## Example Usage
// ### S
//
// The following example shows how to create a GCP cloud account resource.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudaccount.NewGcp(ctx, "this", &cloudaccount.GcpArgs{
//				ClientEmail:  pulumi.String("client_email"),
//				Description:  pulumi.String("terraform test cloud account gcp"),
//				PrivateKey:   pulumi.String("private_key"),
//				PrivateKeyId: pulumi.String("private_key_id"),
//				ProjectId:    pulumi.String("project_id"),
//				Regions: pulumi.StringArray{
//					pulumi.String("us-west1"),
//					pulumi.String("us-west2"),
//				},
//				Tags: cloudaccount.GcpTagArray{
//					&cloudaccount.GcpTagArgs{
//						Key:   pulumi.String("foo"),
//						Value: pulumi.String("bar"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # To import the GCP cloud account, use the ID as in the following example
//
// ```sh
//
//	$ pulumi import vra:cloudaccount/gcp:Gcp new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`
//
// ```
type Gcp struct {
	pulumi.CustomResourceState

	// GCP Client email.
	ClientEmail pulumi.StringOutput `pulumi:"clientEmail"`
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Human-friendly description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// HATEOAS of entity.
	Links GcpLinkArrayOutput `pulumi:"links"`
	// Name of GCP cloud account.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// Email of entity owner.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// GCP Private key.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// GCP Private key ID.
	PrivateKeyId pulumi.StringOutput `pulumi:"privateKeyId"`
	// GCP Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Set of region names enabled for the cloud account.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// Set of tag keys and values to apply to the cloud account.\
	// Example:[ { "key" : "vmware", "value": "provider" } ]
	Tags GcpTagArrayOutput `pulumi:"tags"`
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewGcp registers a new resource with the given unique name, arguments, and options.
func NewGcp(ctx *pulumi.Context,
	name string, args *GcpArgs, opts ...pulumi.ResourceOption) (*Gcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientEmail == nil {
		return nil, errors.New("invalid value for required argument 'ClientEmail'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PrivateKeyId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Regions == nil {
		return nil, errors.New("invalid value for required argument 'Regions'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Gcp
	err := ctx.RegisterResource("vra:cloudaccount/gcp:Gcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcp gets an existing Gcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpState, opts ...pulumi.ResourceOption) (*Gcp, error) {
	var resource Gcp
	err := ctx.ReadResource("vra:cloudaccount/gcp:Gcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gcp resources.
type gcpState struct {
	// GCP Client email.
	ClientEmail *string `pulumi:"clientEmail"`
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt *string `pulumi:"createdAt"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// HATEOAS of entity.
	Links []GcpLink `pulumi:"links"`
	// Name of GCP cloud account.
	Name *string `pulumi:"name"`
	// ID of organization that entity belongs to.
	OrgId *string `pulumi:"orgId"`
	// Email of entity owner.
	Owner *string `pulumi:"owner"`
	// GCP Private key.
	PrivateKey *string `pulumi:"privateKey"`
	// GCP Private key ID.
	PrivateKeyId *string `pulumi:"privateKeyId"`
	// GCP Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Set of region names enabled for the cloud account.
	Regions []string `pulumi:"regions"`
	// Set of tag keys and values to apply to the cloud account.\
	// Example:[ { "key" : "vmware", "value": "provider" } ]
	Tags []GcpTag `pulumi:"tags"`
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type GcpState struct {
	// GCP Client email.
	ClientEmail pulumi.StringPtrInput
	// Date when entity was created. Date and time format is ISO 8601 and UTC.
	CreatedAt pulumi.StringPtrInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// HATEOAS of entity.
	Links GcpLinkArrayInput
	// Name of GCP cloud account.
	Name pulumi.StringPtrInput
	// ID of organization that entity belongs to.
	OrgId pulumi.StringPtrInput
	// Email of entity owner.
	Owner pulumi.StringPtrInput
	// GCP Private key.
	PrivateKey pulumi.StringPtrInput
	// GCP Private key ID.
	PrivateKeyId pulumi.StringPtrInput
	// GCP Project ID.
	ProjectId pulumi.StringPtrInput
	// Set of region names enabled for the cloud account.
	Regions pulumi.StringArrayInput
	// Set of tag keys and values to apply to the cloud account.\
	// Example:[ { "key" : "vmware", "value": "provider" } ]
	Tags GcpTagArrayInput
	// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
	UpdatedAt pulumi.StringPtrInput
}

func (GcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpState)(nil)).Elem()
}

type gcpArgs struct {
	// GCP Client email.
	ClientEmail string `pulumi:"clientEmail"`
	// Human-friendly description.
	Description *string `pulumi:"description"`
	// Name of GCP cloud account.
	Name *string `pulumi:"name"`
	// GCP Private key.
	PrivateKey string `pulumi:"privateKey"`
	// GCP Private key ID.
	PrivateKeyId string `pulumi:"privateKeyId"`
	// GCP Project ID.
	ProjectId string `pulumi:"projectId"`
	// Set of region names enabled for the cloud account.
	Regions []string `pulumi:"regions"`
	// Set of tag keys and values to apply to the cloud account.\
	// Example:[ { "key" : "vmware", "value": "provider" } ]
	Tags []GcpTag `pulumi:"tags"`
}

// The set of arguments for constructing a Gcp resource.
type GcpArgs struct {
	// GCP Client email.
	ClientEmail pulumi.StringInput
	// Human-friendly description.
	Description pulumi.StringPtrInput
	// Name of GCP cloud account.
	Name pulumi.StringPtrInput
	// GCP Private key.
	PrivateKey pulumi.StringInput
	// GCP Private key ID.
	PrivateKeyId pulumi.StringInput
	// GCP Project ID.
	ProjectId pulumi.StringInput
	// Set of region names enabled for the cloud account.
	Regions pulumi.StringArrayInput
	// Set of tag keys and values to apply to the cloud account.\
	// Example:[ { "key" : "vmware", "value": "provider" } ]
	Tags GcpTagArrayInput
}

func (GcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpArgs)(nil)).Elem()
}

type GcpInput interface {
	pulumi.Input

	ToGcpOutput() GcpOutput
	ToGcpOutputWithContext(ctx context.Context) GcpOutput
}

func (*Gcp) ElementType() reflect.Type {
	return reflect.TypeOf((**Gcp)(nil)).Elem()
}

func (i *Gcp) ToGcpOutput() GcpOutput {
	return i.ToGcpOutputWithContext(context.Background())
}

func (i *Gcp) ToGcpOutputWithContext(ctx context.Context) GcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpOutput)
}

// GcpArrayInput is an input type that accepts GcpArray and GcpArrayOutput values.
// You can construct a concrete instance of `GcpArrayInput` via:
//
//	GcpArray{ GcpArgs{...} }
type GcpArrayInput interface {
	pulumi.Input

	ToGcpArrayOutput() GcpArrayOutput
	ToGcpArrayOutputWithContext(context.Context) GcpArrayOutput
}

type GcpArray []GcpInput

func (GcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gcp)(nil)).Elem()
}

func (i GcpArray) ToGcpArrayOutput() GcpArrayOutput {
	return i.ToGcpArrayOutputWithContext(context.Background())
}

func (i GcpArray) ToGcpArrayOutputWithContext(ctx context.Context) GcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpArrayOutput)
}

// GcpMapInput is an input type that accepts GcpMap and GcpMapOutput values.
// You can construct a concrete instance of `GcpMapInput` via:
//
//	GcpMap{ "key": GcpArgs{...} }
type GcpMapInput interface {
	pulumi.Input

	ToGcpMapOutput() GcpMapOutput
	ToGcpMapOutputWithContext(context.Context) GcpMapOutput
}

type GcpMap map[string]GcpInput

func (GcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gcp)(nil)).Elem()
}

func (i GcpMap) ToGcpMapOutput() GcpMapOutput {
	return i.ToGcpMapOutputWithContext(context.Background())
}

func (i GcpMap) ToGcpMapOutputWithContext(ctx context.Context) GcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMapOutput)
}

type GcpOutput struct{ *pulumi.OutputState }

func (GcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gcp)(nil)).Elem()
}

func (o GcpOutput) ToGcpOutput() GcpOutput {
	return o
}

func (o GcpOutput) ToGcpOutputWithContext(ctx context.Context) GcpOutput {
	return o
}

// GCP Client email.
func (o GcpOutput) ClientEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.ClientEmail }).(pulumi.StringOutput)
}

// Date when entity was created. Date and time format is ISO 8601 and UTC.
func (o GcpOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Human-friendly description.
func (o GcpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// HATEOAS of entity.
func (o GcpOutput) Links() GcpLinkArrayOutput {
	return o.ApplyT(func(v *Gcp) GcpLinkArrayOutput { return v.Links }).(GcpLinkArrayOutput)
}

// Name of GCP cloud account.
func (o GcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of organization that entity belongs to.
func (o GcpOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Email of entity owner.
func (o GcpOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// GCP Private key.
func (o GcpOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// GCP Private key ID.
func (o GcpOutput) PrivateKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.PrivateKeyId }).(pulumi.StringOutput)
}

// GCP Project ID.
func (o GcpOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Set of region names enabled for the cloud account.
func (o GcpOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

// Set of tag keys and values to apply to the cloud account.\
// Example:[ { "key" : "vmware", "value": "provider" } ]
func (o GcpOutput) Tags() GcpTagArrayOutput {
	return o.ApplyT(func(v *Gcp) GcpTagArrayOutput { return v.Tags }).(GcpTagArrayOutput)
}

// Date when entity was last updated. Date and time format is ISO 8601 and UTC.
func (o GcpOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Gcp) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GcpArrayOutput struct{ *pulumi.OutputState }

func (GcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gcp)(nil)).Elem()
}

func (o GcpArrayOutput) ToGcpArrayOutput() GcpArrayOutput {
	return o
}

func (o GcpArrayOutput) ToGcpArrayOutputWithContext(ctx context.Context) GcpArrayOutput {
	return o
}

func (o GcpArrayOutput) Index(i pulumi.IntInput) GcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gcp {
		return vs[0].([]*Gcp)[vs[1].(int)]
	}).(GcpOutput)
}

type GcpMapOutput struct{ *pulumi.OutputState }

func (GcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gcp)(nil)).Elem()
}

func (o GcpMapOutput) ToGcpMapOutput() GcpMapOutput {
	return o
}

func (o GcpMapOutput) ToGcpMapOutputWithContext(ctx context.Context) GcpMapOutput {
	return o
}

func (o GcpMapOutput) MapIndex(k pulumi.StringInput) GcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gcp {
		return vs[0].(map[string]*Gcp)[vs[1].(string)]
	}).(GcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpInput)(nil)).Elem(), &Gcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpArrayInput)(nil)).Elem(), GcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMapInput)(nil)).Elem(), GcpMap{})
	pulumi.RegisterOutputType(GcpOutput{})
	pulumi.RegisterOutputType(GcpArrayOutput{})
	pulumi.RegisterOutputType(GcpMapOutput{})
}
