// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudaccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a VMware vRA cloudaccount.VSphere data source.
//
// ## Example Usage
// ### S
//
// **vSphere cloud account data source by its id:**
//
// This is an example of how to read the cloud account data source using its id.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudaccount.LookupVSphere(ctx, &cloudaccount.LookupVSphereArgs{
// 			Id: pulumi.StringRef(_var.Vra_cloud_account_vsphere_id),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// **vSphere cloud account data source by its name:**
//
// This is an example of how to read the cloud account data source using its name.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vra/sdk/go/vra/cloudaccount"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-vra/sdk/go/vra/cloudaccount"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudaccount.LookupVSphere(ctx, &cloudaccount.LookupVSphereArgs{
// 			Name: pulumi.StringRef(_var.Vra_cloud_account_vsphere_name),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupVSphere(ctx *pulumi.Context, args *LookupVSphereArgs, opts ...pulumi.InvokeOption) (*LookupVSphereResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupVSphereResult
	err := ctx.Invoke("vra:cloudaccount/getVSphere:getVSphere", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVSphere.
type LookupVSphereArgs struct {
	// The id of this vSphere cloud account.
	Id *string `pulumi:"id"`
	// The name of this vSphere cloud account.
	Name *string `pulumi:"name"`
	// A set of tag keys and optional values that were set on this resource.
	// example:[ { "key" : "vmware", "value": "provider" } ]
	Tags []GetVSphereTag `pulumi:"tags"`
}

// A collection of values returned by getVSphere.
type LookupVSphereResult struct {
	// Cloud accounts associated with this cloud account.
	AssociatedCloudAccountIds []string `pulumi:"associatedCloudAccountIds"`
	// Date when the entity was created. The date is in ISO 6801 and UTC.
	CreatedAt string `pulumi:"createdAt"`
	Dcid      string `pulumi:"dcid"`
	// A human-friendly description.
	Description string `pulumi:"description"`
	// The IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.
	Hostname string           `pulumi:"hostname"`
	Id       string           `pulumi:"id"`
	Links    []GetVSphereLink `pulumi:"links"`
	Name     string           `pulumi:"name"`
	// The id of the organization this entity belongs to.
	OrgId string `pulumi:"orgId"`
	// Email of the user that owns the entity.
	Owner string `pulumi:"owner"`
	// A set of region IDs that are enabled for this account.
	Regions []string `pulumi:"regions"`
	// A set of tag keys and optional values that were set on this resource.
	// example:[ { "key" : "vmware", "value": "provider" } ]
	Tags []GetVSphereTag `pulumi:"tags"`
	// Date when the entity was last updated. The date is ISO 8601 and UTC.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vSphere username to authenticate the vsphere account.
	Username string `pulumi:"username"`
}

func LookupVSphereOutput(ctx *pulumi.Context, args LookupVSphereOutputArgs, opts ...pulumi.InvokeOption) LookupVSphereResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVSphereResult, error) {
			args := v.(LookupVSphereArgs)
			r, err := LookupVSphere(ctx, &args, opts...)
			var s LookupVSphereResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVSphereResultOutput)
}

// A collection of arguments for invoking getVSphere.
type LookupVSphereOutputArgs struct {
	// The id of this vSphere cloud account.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of this vSphere cloud account.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A set of tag keys and optional values that were set on this resource.
	// example:[ { "key" : "vmware", "value": "provider" } ]
	Tags GetVSphereTagArrayInput `pulumi:"tags"`
}

func (LookupVSphereOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVSphereArgs)(nil)).Elem()
}

// A collection of values returned by getVSphere.
type LookupVSphereResultOutput struct{ *pulumi.OutputState }

func (LookupVSphereResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVSphereResult)(nil)).Elem()
}

func (o LookupVSphereResultOutput) ToLookupVSphereResultOutput() LookupVSphereResultOutput {
	return o
}

func (o LookupVSphereResultOutput) ToLookupVSphereResultOutputWithContext(ctx context.Context) LookupVSphereResultOutput {
	return o
}

// Cloud accounts associated with this cloud account.
func (o LookupVSphereResultOutput) AssociatedCloudAccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []string { return v.AssociatedCloudAccountIds }).(pulumi.StringArrayOutput)
}

// Date when the entity was created. The date is in ISO 6801 and UTC.
func (o LookupVSphereResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupVSphereResultOutput) Dcid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Dcid }).(pulumi.StringOutput)
}

// A human-friendly description.
func (o LookupVSphereResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Description }).(pulumi.StringOutput)
}

// The IP address or FQDN of the vCenter Server. The cloud proxy belongs on this vCenter.
func (o LookupVSphereResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o LookupVSphereResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVSphereResultOutput) Links() GetVSphereLinkArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []GetVSphereLink { return v.Links }).(GetVSphereLinkArrayOutput)
}

func (o LookupVSphereResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization this entity belongs to.
func (o LookupVSphereResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Email of the user that owns the entity.
func (o LookupVSphereResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Owner }).(pulumi.StringOutput)
}

// A set of region IDs that are enabled for this account.
func (o LookupVSphereResultOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// A set of tag keys and optional values that were set on this resource.
// example:[ { "key" : "vmware", "value": "provider" } ]
func (o LookupVSphereResultOutput) Tags() GetVSphereTagArrayOutput {
	return o.ApplyT(func(v LookupVSphereResult) []GetVSphereTag { return v.Tags }).(GetVSphereTagArrayOutput)
}

// Date when the entity was last updated. The date is ISO 8601 and UTC.
func (o LookupVSphereResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vSphere username to authenticate the vsphere account.
func (o LookupVSphereResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVSphereResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVSphereResultOutput{})
}
