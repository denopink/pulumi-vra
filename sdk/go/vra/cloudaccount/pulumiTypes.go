// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudaccount

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AwsLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// AwsLinkInput is an input type that accepts AwsLinkArgs and AwsLinkOutput values.
// You can construct a concrete instance of `AwsLinkInput` via:
//
//          AwsLinkArgs{...}
type AwsLinkInput interface {
	pulumi.Input

	ToAwsLinkOutput() AwsLinkOutput
	ToAwsLinkOutputWithContext(context.Context) AwsLinkOutput
}

type AwsLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (AwsLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsLink)(nil)).Elem()
}

func (i AwsLinkArgs) ToAwsLinkOutput() AwsLinkOutput {
	return i.ToAwsLinkOutputWithContext(context.Background())
}

func (i AwsLinkArgs) ToAwsLinkOutputWithContext(ctx context.Context) AwsLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLinkOutput)
}

// AwsLinkArrayInput is an input type that accepts AwsLinkArray and AwsLinkArrayOutput values.
// You can construct a concrete instance of `AwsLinkArrayInput` via:
//
//          AwsLinkArray{ AwsLinkArgs{...} }
type AwsLinkArrayInput interface {
	pulumi.Input

	ToAwsLinkArrayOutput() AwsLinkArrayOutput
	ToAwsLinkArrayOutputWithContext(context.Context) AwsLinkArrayOutput
}

type AwsLinkArray []AwsLinkInput

func (AwsLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsLink)(nil)).Elem()
}

func (i AwsLinkArray) ToAwsLinkArrayOutput() AwsLinkArrayOutput {
	return i.ToAwsLinkArrayOutputWithContext(context.Background())
}

func (i AwsLinkArray) ToAwsLinkArrayOutputWithContext(ctx context.Context) AwsLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsLinkArrayOutput)
}

type AwsLinkOutput struct{ *pulumi.OutputState }

func (AwsLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsLink)(nil)).Elem()
}

func (o AwsLinkOutput) ToAwsLinkOutput() AwsLinkOutput {
	return o
}

func (o AwsLinkOutput) ToAwsLinkOutputWithContext(ctx context.Context) AwsLinkOutput {
	return o
}

func (o AwsLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o AwsLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AwsLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o AwsLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v AwsLink) string { return v.Rel }).(pulumi.StringOutput)
}

type AwsLinkArrayOutput struct{ *pulumi.OutputState }

func (AwsLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsLink)(nil)).Elem()
}

func (o AwsLinkArrayOutput) ToAwsLinkArrayOutput() AwsLinkArrayOutput {
	return o
}

func (o AwsLinkArrayOutput) ToAwsLinkArrayOutputWithContext(ctx context.Context) AwsLinkArrayOutput {
	return o
}

func (o AwsLinkArrayOutput) Index(i pulumi.IntInput) AwsLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AwsLink {
		return vs[0].([]AwsLink)[vs[1].(int)]
	}).(AwsLinkOutput)
}

type AwsTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// AwsTagInput is an input type that accepts AwsTagArgs and AwsTagOutput values.
// You can construct a concrete instance of `AwsTagInput` via:
//
//          AwsTagArgs{...}
type AwsTagInput interface {
	pulumi.Input

	ToAwsTagOutput() AwsTagOutput
	ToAwsTagOutputWithContext(context.Context) AwsTagOutput
}

type AwsTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AwsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsTag)(nil)).Elem()
}

func (i AwsTagArgs) ToAwsTagOutput() AwsTagOutput {
	return i.ToAwsTagOutputWithContext(context.Background())
}

func (i AwsTagArgs) ToAwsTagOutputWithContext(ctx context.Context) AwsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsTagOutput)
}

// AwsTagArrayInput is an input type that accepts AwsTagArray and AwsTagArrayOutput values.
// You can construct a concrete instance of `AwsTagArrayInput` via:
//
//          AwsTagArray{ AwsTagArgs{...} }
type AwsTagArrayInput interface {
	pulumi.Input

	ToAwsTagArrayOutput() AwsTagArrayOutput
	ToAwsTagArrayOutputWithContext(context.Context) AwsTagArrayOutput
}

type AwsTagArray []AwsTagInput

func (AwsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsTag)(nil)).Elem()
}

func (i AwsTagArray) ToAwsTagArrayOutput() AwsTagArrayOutput {
	return i.ToAwsTagArrayOutputWithContext(context.Background())
}

func (i AwsTagArray) ToAwsTagArrayOutputWithContext(ctx context.Context) AwsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsTagArrayOutput)
}

type AwsTagOutput struct{ *pulumi.OutputState }

func (AwsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsTag)(nil)).Elem()
}

func (o AwsTagOutput) ToAwsTagOutput() AwsTagOutput {
	return o
}

func (o AwsTagOutput) ToAwsTagOutputWithContext(ctx context.Context) AwsTagOutput {
	return o
}

func (o AwsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AwsTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o AwsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AwsTag) string { return v.Value }).(pulumi.StringOutput)
}

type AwsTagArrayOutput struct{ *pulumi.OutputState }

func (AwsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AwsTag)(nil)).Elem()
}

func (o AwsTagArrayOutput) ToAwsTagArrayOutput() AwsTagArrayOutput {
	return o
}

func (o AwsTagArrayOutput) ToAwsTagArrayOutputWithContext(ctx context.Context) AwsTagArrayOutput {
	return o
}

func (o AwsTagArrayOutput) Index(i pulumi.IntInput) AwsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AwsTag {
		return vs[0].([]AwsTag)[vs[1].(int)]
	}).(AwsTagOutput)
}

type AzureLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// AzureLinkInput is an input type that accepts AzureLinkArgs and AzureLinkOutput values.
// You can construct a concrete instance of `AzureLinkInput` via:
//
//          AzureLinkArgs{...}
type AzureLinkInput interface {
	pulumi.Input

	ToAzureLinkOutput() AzureLinkOutput
	ToAzureLinkOutputWithContext(context.Context) AzureLinkOutput
}

type AzureLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (AzureLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureLink)(nil)).Elem()
}

func (i AzureLinkArgs) ToAzureLinkOutput() AzureLinkOutput {
	return i.ToAzureLinkOutputWithContext(context.Background())
}

func (i AzureLinkArgs) ToAzureLinkOutputWithContext(ctx context.Context) AzureLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureLinkOutput)
}

// AzureLinkArrayInput is an input type that accepts AzureLinkArray and AzureLinkArrayOutput values.
// You can construct a concrete instance of `AzureLinkArrayInput` via:
//
//          AzureLinkArray{ AzureLinkArgs{...} }
type AzureLinkArrayInput interface {
	pulumi.Input

	ToAzureLinkArrayOutput() AzureLinkArrayOutput
	ToAzureLinkArrayOutputWithContext(context.Context) AzureLinkArrayOutput
}

type AzureLinkArray []AzureLinkInput

func (AzureLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureLink)(nil)).Elem()
}

func (i AzureLinkArray) ToAzureLinkArrayOutput() AzureLinkArrayOutput {
	return i.ToAzureLinkArrayOutputWithContext(context.Background())
}

func (i AzureLinkArray) ToAzureLinkArrayOutputWithContext(ctx context.Context) AzureLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureLinkArrayOutput)
}

type AzureLinkOutput struct{ *pulumi.OutputState }

func (AzureLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureLink)(nil)).Elem()
}

func (o AzureLinkOutput) ToAzureLinkOutput() AzureLinkOutput {
	return o
}

func (o AzureLinkOutput) ToAzureLinkOutputWithContext(ctx context.Context) AzureLinkOutput {
	return o
}

func (o AzureLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o AzureLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o AzureLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v AzureLink) string { return v.Rel }).(pulumi.StringOutput)
}

type AzureLinkArrayOutput struct{ *pulumi.OutputState }

func (AzureLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureLink)(nil)).Elem()
}

func (o AzureLinkArrayOutput) ToAzureLinkArrayOutput() AzureLinkArrayOutput {
	return o
}

func (o AzureLinkArrayOutput) ToAzureLinkArrayOutputWithContext(ctx context.Context) AzureLinkArrayOutput {
	return o
}

func (o AzureLinkArrayOutput) Index(i pulumi.IntInput) AzureLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureLink {
		return vs[0].([]AzureLink)[vs[1].(int)]
	}).(AzureLinkOutput)
}

type AzureTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// AzureTagInput is an input type that accepts AzureTagArgs and AzureTagOutput values.
// You can construct a concrete instance of `AzureTagInput` via:
//
//          AzureTagArgs{...}
type AzureTagInput interface {
	pulumi.Input

	ToAzureTagOutput() AzureTagOutput
	ToAzureTagOutputWithContext(context.Context) AzureTagOutput
}

type AzureTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AzureTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTag)(nil)).Elem()
}

func (i AzureTagArgs) ToAzureTagOutput() AzureTagOutput {
	return i.ToAzureTagOutputWithContext(context.Background())
}

func (i AzureTagArgs) ToAzureTagOutputWithContext(ctx context.Context) AzureTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTagOutput)
}

// AzureTagArrayInput is an input type that accepts AzureTagArray and AzureTagArrayOutput values.
// You can construct a concrete instance of `AzureTagArrayInput` via:
//
//          AzureTagArray{ AzureTagArgs{...} }
type AzureTagArrayInput interface {
	pulumi.Input

	ToAzureTagArrayOutput() AzureTagArrayOutput
	ToAzureTagArrayOutputWithContext(context.Context) AzureTagArrayOutput
}

type AzureTagArray []AzureTagInput

func (AzureTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureTag)(nil)).Elem()
}

func (i AzureTagArray) ToAzureTagArrayOutput() AzureTagArrayOutput {
	return i.ToAzureTagArrayOutputWithContext(context.Background())
}

func (i AzureTagArray) ToAzureTagArrayOutputWithContext(ctx context.Context) AzureTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTagArrayOutput)
}

type AzureTagOutput struct{ *pulumi.OutputState }

func (AzureTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTag)(nil)).Elem()
}

func (o AzureTagOutput) ToAzureTagOutput() AzureTagOutput {
	return o
}

func (o AzureTagOutput) ToAzureTagOutputWithContext(ctx context.Context) AzureTagOutput {
	return o
}

func (o AzureTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o AzureTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTag) string { return v.Value }).(pulumi.StringOutput)
}

type AzureTagArrayOutput struct{ *pulumi.OutputState }

func (AzureTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureTag)(nil)).Elem()
}

func (o AzureTagArrayOutput) ToAzureTagArrayOutput() AzureTagArrayOutput {
	return o
}

func (o AzureTagArrayOutput) ToAzureTagArrayOutputWithContext(ctx context.Context) AzureTagArrayOutput {
	return o
}

func (o AzureTagArrayOutput) Index(i pulumi.IntInput) AzureTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureTag {
		return vs[0].([]AzureTag)[vs[1].(int)]
	}).(AzureTagOutput)
}

type GcpLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GcpLinkInput is an input type that accepts GcpLinkArgs and GcpLinkOutput values.
// You can construct a concrete instance of `GcpLinkInput` via:
//
//          GcpLinkArgs{...}
type GcpLinkInput interface {
	pulumi.Input

	ToGcpLinkOutput() GcpLinkOutput
	ToGcpLinkOutputWithContext(context.Context) GcpLinkOutput
}

type GcpLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GcpLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpLink)(nil)).Elem()
}

func (i GcpLinkArgs) ToGcpLinkOutput() GcpLinkOutput {
	return i.ToGcpLinkOutputWithContext(context.Background())
}

func (i GcpLinkArgs) ToGcpLinkOutputWithContext(ctx context.Context) GcpLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpLinkOutput)
}

// GcpLinkArrayInput is an input type that accepts GcpLinkArray and GcpLinkArrayOutput values.
// You can construct a concrete instance of `GcpLinkArrayInput` via:
//
//          GcpLinkArray{ GcpLinkArgs{...} }
type GcpLinkArrayInput interface {
	pulumi.Input

	ToGcpLinkArrayOutput() GcpLinkArrayOutput
	ToGcpLinkArrayOutputWithContext(context.Context) GcpLinkArrayOutput
}

type GcpLinkArray []GcpLinkInput

func (GcpLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpLink)(nil)).Elem()
}

func (i GcpLinkArray) ToGcpLinkArrayOutput() GcpLinkArrayOutput {
	return i.ToGcpLinkArrayOutputWithContext(context.Background())
}

func (i GcpLinkArray) ToGcpLinkArrayOutputWithContext(ctx context.Context) GcpLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpLinkArrayOutput)
}

type GcpLinkOutput struct{ *pulumi.OutputState }

func (GcpLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpLink)(nil)).Elem()
}

func (o GcpLinkOutput) ToGcpLinkOutput() GcpLinkOutput {
	return o
}

func (o GcpLinkOutput) ToGcpLinkOutputWithContext(ctx context.Context) GcpLinkOutput {
	return o
}

func (o GcpLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcpLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GcpLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GcpLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GcpLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GcpLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GcpLinkArrayOutput struct{ *pulumi.OutputState }

func (GcpLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpLink)(nil)).Elem()
}

func (o GcpLinkArrayOutput) ToGcpLinkArrayOutput() GcpLinkArrayOutput {
	return o
}

func (o GcpLinkArrayOutput) ToGcpLinkArrayOutputWithContext(ctx context.Context) GcpLinkArrayOutput {
	return o
}

func (o GcpLinkArrayOutput) Index(i pulumi.IntInput) GcpLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GcpLink {
		return vs[0].([]GcpLink)[vs[1].(int)]
	}).(GcpLinkOutput)
}

type GcpTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GcpTagInput is an input type that accepts GcpTagArgs and GcpTagOutput values.
// You can construct a concrete instance of `GcpTagInput` via:
//
//          GcpTagArgs{...}
type GcpTagInput interface {
	pulumi.Input

	ToGcpTagOutput() GcpTagOutput
	ToGcpTagOutputWithContext(context.Context) GcpTagOutput
}

type GcpTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GcpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpTag)(nil)).Elem()
}

func (i GcpTagArgs) ToGcpTagOutput() GcpTagOutput {
	return i.ToGcpTagOutputWithContext(context.Background())
}

func (i GcpTagArgs) ToGcpTagOutputWithContext(ctx context.Context) GcpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpTagOutput)
}

// GcpTagArrayInput is an input type that accepts GcpTagArray and GcpTagArrayOutput values.
// You can construct a concrete instance of `GcpTagArrayInput` via:
//
//          GcpTagArray{ GcpTagArgs{...} }
type GcpTagArrayInput interface {
	pulumi.Input

	ToGcpTagArrayOutput() GcpTagArrayOutput
	ToGcpTagArrayOutputWithContext(context.Context) GcpTagArrayOutput
}

type GcpTagArray []GcpTagInput

func (GcpTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpTag)(nil)).Elem()
}

func (i GcpTagArray) ToGcpTagArrayOutput() GcpTagArrayOutput {
	return i.ToGcpTagArrayOutputWithContext(context.Background())
}

func (i GcpTagArray) ToGcpTagArrayOutputWithContext(ctx context.Context) GcpTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpTagArrayOutput)
}

type GcpTagOutput struct{ *pulumi.OutputState }

func (GcpTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpTag)(nil)).Elem()
}

func (o GcpTagOutput) ToGcpTagOutput() GcpTagOutput {
	return o
}

func (o GcpTagOutput) ToGcpTagOutputWithContext(ctx context.Context) GcpTagOutput {
	return o
}

func (o GcpTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GcpTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GcpTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GcpTag) string { return v.Value }).(pulumi.StringOutput)
}

type GcpTagArrayOutput struct{ *pulumi.OutputState }

func (GcpTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcpTag)(nil)).Elem()
}

func (o GcpTagArrayOutput) ToGcpTagArrayOutput() GcpTagArrayOutput {
	return o
}

func (o GcpTagArrayOutput) ToGcpTagArrayOutputWithContext(ctx context.Context) GcpTagArrayOutput {
	return o
}

func (o GcpTagArrayOutput) Index(i pulumi.IntInput) GcpTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GcpTag {
		return vs[0].([]GcpTag)[vs[1].(int)]
	}).(GcpTagOutput)
}

type NsxtLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// NsxtLinkInput is an input type that accepts NsxtLinkArgs and NsxtLinkOutput values.
// You can construct a concrete instance of `NsxtLinkInput` via:
//
//          NsxtLinkArgs{...}
type NsxtLinkInput interface {
	pulumi.Input

	ToNsxtLinkOutput() NsxtLinkOutput
	ToNsxtLinkOutputWithContext(context.Context) NsxtLinkOutput
}

type NsxtLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (NsxtLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtLink)(nil)).Elem()
}

func (i NsxtLinkArgs) ToNsxtLinkOutput() NsxtLinkOutput {
	return i.ToNsxtLinkOutputWithContext(context.Background())
}

func (i NsxtLinkArgs) ToNsxtLinkOutputWithContext(ctx context.Context) NsxtLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtLinkOutput)
}

// NsxtLinkArrayInput is an input type that accepts NsxtLinkArray and NsxtLinkArrayOutput values.
// You can construct a concrete instance of `NsxtLinkArrayInput` via:
//
//          NsxtLinkArray{ NsxtLinkArgs{...} }
type NsxtLinkArrayInput interface {
	pulumi.Input

	ToNsxtLinkArrayOutput() NsxtLinkArrayOutput
	ToNsxtLinkArrayOutputWithContext(context.Context) NsxtLinkArrayOutput
}

type NsxtLinkArray []NsxtLinkInput

func (NsxtLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxtLink)(nil)).Elem()
}

func (i NsxtLinkArray) ToNsxtLinkArrayOutput() NsxtLinkArrayOutput {
	return i.ToNsxtLinkArrayOutputWithContext(context.Background())
}

func (i NsxtLinkArray) ToNsxtLinkArrayOutputWithContext(ctx context.Context) NsxtLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtLinkArrayOutput)
}

type NsxtLinkOutput struct{ *pulumi.OutputState }

func (NsxtLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtLink)(nil)).Elem()
}

func (o NsxtLinkOutput) ToNsxtLinkOutput() NsxtLinkOutput {
	return o
}

func (o NsxtLinkOutput) ToNsxtLinkOutputWithContext(ctx context.Context) NsxtLinkOutput {
	return o
}

func (o NsxtLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsxtLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o NsxtLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NsxtLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o NsxtLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v NsxtLink) string { return v.Rel }).(pulumi.StringOutput)
}

type NsxtLinkArrayOutput struct{ *pulumi.OutputState }

func (NsxtLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxtLink)(nil)).Elem()
}

func (o NsxtLinkArrayOutput) ToNsxtLinkArrayOutput() NsxtLinkArrayOutput {
	return o
}

func (o NsxtLinkArrayOutput) ToNsxtLinkArrayOutputWithContext(ctx context.Context) NsxtLinkArrayOutput {
	return o
}

func (o NsxtLinkArrayOutput) Index(i pulumi.IntInput) NsxtLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsxtLink {
		return vs[0].([]NsxtLink)[vs[1].(int)]
	}).(NsxtLinkOutput)
}

type NsxtTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// NsxtTagInput is an input type that accepts NsxtTagArgs and NsxtTagOutput values.
// You can construct a concrete instance of `NsxtTagInput` via:
//
//          NsxtTagArgs{...}
type NsxtTagInput interface {
	pulumi.Input

	ToNsxtTagOutput() NsxtTagOutput
	ToNsxtTagOutputWithContext(context.Context) NsxtTagOutput
}

type NsxtTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NsxtTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtTag)(nil)).Elem()
}

func (i NsxtTagArgs) ToNsxtTagOutput() NsxtTagOutput {
	return i.ToNsxtTagOutputWithContext(context.Background())
}

func (i NsxtTagArgs) ToNsxtTagOutputWithContext(ctx context.Context) NsxtTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtTagOutput)
}

// NsxtTagArrayInput is an input type that accepts NsxtTagArray and NsxtTagArrayOutput values.
// You can construct a concrete instance of `NsxtTagArrayInput` via:
//
//          NsxtTagArray{ NsxtTagArgs{...} }
type NsxtTagArrayInput interface {
	pulumi.Input

	ToNsxtTagArrayOutput() NsxtTagArrayOutput
	ToNsxtTagArrayOutputWithContext(context.Context) NsxtTagArrayOutput
}

type NsxtTagArray []NsxtTagInput

func (NsxtTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxtTag)(nil)).Elem()
}

func (i NsxtTagArray) ToNsxtTagArrayOutput() NsxtTagArrayOutput {
	return i.ToNsxtTagArrayOutputWithContext(context.Background())
}

func (i NsxtTagArray) ToNsxtTagArrayOutputWithContext(ctx context.Context) NsxtTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxtTagArrayOutput)
}

type NsxtTagOutput struct{ *pulumi.OutputState }

func (NsxtTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxtTag)(nil)).Elem()
}

func (o NsxtTagOutput) ToNsxtTagOutput() NsxtTagOutput {
	return o
}

func (o NsxtTagOutput) ToNsxtTagOutputWithContext(ctx context.Context) NsxtTagOutput {
	return o
}

func (o NsxtTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NsxtTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o NsxtTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NsxtTag) string { return v.Value }).(pulumi.StringOutput)
}

type NsxtTagArrayOutput struct{ *pulumi.OutputState }

func (NsxtTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxtTag)(nil)).Elem()
}

func (o NsxtTagArrayOutput) ToNsxtTagArrayOutput() NsxtTagArrayOutput {
	return o
}

func (o NsxtTagArrayOutput) ToNsxtTagArrayOutputWithContext(ctx context.Context) NsxtTagArrayOutput {
	return o
}

func (o NsxtTagArrayOutput) Index(i pulumi.IntInput) NsxtTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsxtTag {
		return vs[0].([]NsxtTag)[vs[1].(int)]
	}).(NsxtTagOutput)
}

type NsxvLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// NsxvLinkInput is an input type that accepts NsxvLinkArgs and NsxvLinkOutput values.
// You can construct a concrete instance of `NsxvLinkInput` via:
//
//          NsxvLinkArgs{...}
type NsxvLinkInput interface {
	pulumi.Input

	ToNsxvLinkOutput() NsxvLinkOutput
	ToNsxvLinkOutputWithContext(context.Context) NsxvLinkOutput
}

type NsxvLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (NsxvLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxvLink)(nil)).Elem()
}

func (i NsxvLinkArgs) ToNsxvLinkOutput() NsxvLinkOutput {
	return i.ToNsxvLinkOutputWithContext(context.Background())
}

func (i NsxvLinkArgs) ToNsxvLinkOutputWithContext(ctx context.Context) NsxvLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvLinkOutput)
}

// NsxvLinkArrayInput is an input type that accepts NsxvLinkArray and NsxvLinkArrayOutput values.
// You can construct a concrete instance of `NsxvLinkArrayInput` via:
//
//          NsxvLinkArray{ NsxvLinkArgs{...} }
type NsxvLinkArrayInput interface {
	pulumi.Input

	ToNsxvLinkArrayOutput() NsxvLinkArrayOutput
	ToNsxvLinkArrayOutputWithContext(context.Context) NsxvLinkArrayOutput
}

type NsxvLinkArray []NsxvLinkInput

func (NsxvLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxvLink)(nil)).Elem()
}

func (i NsxvLinkArray) ToNsxvLinkArrayOutput() NsxvLinkArrayOutput {
	return i.ToNsxvLinkArrayOutputWithContext(context.Background())
}

func (i NsxvLinkArray) ToNsxvLinkArrayOutputWithContext(ctx context.Context) NsxvLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvLinkArrayOutput)
}

type NsxvLinkOutput struct{ *pulumi.OutputState }

func (NsxvLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxvLink)(nil)).Elem()
}

func (o NsxvLinkOutput) ToNsxvLinkOutput() NsxvLinkOutput {
	return o
}

func (o NsxvLinkOutput) ToNsxvLinkOutputWithContext(ctx context.Context) NsxvLinkOutput {
	return o
}

func (o NsxvLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsxvLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o NsxvLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NsxvLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o NsxvLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v NsxvLink) string { return v.Rel }).(pulumi.StringOutput)
}

type NsxvLinkArrayOutput struct{ *pulumi.OutputState }

func (NsxvLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxvLink)(nil)).Elem()
}

func (o NsxvLinkArrayOutput) ToNsxvLinkArrayOutput() NsxvLinkArrayOutput {
	return o
}

func (o NsxvLinkArrayOutput) ToNsxvLinkArrayOutputWithContext(ctx context.Context) NsxvLinkArrayOutput {
	return o
}

func (o NsxvLinkArrayOutput) Index(i pulumi.IntInput) NsxvLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsxvLink {
		return vs[0].([]NsxvLink)[vs[1].(int)]
	}).(NsxvLinkOutput)
}

type NsxvTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// NsxvTagInput is an input type that accepts NsxvTagArgs and NsxvTagOutput values.
// You can construct a concrete instance of `NsxvTagInput` via:
//
//          NsxvTagArgs{...}
type NsxvTagInput interface {
	pulumi.Input

	ToNsxvTagOutput() NsxvTagOutput
	ToNsxvTagOutputWithContext(context.Context) NsxvTagOutput
}

type NsxvTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (NsxvTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxvTag)(nil)).Elem()
}

func (i NsxvTagArgs) ToNsxvTagOutput() NsxvTagOutput {
	return i.ToNsxvTagOutputWithContext(context.Background())
}

func (i NsxvTagArgs) ToNsxvTagOutputWithContext(ctx context.Context) NsxvTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvTagOutput)
}

// NsxvTagArrayInput is an input type that accepts NsxvTagArray and NsxvTagArrayOutput values.
// You can construct a concrete instance of `NsxvTagArrayInput` via:
//
//          NsxvTagArray{ NsxvTagArgs{...} }
type NsxvTagArrayInput interface {
	pulumi.Input

	ToNsxvTagArrayOutput() NsxvTagArrayOutput
	ToNsxvTagArrayOutputWithContext(context.Context) NsxvTagArrayOutput
}

type NsxvTagArray []NsxvTagInput

func (NsxvTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxvTag)(nil)).Elem()
}

func (i NsxvTagArray) ToNsxvTagArrayOutput() NsxvTagArrayOutput {
	return i.ToNsxvTagArrayOutputWithContext(context.Background())
}

func (i NsxvTagArray) ToNsxvTagArrayOutputWithContext(ctx context.Context) NsxvTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsxvTagArrayOutput)
}

type NsxvTagOutput struct{ *pulumi.OutputState }

func (NsxvTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxvTag)(nil)).Elem()
}

func (o NsxvTagOutput) ToNsxvTagOutput() NsxvTagOutput {
	return o
}

func (o NsxvTagOutput) ToNsxvTagOutputWithContext(ctx context.Context) NsxvTagOutput {
	return o
}

func (o NsxvTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NsxvTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o NsxvTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NsxvTag) string { return v.Value }).(pulumi.StringOutput)
}

type NsxvTagArrayOutput struct{ *pulumi.OutputState }

func (NsxvTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsxvTag)(nil)).Elem()
}

func (o NsxvTagArrayOutput) ToNsxvTagArrayOutput() NsxvTagArrayOutput {
	return o
}

func (o NsxvTagArrayOutput) ToNsxvTagArrayOutputWithContext(ctx context.Context) NsxvTagArrayOutput {
	return o
}

func (o NsxvTagArrayOutput) Index(i pulumi.IntInput) NsxvTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsxvTag {
		return vs[0].([]NsxvTag)[vs[1].(int)]
	}).(NsxvTagOutput)
}

type VSphereLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// VSphereLinkInput is an input type that accepts VSphereLinkArgs and VSphereLinkOutput values.
// You can construct a concrete instance of `VSphereLinkInput` via:
//
//          VSphereLinkArgs{...}
type VSphereLinkInput interface {
	pulumi.Input

	ToVSphereLinkOutput() VSphereLinkOutput
	ToVSphereLinkOutputWithContext(context.Context) VSphereLinkOutput
}

type VSphereLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (VSphereLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VSphereLink)(nil)).Elem()
}

func (i VSphereLinkArgs) ToVSphereLinkOutput() VSphereLinkOutput {
	return i.ToVSphereLinkOutputWithContext(context.Background())
}

func (i VSphereLinkArgs) ToVSphereLinkOutputWithContext(ctx context.Context) VSphereLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereLinkOutput)
}

// VSphereLinkArrayInput is an input type that accepts VSphereLinkArray and VSphereLinkArrayOutput values.
// You can construct a concrete instance of `VSphereLinkArrayInput` via:
//
//          VSphereLinkArray{ VSphereLinkArgs{...} }
type VSphereLinkArrayInput interface {
	pulumi.Input

	ToVSphereLinkArrayOutput() VSphereLinkArrayOutput
	ToVSphereLinkArrayOutputWithContext(context.Context) VSphereLinkArrayOutput
}

type VSphereLinkArray []VSphereLinkInput

func (VSphereLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VSphereLink)(nil)).Elem()
}

func (i VSphereLinkArray) ToVSphereLinkArrayOutput() VSphereLinkArrayOutput {
	return i.ToVSphereLinkArrayOutputWithContext(context.Background())
}

func (i VSphereLinkArray) ToVSphereLinkArrayOutputWithContext(ctx context.Context) VSphereLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereLinkArrayOutput)
}

type VSphereLinkOutput struct{ *pulumi.OutputState }

func (VSphereLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VSphereLink)(nil)).Elem()
}

func (o VSphereLinkOutput) ToVSphereLinkOutput() VSphereLinkOutput {
	return o
}

func (o VSphereLinkOutput) ToVSphereLinkOutputWithContext(ctx context.Context) VSphereLinkOutput {
	return o
}

func (o VSphereLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VSphereLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o VSphereLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VSphereLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o VSphereLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v VSphereLink) string { return v.Rel }).(pulumi.StringOutput)
}

type VSphereLinkArrayOutput struct{ *pulumi.OutputState }

func (VSphereLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VSphereLink)(nil)).Elem()
}

func (o VSphereLinkArrayOutput) ToVSphereLinkArrayOutput() VSphereLinkArrayOutput {
	return o
}

func (o VSphereLinkArrayOutput) ToVSphereLinkArrayOutputWithContext(ctx context.Context) VSphereLinkArrayOutput {
	return o
}

func (o VSphereLinkArrayOutput) Index(i pulumi.IntInput) VSphereLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VSphereLink {
		return vs[0].([]VSphereLink)[vs[1].(int)]
	}).(VSphereLinkOutput)
}

type VSphereTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VSphereTagInput is an input type that accepts VSphereTagArgs and VSphereTagOutput values.
// You can construct a concrete instance of `VSphereTagInput` via:
//
//          VSphereTagArgs{...}
type VSphereTagInput interface {
	pulumi.Input

	ToVSphereTagOutput() VSphereTagOutput
	ToVSphereTagOutputWithContext(context.Context) VSphereTagOutput
}

type VSphereTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VSphereTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VSphereTag)(nil)).Elem()
}

func (i VSphereTagArgs) ToVSphereTagOutput() VSphereTagOutput {
	return i.ToVSphereTagOutputWithContext(context.Background())
}

func (i VSphereTagArgs) ToVSphereTagOutputWithContext(ctx context.Context) VSphereTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereTagOutput)
}

// VSphereTagArrayInput is an input type that accepts VSphereTagArray and VSphereTagArrayOutput values.
// You can construct a concrete instance of `VSphereTagArrayInput` via:
//
//          VSphereTagArray{ VSphereTagArgs{...} }
type VSphereTagArrayInput interface {
	pulumi.Input

	ToVSphereTagArrayOutput() VSphereTagArrayOutput
	ToVSphereTagArrayOutputWithContext(context.Context) VSphereTagArrayOutput
}

type VSphereTagArray []VSphereTagInput

func (VSphereTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VSphereTag)(nil)).Elem()
}

func (i VSphereTagArray) ToVSphereTagArrayOutput() VSphereTagArrayOutput {
	return i.ToVSphereTagArrayOutputWithContext(context.Background())
}

func (i VSphereTagArray) ToVSphereTagArrayOutputWithContext(ctx context.Context) VSphereTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VSphereTagArrayOutput)
}

type VSphereTagOutput struct{ *pulumi.OutputState }

func (VSphereTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VSphereTag)(nil)).Elem()
}

func (o VSphereTagOutput) ToVSphereTagOutput() VSphereTagOutput {
	return o
}

func (o VSphereTagOutput) ToVSphereTagOutputWithContext(ctx context.Context) VSphereTagOutput {
	return o
}

func (o VSphereTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VSphereTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VSphereTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VSphereTag) string { return v.Value }).(pulumi.StringOutput)
}

type VSphereTagArrayOutput struct{ *pulumi.OutputState }

func (VSphereTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VSphereTag)(nil)).Elem()
}

func (o VSphereTagArrayOutput) ToVSphereTagArrayOutput() VSphereTagArrayOutput {
	return o
}

func (o VSphereTagArrayOutput) ToVSphereTagArrayOutputWithContext(ctx context.Context) VSphereTagArrayOutput {
	return o
}

func (o VSphereTagArrayOutput) Index(i pulumi.IntInput) VSphereTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VSphereTag {
		return vs[0].([]VSphereTag)[vs[1].(int)]
	}).(VSphereTagOutput)
}

type VmcLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// VmcLinkInput is an input type that accepts VmcLinkArgs and VmcLinkOutput values.
// You can construct a concrete instance of `VmcLinkInput` via:
//
//          VmcLinkArgs{...}
type VmcLinkInput interface {
	pulumi.Input

	ToVmcLinkOutput() VmcLinkOutput
	ToVmcLinkOutputWithContext(context.Context) VmcLinkOutput
}

type VmcLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (VmcLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmcLink)(nil)).Elem()
}

func (i VmcLinkArgs) ToVmcLinkOutput() VmcLinkOutput {
	return i.ToVmcLinkOutputWithContext(context.Background())
}

func (i VmcLinkArgs) ToVmcLinkOutputWithContext(ctx context.Context) VmcLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmcLinkOutput)
}

// VmcLinkArrayInput is an input type that accepts VmcLinkArray and VmcLinkArrayOutput values.
// You can construct a concrete instance of `VmcLinkArrayInput` via:
//
//          VmcLinkArray{ VmcLinkArgs{...} }
type VmcLinkArrayInput interface {
	pulumi.Input

	ToVmcLinkArrayOutput() VmcLinkArrayOutput
	ToVmcLinkArrayOutputWithContext(context.Context) VmcLinkArrayOutput
}

type VmcLinkArray []VmcLinkInput

func (VmcLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmcLink)(nil)).Elem()
}

func (i VmcLinkArray) ToVmcLinkArrayOutput() VmcLinkArrayOutput {
	return i.ToVmcLinkArrayOutputWithContext(context.Background())
}

func (i VmcLinkArray) ToVmcLinkArrayOutputWithContext(ctx context.Context) VmcLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmcLinkArrayOutput)
}

type VmcLinkOutput struct{ *pulumi.OutputState }

func (VmcLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmcLink)(nil)).Elem()
}

func (o VmcLinkOutput) ToVmcLinkOutput() VmcLinkOutput {
	return o
}

func (o VmcLinkOutput) ToVmcLinkOutputWithContext(ctx context.Context) VmcLinkOutput {
	return o
}

func (o VmcLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmcLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o VmcLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmcLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o VmcLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v VmcLink) string { return v.Rel }).(pulumi.StringOutput)
}

type VmcLinkArrayOutput struct{ *pulumi.OutputState }

func (VmcLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmcLink)(nil)).Elem()
}

func (o VmcLinkArrayOutput) ToVmcLinkArrayOutput() VmcLinkArrayOutput {
	return o
}

func (o VmcLinkArrayOutput) ToVmcLinkArrayOutputWithContext(ctx context.Context) VmcLinkArrayOutput {
	return o
}

func (o VmcLinkArrayOutput) Index(i pulumi.IntInput) VmcLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmcLink {
		return vs[0].([]VmcLink)[vs[1].(int)]
	}).(VmcLinkOutput)
}

type VmcTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// VmcTagInput is an input type that accepts VmcTagArgs and VmcTagOutput values.
// You can construct a concrete instance of `VmcTagInput` via:
//
//          VmcTagArgs{...}
type VmcTagInput interface {
	pulumi.Input

	ToVmcTagOutput() VmcTagOutput
	ToVmcTagOutputWithContext(context.Context) VmcTagOutput
}

type VmcTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (VmcTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmcTag)(nil)).Elem()
}

func (i VmcTagArgs) ToVmcTagOutput() VmcTagOutput {
	return i.ToVmcTagOutputWithContext(context.Background())
}

func (i VmcTagArgs) ToVmcTagOutputWithContext(ctx context.Context) VmcTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmcTagOutput)
}

// VmcTagArrayInput is an input type that accepts VmcTagArray and VmcTagArrayOutput values.
// You can construct a concrete instance of `VmcTagArrayInput` via:
//
//          VmcTagArray{ VmcTagArgs{...} }
type VmcTagArrayInput interface {
	pulumi.Input

	ToVmcTagArrayOutput() VmcTagArrayOutput
	ToVmcTagArrayOutputWithContext(context.Context) VmcTagArrayOutput
}

type VmcTagArray []VmcTagInput

func (VmcTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmcTag)(nil)).Elem()
}

func (i VmcTagArray) ToVmcTagArrayOutput() VmcTagArrayOutput {
	return i.ToVmcTagArrayOutputWithContext(context.Background())
}

func (i VmcTagArray) ToVmcTagArrayOutputWithContext(ctx context.Context) VmcTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmcTagArrayOutput)
}

type VmcTagOutput struct{ *pulumi.OutputState }

func (VmcTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmcTag)(nil)).Elem()
}

func (o VmcTagOutput) ToVmcTagOutput() VmcTagOutput {
	return o
}

func (o VmcTagOutput) ToVmcTagOutputWithContext(ctx context.Context) VmcTagOutput {
	return o
}

func (o VmcTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VmcTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o VmcTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VmcTag) string { return v.Value }).(pulumi.StringOutput)
}

type VmcTagArrayOutput struct{ *pulumi.OutputState }

func (VmcTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmcTag)(nil)).Elem()
}

func (o VmcTagArrayOutput) ToVmcTagArrayOutput() VmcTagArrayOutput {
	return o
}

func (o VmcTagArrayOutput) ToVmcTagArrayOutputWithContext(ctx context.Context) VmcTagArrayOutput {
	return o
}

func (o VmcTagArrayOutput) Index(i pulumi.IntInput) VmcTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmcTag {
		return vs[0].([]VmcTag)[vs[1].(int)]
	}).(VmcTagOutput)
}

type GetAwsLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetAwsLinkInput is an input type that accepts GetAwsLinkArgs and GetAwsLinkOutput values.
// You can construct a concrete instance of `GetAwsLinkInput` via:
//
//          GetAwsLinkArgs{...}
type GetAwsLinkInput interface {
	pulumi.Input

	ToGetAwsLinkOutput() GetAwsLinkOutput
	ToGetAwsLinkOutputWithContext(context.Context) GetAwsLinkOutput
}

type GetAwsLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetAwsLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsLink)(nil)).Elem()
}

func (i GetAwsLinkArgs) ToGetAwsLinkOutput() GetAwsLinkOutput {
	return i.ToGetAwsLinkOutputWithContext(context.Background())
}

func (i GetAwsLinkArgs) ToGetAwsLinkOutputWithContext(ctx context.Context) GetAwsLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsLinkOutput)
}

// GetAwsLinkArrayInput is an input type that accepts GetAwsLinkArray and GetAwsLinkArrayOutput values.
// You can construct a concrete instance of `GetAwsLinkArrayInput` via:
//
//          GetAwsLinkArray{ GetAwsLinkArgs{...} }
type GetAwsLinkArrayInput interface {
	pulumi.Input

	ToGetAwsLinkArrayOutput() GetAwsLinkArrayOutput
	ToGetAwsLinkArrayOutputWithContext(context.Context) GetAwsLinkArrayOutput
}

type GetAwsLinkArray []GetAwsLinkInput

func (GetAwsLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsLink)(nil)).Elem()
}

func (i GetAwsLinkArray) ToGetAwsLinkArrayOutput() GetAwsLinkArrayOutput {
	return i.ToGetAwsLinkArrayOutputWithContext(context.Background())
}

func (i GetAwsLinkArray) ToGetAwsLinkArrayOutputWithContext(ctx context.Context) GetAwsLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsLinkArrayOutput)
}

type GetAwsLinkOutput struct{ *pulumi.OutputState }

func (GetAwsLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsLink)(nil)).Elem()
}

func (o GetAwsLinkOutput) ToGetAwsLinkOutput() GetAwsLinkOutput {
	return o
}

func (o GetAwsLinkOutput) ToGetAwsLinkOutputWithContext(ctx context.Context) GetAwsLinkOutput {
	return o
}

func (o GetAwsLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAwsLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetAwsLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAwsLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetAwsLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetAwsLinkArrayOutput struct{ *pulumi.OutputState }

func (GetAwsLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsLink)(nil)).Elem()
}

func (o GetAwsLinkArrayOutput) ToGetAwsLinkArrayOutput() GetAwsLinkArrayOutput {
	return o
}

func (o GetAwsLinkArrayOutput) ToGetAwsLinkArrayOutputWithContext(ctx context.Context) GetAwsLinkArrayOutput {
	return o
}

func (o GetAwsLinkArrayOutput) Index(i pulumi.IntInput) GetAwsLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAwsLink {
		return vs[0].([]GetAwsLink)[vs[1].(int)]
	}).(GetAwsLinkOutput)
}

type GetAwsTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetAwsTagInput is an input type that accepts GetAwsTagArgs and GetAwsTagOutput values.
// You can construct a concrete instance of `GetAwsTagInput` via:
//
//          GetAwsTagArgs{...}
type GetAwsTagInput interface {
	pulumi.Input

	ToGetAwsTagOutput() GetAwsTagOutput
	ToGetAwsTagOutputWithContext(context.Context) GetAwsTagOutput
}

type GetAwsTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAwsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsTag)(nil)).Elem()
}

func (i GetAwsTagArgs) ToGetAwsTagOutput() GetAwsTagOutput {
	return i.ToGetAwsTagOutputWithContext(context.Background())
}

func (i GetAwsTagArgs) ToGetAwsTagOutputWithContext(ctx context.Context) GetAwsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsTagOutput)
}

// GetAwsTagArrayInput is an input type that accepts GetAwsTagArray and GetAwsTagArrayOutput values.
// You can construct a concrete instance of `GetAwsTagArrayInput` via:
//
//          GetAwsTagArray{ GetAwsTagArgs{...} }
type GetAwsTagArrayInput interface {
	pulumi.Input

	ToGetAwsTagArrayOutput() GetAwsTagArrayOutput
	ToGetAwsTagArrayOutputWithContext(context.Context) GetAwsTagArrayOutput
}

type GetAwsTagArray []GetAwsTagInput

func (GetAwsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsTag)(nil)).Elem()
}

func (i GetAwsTagArray) ToGetAwsTagArrayOutput() GetAwsTagArrayOutput {
	return i.ToGetAwsTagArrayOutputWithContext(context.Background())
}

func (i GetAwsTagArray) ToGetAwsTagArrayOutputWithContext(ctx context.Context) GetAwsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAwsTagArrayOutput)
}

type GetAwsTagOutput struct{ *pulumi.OutputState }

func (GetAwsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAwsTag)(nil)).Elem()
}

func (o GetAwsTagOutput) ToGetAwsTagOutput() GetAwsTagOutput {
	return o
}

func (o GetAwsTagOutput) ToGetAwsTagOutputWithContext(ctx context.Context) GetAwsTagOutput {
	return o
}

// Tag’s key.
func (o GetAwsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetAwsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAwsTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetAwsTagArrayOutput struct{ *pulumi.OutputState }

func (GetAwsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAwsTag)(nil)).Elem()
}

func (o GetAwsTagArrayOutput) ToGetAwsTagArrayOutput() GetAwsTagArrayOutput {
	return o
}

func (o GetAwsTagArrayOutput) ToGetAwsTagArrayOutputWithContext(ctx context.Context) GetAwsTagArrayOutput {
	return o
}

func (o GetAwsTagArrayOutput) Index(i pulumi.IntInput) GetAwsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAwsTag {
		return vs[0].([]GetAwsTag)[vs[1].(int)]
	}).(GetAwsTagOutput)
}

type GetAzureLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetAzureLinkInput is an input type that accepts GetAzureLinkArgs and GetAzureLinkOutput values.
// You can construct a concrete instance of `GetAzureLinkInput` via:
//
//          GetAzureLinkArgs{...}
type GetAzureLinkInput interface {
	pulumi.Input

	ToGetAzureLinkOutput() GetAzureLinkOutput
	ToGetAzureLinkOutputWithContext(context.Context) GetAzureLinkOutput
}

type GetAzureLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetAzureLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureLink)(nil)).Elem()
}

func (i GetAzureLinkArgs) ToGetAzureLinkOutput() GetAzureLinkOutput {
	return i.ToGetAzureLinkOutputWithContext(context.Background())
}

func (i GetAzureLinkArgs) ToGetAzureLinkOutputWithContext(ctx context.Context) GetAzureLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureLinkOutput)
}

// GetAzureLinkArrayInput is an input type that accepts GetAzureLinkArray and GetAzureLinkArrayOutput values.
// You can construct a concrete instance of `GetAzureLinkArrayInput` via:
//
//          GetAzureLinkArray{ GetAzureLinkArgs{...} }
type GetAzureLinkArrayInput interface {
	pulumi.Input

	ToGetAzureLinkArrayOutput() GetAzureLinkArrayOutput
	ToGetAzureLinkArrayOutputWithContext(context.Context) GetAzureLinkArrayOutput
}

type GetAzureLinkArray []GetAzureLinkInput

func (GetAzureLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureLink)(nil)).Elem()
}

func (i GetAzureLinkArray) ToGetAzureLinkArrayOutput() GetAzureLinkArrayOutput {
	return i.ToGetAzureLinkArrayOutputWithContext(context.Background())
}

func (i GetAzureLinkArray) ToGetAzureLinkArrayOutputWithContext(ctx context.Context) GetAzureLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureLinkArrayOutput)
}

type GetAzureLinkOutput struct{ *pulumi.OutputState }

func (GetAzureLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureLink)(nil)).Elem()
}

func (o GetAzureLinkOutput) ToGetAzureLinkOutput() GetAzureLinkOutput {
	return o
}

func (o GetAzureLinkOutput) ToGetAzureLinkOutputWithContext(ctx context.Context) GetAzureLinkOutput {
	return o
}

func (o GetAzureLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAzureLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetAzureLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAzureLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetAzureLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetAzureLinkArrayOutput struct{ *pulumi.OutputState }

func (GetAzureLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureLink)(nil)).Elem()
}

func (o GetAzureLinkArrayOutput) ToGetAzureLinkArrayOutput() GetAzureLinkArrayOutput {
	return o
}

func (o GetAzureLinkArrayOutput) ToGetAzureLinkArrayOutputWithContext(ctx context.Context) GetAzureLinkArrayOutput {
	return o
}

func (o GetAzureLinkArrayOutput) Index(i pulumi.IntInput) GetAzureLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAzureLink {
		return vs[0].([]GetAzureLink)[vs[1].(int)]
	}).(GetAzureLinkOutput)
}

type GetAzureTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetAzureTagInput is an input type that accepts GetAzureTagArgs and GetAzureTagOutput values.
// You can construct a concrete instance of `GetAzureTagInput` via:
//
//          GetAzureTagArgs{...}
type GetAzureTagInput interface {
	pulumi.Input

	ToGetAzureTagOutput() GetAzureTagOutput
	ToGetAzureTagOutputWithContext(context.Context) GetAzureTagOutput
}

type GetAzureTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAzureTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureTag)(nil)).Elem()
}

func (i GetAzureTagArgs) ToGetAzureTagOutput() GetAzureTagOutput {
	return i.ToGetAzureTagOutputWithContext(context.Background())
}

func (i GetAzureTagArgs) ToGetAzureTagOutputWithContext(ctx context.Context) GetAzureTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureTagOutput)
}

// GetAzureTagArrayInput is an input type that accepts GetAzureTagArray and GetAzureTagArrayOutput values.
// You can construct a concrete instance of `GetAzureTagArrayInput` via:
//
//          GetAzureTagArray{ GetAzureTagArgs{...} }
type GetAzureTagArrayInput interface {
	pulumi.Input

	ToGetAzureTagArrayOutput() GetAzureTagArrayOutput
	ToGetAzureTagArrayOutputWithContext(context.Context) GetAzureTagArrayOutput
}

type GetAzureTagArray []GetAzureTagInput

func (GetAzureTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureTag)(nil)).Elem()
}

func (i GetAzureTagArray) ToGetAzureTagArrayOutput() GetAzureTagArrayOutput {
	return i.ToGetAzureTagArrayOutputWithContext(context.Background())
}

func (i GetAzureTagArray) ToGetAzureTagArrayOutputWithContext(ctx context.Context) GetAzureTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAzureTagArrayOutput)
}

type GetAzureTagOutput struct{ *pulumi.OutputState }

func (GetAzureTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAzureTag)(nil)).Elem()
}

func (o GetAzureTagOutput) ToGetAzureTagOutput() GetAzureTagOutput {
	return o
}

func (o GetAzureTagOutput) ToGetAzureTagOutputWithContext(ctx context.Context) GetAzureTagOutput {
	return o
}

// Tag’s key.
func (o GetAzureTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetAzureTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAzureTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetAzureTagArrayOutput struct{ *pulumi.OutputState }

func (GetAzureTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAzureTag)(nil)).Elem()
}

func (o GetAzureTagArrayOutput) ToGetAzureTagArrayOutput() GetAzureTagArrayOutput {
	return o
}

func (o GetAzureTagArrayOutput) ToGetAzureTagArrayOutputWithContext(ctx context.Context) GetAzureTagArrayOutput {
	return o
}

func (o GetAzureTagArrayOutput) Index(i pulumi.IntInput) GetAzureTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAzureTag {
		return vs[0].([]GetAzureTag)[vs[1].(int)]
	}).(GetAzureTagOutput)
}

type GetGcpLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetGcpLinkInput is an input type that accepts GetGcpLinkArgs and GetGcpLinkOutput values.
// You can construct a concrete instance of `GetGcpLinkInput` via:
//
//          GetGcpLinkArgs{...}
type GetGcpLinkInput interface {
	pulumi.Input

	ToGetGcpLinkOutput() GetGcpLinkOutput
	ToGetGcpLinkOutputWithContext(context.Context) GetGcpLinkOutput
}

type GetGcpLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetGcpLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpLink)(nil)).Elem()
}

func (i GetGcpLinkArgs) ToGetGcpLinkOutput() GetGcpLinkOutput {
	return i.ToGetGcpLinkOutputWithContext(context.Background())
}

func (i GetGcpLinkArgs) ToGetGcpLinkOutputWithContext(ctx context.Context) GetGcpLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpLinkOutput)
}

// GetGcpLinkArrayInput is an input type that accepts GetGcpLinkArray and GetGcpLinkArrayOutput values.
// You can construct a concrete instance of `GetGcpLinkArrayInput` via:
//
//          GetGcpLinkArray{ GetGcpLinkArgs{...} }
type GetGcpLinkArrayInput interface {
	pulumi.Input

	ToGetGcpLinkArrayOutput() GetGcpLinkArrayOutput
	ToGetGcpLinkArrayOutputWithContext(context.Context) GetGcpLinkArrayOutput
}

type GetGcpLinkArray []GetGcpLinkInput

func (GetGcpLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGcpLink)(nil)).Elem()
}

func (i GetGcpLinkArray) ToGetGcpLinkArrayOutput() GetGcpLinkArrayOutput {
	return i.ToGetGcpLinkArrayOutputWithContext(context.Background())
}

func (i GetGcpLinkArray) ToGetGcpLinkArrayOutputWithContext(ctx context.Context) GetGcpLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpLinkArrayOutput)
}

type GetGcpLinkOutput struct{ *pulumi.OutputState }

func (GetGcpLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpLink)(nil)).Elem()
}

func (o GetGcpLinkOutput) ToGetGcpLinkOutput() GetGcpLinkOutput {
	return o
}

func (o GetGcpLinkOutput) ToGetGcpLinkOutputWithContext(ctx context.Context) GetGcpLinkOutput {
	return o
}

func (o GetGcpLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGcpLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetGcpLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGcpLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetGcpLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetGcpLinkArrayOutput struct{ *pulumi.OutputState }

func (GetGcpLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGcpLink)(nil)).Elem()
}

func (o GetGcpLinkArrayOutput) ToGetGcpLinkArrayOutput() GetGcpLinkArrayOutput {
	return o
}

func (o GetGcpLinkArrayOutput) ToGetGcpLinkArrayOutputWithContext(ctx context.Context) GetGcpLinkArrayOutput {
	return o
}

func (o GetGcpLinkArrayOutput) Index(i pulumi.IntInput) GetGcpLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGcpLink {
		return vs[0].([]GetGcpLink)[vs[1].(int)]
	}).(GetGcpLinkOutput)
}

type GetGcpTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetGcpTagInput is an input type that accepts GetGcpTagArgs and GetGcpTagOutput values.
// You can construct a concrete instance of `GetGcpTagInput` via:
//
//          GetGcpTagArgs{...}
type GetGcpTagInput interface {
	pulumi.Input

	ToGetGcpTagOutput() GetGcpTagOutput
	ToGetGcpTagOutputWithContext(context.Context) GetGcpTagOutput
}

type GetGcpTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetGcpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpTag)(nil)).Elem()
}

func (i GetGcpTagArgs) ToGetGcpTagOutput() GetGcpTagOutput {
	return i.ToGetGcpTagOutputWithContext(context.Background())
}

func (i GetGcpTagArgs) ToGetGcpTagOutputWithContext(ctx context.Context) GetGcpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpTagOutput)
}

// GetGcpTagArrayInput is an input type that accepts GetGcpTagArray and GetGcpTagArrayOutput values.
// You can construct a concrete instance of `GetGcpTagArrayInput` via:
//
//          GetGcpTagArray{ GetGcpTagArgs{...} }
type GetGcpTagArrayInput interface {
	pulumi.Input

	ToGetGcpTagArrayOutput() GetGcpTagArrayOutput
	ToGetGcpTagArrayOutputWithContext(context.Context) GetGcpTagArrayOutput
}

type GetGcpTagArray []GetGcpTagInput

func (GetGcpTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGcpTag)(nil)).Elem()
}

func (i GetGcpTagArray) ToGetGcpTagArrayOutput() GetGcpTagArrayOutput {
	return i.ToGetGcpTagArrayOutputWithContext(context.Background())
}

func (i GetGcpTagArray) ToGetGcpTagArrayOutputWithContext(ctx context.Context) GetGcpTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGcpTagArrayOutput)
}

type GetGcpTagOutput struct{ *pulumi.OutputState }

func (GetGcpTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGcpTag)(nil)).Elem()
}

func (o GetGcpTagOutput) ToGetGcpTagOutput() GetGcpTagOutput {
	return o
}

func (o GetGcpTagOutput) ToGetGcpTagOutputWithContext(ctx context.Context) GetGcpTagOutput {
	return o
}

// Tag’s key.
func (o GetGcpTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetGcpTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetGcpTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetGcpTagArrayOutput struct{ *pulumi.OutputState }

func (GetGcpTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGcpTag)(nil)).Elem()
}

func (o GetGcpTagArrayOutput) ToGetGcpTagArrayOutput() GetGcpTagArrayOutput {
	return o
}

func (o GetGcpTagArrayOutput) ToGetGcpTagArrayOutputWithContext(ctx context.Context) GetGcpTagArrayOutput {
	return o
}

func (o GetGcpTagArrayOutput) Index(i pulumi.IntInput) GetGcpTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGcpTag {
		return vs[0].([]GetGcpTag)[vs[1].(int)]
	}).(GetGcpTagOutput)
}

type GetNsxtLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetNsxtLinkInput is an input type that accepts GetNsxtLinkArgs and GetNsxtLinkOutput values.
// You can construct a concrete instance of `GetNsxtLinkInput` via:
//
//          GetNsxtLinkArgs{...}
type GetNsxtLinkInput interface {
	pulumi.Input

	ToGetNsxtLinkOutput() GetNsxtLinkOutput
	ToGetNsxtLinkOutputWithContext(context.Context) GetNsxtLinkOutput
}

type GetNsxtLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetNsxtLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtLink)(nil)).Elem()
}

func (i GetNsxtLinkArgs) ToGetNsxtLinkOutput() GetNsxtLinkOutput {
	return i.ToGetNsxtLinkOutputWithContext(context.Background())
}

func (i GetNsxtLinkArgs) ToGetNsxtLinkOutputWithContext(ctx context.Context) GetNsxtLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxtLinkOutput)
}

// GetNsxtLinkArrayInput is an input type that accepts GetNsxtLinkArray and GetNsxtLinkArrayOutput values.
// You can construct a concrete instance of `GetNsxtLinkArrayInput` via:
//
//          GetNsxtLinkArray{ GetNsxtLinkArgs{...} }
type GetNsxtLinkArrayInput interface {
	pulumi.Input

	ToGetNsxtLinkArrayOutput() GetNsxtLinkArrayOutput
	ToGetNsxtLinkArrayOutputWithContext(context.Context) GetNsxtLinkArrayOutput
}

type GetNsxtLinkArray []GetNsxtLinkInput

func (GetNsxtLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxtLink)(nil)).Elem()
}

func (i GetNsxtLinkArray) ToGetNsxtLinkArrayOutput() GetNsxtLinkArrayOutput {
	return i.ToGetNsxtLinkArrayOutputWithContext(context.Background())
}

func (i GetNsxtLinkArray) ToGetNsxtLinkArrayOutputWithContext(ctx context.Context) GetNsxtLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxtLinkArrayOutput)
}

type GetNsxtLinkOutput struct{ *pulumi.OutputState }

func (GetNsxtLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtLink)(nil)).Elem()
}

func (o GetNsxtLinkOutput) ToGetNsxtLinkOutput() GetNsxtLinkOutput {
	return o
}

func (o GetNsxtLinkOutput) ToGetNsxtLinkOutputWithContext(ctx context.Context) GetNsxtLinkOutput {
	return o
}

func (o GetNsxtLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxtLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetNsxtLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNsxtLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetNsxtLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetNsxtLinkArrayOutput struct{ *pulumi.OutputState }

func (GetNsxtLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxtLink)(nil)).Elem()
}

func (o GetNsxtLinkArrayOutput) ToGetNsxtLinkArrayOutput() GetNsxtLinkArrayOutput {
	return o
}

func (o GetNsxtLinkArrayOutput) ToGetNsxtLinkArrayOutputWithContext(ctx context.Context) GetNsxtLinkArrayOutput {
	return o
}

func (o GetNsxtLinkArrayOutput) Index(i pulumi.IntInput) GetNsxtLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNsxtLink {
		return vs[0].([]GetNsxtLink)[vs[1].(int)]
	}).(GetNsxtLinkOutput)
}

type GetNsxtTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetNsxtTagInput is an input type that accepts GetNsxtTagArgs and GetNsxtTagOutput values.
// You can construct a concrete instance of `GetNsxtTagInput` via:
//
//          GetNsxtTagArgs{...}
type GetNsxtTagInput interface {
	pulumi.Input

	ToGetNsxtTagOutput() GetNsxtTagOutput
	ToGetNsxtTagOutputWithContext(context.Context) GetNsxtTagOutput
}

type GetNsxtTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNsxtTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtTag)(nil)).Elem()
}

func (i GetNsxtTagArgs) ToGetNsxtTagOutput() GetNsxtTagOutput {
	return i.ToGetNsxtTagOutputWithContext(context.Background())
}

func (i GetNsxtTagArgs) ToGetNsxtTagOutputWithContext(ctx context.Context) GetNsxtTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxtTagOutput)
}

// GetNsxtTagArrayInput is an input type that accepts GetNsxtTagArray and GetNsxtTagArrayOutput values.
// You can construct a concrete instance of `GetNsxtTagArrayInput` via:
//
//          GetNsxtTagArray{ GetNsxtTagArgs{...} }
type GetNsxtTagArrayInput interface {
	pulumi.Input

	ToGetNsxtTagArrayOutput() GetNsxtTagArrayOutput
	ToGetNsxtTagArrayOutputWithContext(context.Context) GetNsxtTagArrayOutput
}

type GetNsxtTagArray []GetNsxtTagInput

func (GetNsxtTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxtTag)(nil)).Elem()
}

func (i GetNsxtTagArray) ToGetNsxtTagArrayOutput() GetNsxtTagArrayOutput {
	return i.ToGetNsxtTagArrayOutputWithContext(context.Background())
}

func (i GetNsxtTagArray) ToGetNsxtTagArrayOutputWithContext(ctx context.Context) GetNsxtTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxtTagArrayOutput)
}

type GetNsxtTagOutput struct{ *pulumi.OutputState }

func (GetNsxtTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxtTag)(nil)).Elem()
}

func (o GetNsxtTagOutput) ToGetNsxtTagOutput() GetNsxtTagOutput {
	return o
}

func (o GetNsxtTagOutput) ToGetNsxtTagOutputWithContext(ctx context.Context) GetNsxtTagOutput {
	return o
}

// Tag’s key.
func (o GetNsxtTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetNsxtTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxtTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNsxtTagArrayOutput struct{ *pulumi.OutputState }

func (GetNsxtTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxtTag)(nil)).Elem()
}

func (o GetNsxtTagArrayOutput) ToGetNsxtTagArrayOutput() GetNsxtTagArrayOutput {
	return o
}

func (o GetNsxtTagArrayOutput) ToGetNsxtTagArrayOutputWithContext(ctx context.Context) GetNsxtTagArrayOutput {
	return o
}

func (o GetNsxtTagArrayOutput) Index(i pulumi.IntInput) GetNsxtTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNsxtTag {
		return vs[0].([]GetNsxtTag)[vs[1].(int)]
	}).(GetNsxtTagOutput)
}

type GetNsxvLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetNsxvLinkInput is an input type that accepts GetNsxvLinkArgs and GetNsxvLinkOutput values.
// You can construct a concrete instance of `GetNsxvLinkInput` via:
//
//          GetNsxvLinkArgs{...}
type GetNsxvLinkInput interface {
	pulumi.Input

	ToGetNsxvLinkOutput() GetNsxvLinkOutput
	ToGetNsxvLinkOutputWithContext(context.Context) GetNsxvLinkOutput
}

type GetNsxvLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetNsxvLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxvLink)(nil)).Elem()
}

func (i GetNsxvLinkArgs) ToGetNsxvLinkOutput() GetNsxvLinkOutput {
	return i.ToGetNsxvLinkOutputWithContext(context.Background())
}

func (i GetNsxvLinkArgs) ToGetNsxvLinkOutputWithContext(ctx context.Context) GetNsxvLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxvLinkOutput)
}

// GetNsxvLinkArrayInput is an input type that accepts GetNsxvLinkArray and GetNsxvLinkArrayOutput values.
// You can construct a concrete instance of `GetNsxvLinkArrayInput` via:
//
//          GetNsxvLinkArray{ GetNsxvLinkArgs{...} }
type GetNsxvLinkArrayInput interface {
	pulumi.Input

	ToGetNsxvLinkArrayOutput() GetNsxvLinkArrayOutput
	ToGetNsxvLinkArrayOutputWithContext(context.Context) GetNsxvLinkArrayOutput
}

type GetNsxvLinkArray []GetNsxvLinkInput

func (GetNsxvLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxvLink)(nil)).Elem()
}

func (i GetNsxvLinkArray) ToGetNsxvLinkArrayOutput() GetNsxvLinkArrayOutput {
	return i.ToGetNsxvLinkArrayOutputWithContext(context.Background())
}

func (i GetNsxvLinkArray) ToGetNsxvLinkArrayOutputWithContext(ctx context.Context) GetNsxvLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxvLinkArrayOutput)
}

type GetNsxvLinkOutput struct{ *pulumi.OutputState }

func (GetNsxvLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxvLink)(nil)).Elem()
}

func (o GetNsxvLinkOutput) ToGetNsxvLinkOutput() GetNsxvLinkOutput {
	return o
}

func (o GetNsxvLinkOutput) ToGetNsxvLinkOutputWithContext(ctx context.Context) GetNsxvLinkOutput {
	return o
}

func (o GetNsxvLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNsxvLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetNsxvLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNsxvLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetNsxvLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxvLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetNsxvLinkArrayOutput struct{ *pulumi.OutputState }

func (GetNsxvLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxvLink)(nil)).Elem()
}

func (o GetNsxvLinkArrayOutput) ToGetNsxvLinkArrayOutput() GetNsxvLinkArrayOutput {
	return o
}

func (o GetNsxvLinkArrayOutput) ToGetNsxvLinkArrayOutputWithContext(ctx context.Context) GetNsxvLinkArrayOutput {
	return o
}

func (o GetNsxvLinkArrayOutput) Index(i pulumi.IntInput) GetNsxvLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNsxvLink {
		return vs[0].([]GetNsxvLink)[vs[1].(int)]
	}).(GetNsxvLinkOutput)
}

type GetNsxvTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetNsxvTagInput is an input type that accepts GetNsxvTagArgs and GetNsxvTagOutput values.
// You can construct a concrete instance of `GetNsxvTagInput` via:
//
//          GetNsxvTagArgs{...}
type GetNsxvTagInput interface {
	pulumi.Input

	ToGetNsxvTagOutput() GetNsxvTagOutput
	ToGetNsxvTagOutputWithContext(context.Context) GetNsxvTagOutput
}

type GetNsxvTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNsxvTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxvTag)(nil)).Elem()
}

func (i GetNsxvTagArgs) ToGetNsxvTagOutput() GetNsxvTagOutput {
	return i.ToGetNsxvTagOutputWithContext(context.Background())
}

func (i GetNsxvTagArgs) ToGetNsxvTagOutputWithContext(ctx context.Context) GetNsxvTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxvTagOutput)
}

// GetNsxvTagArrayInput is an input type that accepts GetNsxvTagArray and GetNsxvTagArrayOutput values.
// You can construct a concrete instance of `GetNsxvTagArrayInput` via:
//
//          GetNsxvTagArray{ GetNsxvTagArgs{...} }
type GetNsxvTagArrayInput interface {
	pulumi.Input

	ToGetNsxvTagArrayOutput() GetNsxvTagArrayOutput
	ToGetNsxvTagArrayOutputWithContext(context.Context) GetNsxvTagArrayOutput
}

type GetNsxvTagArray []GetNsxvTagInput

func (GetNsxvTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxvTag)(nil)).Elem()
}

func (i GetNsxvTagArray) ToGetNsxvTagArrayOutput() GetNsxvTagArrayOutput {
	return i.ToGetNsxvTagArrayOutputWithContext(context.Background())
}

func (i GetNsxvTagArray) ToGetNsxvTagArrayOutputWithContext(ctx context.Context) GetNsxvTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNsxvTagArrayOutput)
}

type GetNsxvTagOutput struct{ *pulumi.OutputState }

func (GetNsxvTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNsxvTag)(nil)).Elem()
}

func (o GetNsxvTagOutput) ToGetNsxvTagOutput() GetNsxvTagOutput {
	return o
}

func (o GetNsxvTagOutput) ToGetNsxvTagOutputWithContext(ctx context.Context) GetNsxvTagOutput {
	return o
}

// Tag’s key.
func (o GetNsxvTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxvTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetNsxvTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNsxvTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNsxvTagArrayOutput struct{ *pulumi.OutputState }

func (GetNsxvTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNsxvTag)(nil)).Elem()
}

func (o GetNsxvTagArrayOutput) ToGetNsxvTagArrayOutput() GetNsxvTagArrayOutput {
	return o
}

func (o GetNsxvTagArrayOutput) ToGetNsxvTagArrayOutputWithContext(ctx context.Context) GetNsxvTagArrayOutput {
	return o
}

func (o GetNsxvTagArrayOutput) Index(i pulumi.IntInput) GetNsxvTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNsxvTag {
		return vs[0].([]GetNsxvTag)[vs[1].(int)]
	}).(GetNsxvTagOutput)
}

type GetVSphereLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetVSphereLinkInput is an input type that accepts GetVSphereLinkArgs and GetVSphereLinkOutput values.
// You can construct a concrete instance of `GetVSphereLinkInput` via:
//
//          GetVSphereLinkArgs{...}
type GetVSphereLinkInput interface {
	pulumi.Input

	ToGetVSphereLinkOutput() GetVSphereLinkOutput
	ToGetVSphereLinkOutputWithContext(context.Context) GetVSphereLinkOutput
}

type GetVSphereLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetVSphereLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVSphereLink)(nil)).Elem()
}

func (i GetVSphereLinkArgs) ToGetVSphereLinkOutput() GetVSphereLinkOutput {
	return i.ToGetVSphereLinkOutputWithContext(context.Background())
}

func (i GetVSphereLinkArgs) ToGetVSphereLinkOutputWithContext(ctx context.Context) GetVSphereLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVSphereLinkOutput)
}

// GetVSphereLinkArrayInput is an input type that accepts GetVSphereLinkArray and GetVSphereLinkArrayOutput values.
// You can construct a concrete instance of `GetVSphereLinkArrayInput` via:
//
//          GetVSphereLinkArray{ GetVSphereLinkArgs{...} }
type GetVSphereLinkArrayInput interface {
	pulumi.Input

	ToGetVSphereLinkArrayOutput() GetVSphereLinkArrayOutput
	ToGetVSphereLinkArrayOutputWithContext(context.Context) GetVSphereLinkArrayOutput
}

type GetVSphereLinkArray []GetVSphereLinkInput

func (GetVSphereLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVSphereLink)(nil)).Elem()
}

func (i GetVSphereLinkArray) ToGetVSphereLinkArrayOutput() GetVSphereLinkArrayOutput {
	return i.ToGetVSphereLinkArrayOutputWithContext(context.Background())
}

func (i GetVSphereLinkArray) ToGetVSphereLinkArrayOutputWithContext(ctx context.Context) GetVSphereLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVSphereLinkArrayOutput)
}

type GetVSphereLinkOutput struct{ *pulumi.OutputState }

func (GetVSphereLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVSphereLink)(nil)).Elem()
}

func (o GetVSphereLinkOutput) ToGetVSphereLinkOutput() GetVSphereLinkOutput {
	return o
}

func (o GetVSphereLinkOutput) ToGetVSphereLinkOutputWithContext(ctx context.Context) GetVSphereLinkOutput {
	return o
}

func (o GetVSphereLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVSphereLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetVSphereLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVSphereLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetVSphereLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVSphereLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetVSphereLinkArrayOutput struct{ *pulumi.OutputState }

func (GetVSphereLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVSphereLink)(nil)).Elem()
}

func (o GetVSphereLinkArrayOutput) ToGetVSphereLinkArrayOutput() GetVSphereLinkArrayOutput {
	return o
}

func (o GetVSphereLinkArrayOutput) ToGetVSphereLinkArrayOutputWithContext(ctx context.Context) GetVSphereLinkArrayOutput {
	return o
}

func (o GetVSphereLinkArrayOutput) Index(i pulumi.IntInput) GetVSphereLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVSphereLink {
		return vs[0].([]GetVSphereLink)[vs[1].(int)]
	}).(GetVSphereLinkOutput)
}

type GetVSphereTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetVSphereTagInput is an input type that accepts GetVSphereTagArgs and GetVSphereTagOutput values.
// You can construct a concrete instance of `GetVSphereTagInput` via:
//
//          GetVSphereTagArgs{...}
type GetVSphereTagInput interface {
	pulumi.Input

	ToGetVSphereTagOutput() GetVSphereTagOutput
	ToGetVSphereTagOutputWithContext(context.Context) GetVSphereTagOutput
}

type GetVSphereTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVSphereTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVSphereTag)(nil)).Elem()
}

func (i GetVSphereTagArgs) ToGetVSphereTagOutput() GetVSphereTagOutput {
	return i.ToGetVSphereTagOutputWithContext(context.Background())
}

func (i GetVSphereTagArgs) ToGetVSphereTagOutputWithContext(ctx context.Context) GetVSphereTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVSphereTagOutput)
}

// GetVSphereTagArrayInput is an input type that accepts GetVSphereTagArray and GetVSphereTagArrayOutput values.
// You can construct a concrete instance of `GetVSphereTagArrayInput` via:
//
//          GetVSphereTagArray{ GetVSphereTagArgs{...} }
type GetVSphereTagArrayInput interface {
	pulumi.Input

	ToGetVSphereTagArrayOutput() GetVSphereTagArrayOutput
	ToGetVSphereTagArrayOutputWithContext(context.Context) GetVSphereTagArrayOutput
}

type GetVSphereTagArray []GetVSphereTagInput

func (GetVSphereTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVSphereTag)(nil)).Elem()
}

func (i GetVSphereTagArray) ToGetVSphereTagArrayOutput() GetVSphereTagArrayOutput {
	return i.ToGetVSphereTagArrayOutputWithContext(context.Background())
}

func (i GetVSphereTagArray) ToGetVSphereTagArrayOutputWithContext(ctx context.Context) GetVSphereTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVSphereTagArrayOutput)
}

type GetVSphereTagOutput struct{ *pulumi.OutputState }

func (GetVSphereTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVSphereTag)(nil)).Elem()
}

func (o GetVSphereTagOutput) ToGetVSphereTagOutput() GetVSphereTagOutput {
	return o
}

func (o GetVSphereTagOutput) ToGetVSphereTagOutputWithContext(ctx context.Context) GetVSphereTagOutput {
	return o
}

// Tag’s key.
func (o GetVSphereTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetVSphereTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetVSphereTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVSphereTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetVSphereTagArrayOutput struct{ *pulumi.OutputState }

func (GetVSphereTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVSphereTag)(nil)).Elem()
}

func (o GetVSphereTagArrayOutput) ToGetVSphereTagArrayOutput() GetVSphereTagArrayOutput {
	return o
}

func (o GetVSphereTagArrayOutput) ToGetVSphereTagArrayOutputWithContext(ctx context.Context) GetVSphereTagArrayOutput {
	return o
}

func (o GetVSphereTagArrayOutput) Index(i pulumi.IntInput) GetVSphereTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVSphereTag {
		return vs[0].([]GetVSphereTag)[vs[1].(int)]
	}).(GetVSphereTagOutput)
}

type GetVmcLink struct {
	Href  *string  `pulumi:"href"`
	Hrefs []string `pulumi:"hrefs"`
	Rel   string   `pulumi:"rel"`
}

// GetVmcLinkInput is an input type that accepts GetVmcLinkArgs and GetVmcLinkOutput values.
// You can construct a concrete instance of `GetVmcLinkInput` via:
//
//          GetVmcLinkArgs{...}
type GetVmcLinkInput interface {
	pulumi.Input

	ToGetVmcLinkOutput() GetVmcLinkOutput
	ToGetVmcLinkOutputWithContext(context.Context) GetVmcLinkOutput
}

type GetVmcLinkArgs struct {
	Href  pulumi.StringPtrInput   `pulumi:"href"`
	Hrefs pulumi.StringArrayInput `pulumi:"hrefs"`
	Rel   pulumi.StringInput      `pulumi:"rel"`
}

func (GetVmcLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmcLink)(nil)).Elem()
}

func (i GetVmcLinkArgs) ToGetVmcLinkOutput() GetVmcLinkOutput {
	return i.ToGetVmcLinkOutputWithContext(context.Background())
}

func (i GetVmcLinkArgs) ToGetVmcLinkOutputWithContext(ctx context.Context) GetVmcLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVmcLinkOutput)
}

// GetVmcLinkArrayInput is an input type that accepts GetVmcLinkArray and GetVmcLinkArrayOutput values.
// You can construct a concrete instance of `GetVmcLinkArrayInput` via:
//
//          GetVmcLinkArray{ GetVmcLinkArgs{...} }
type GetVmcLinkArrayInput interface {
	pulumi.Input

	ToGetVmcLinkArrayOutput() GetVmcLinkArrayOutput
	ToGetVmcLinkArrayOutputWithContext(context.Context) GetVmcLinkArrayOutput
}

type GetVmcLinkArray []GetVmcLinkInput

func (GetVmcLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVmcLink)(nil)).Elem()
}

func (i GetVmcLinkArray) ToGetVmcLinkArrayOutput() GetVmcLinkArrayOutput {
	return i.ToGetVmcLinkArrayOutputWithContext(context.Background())
}

func (i GetVmcLinkArray) ToGetVmcLinkArrayOutputWithContext(ctx context.Context) GetVmcLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVmcLinkArrayOutput)
}

type GetVmcLinkOutput struct{ *pulumi.OutputState }

func (GetVmcLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmcLink)(nil)).Elem()
}

func (o GetVmcLinkOutput) ToGetVmcLinkOutput() GetVmcLinkOutput {
	return o
}

func (o GetVmcLinkOutput) ToGetVmcLinkOutputWithContext(ctx context.Context) GetVmcLinkOutput {
	return o
}

func (o GetVmcLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVmcLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o GetVmcLinkOutput) Hrefs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVmcLink) []string { return v.Hrefs }).(pulumi.StringArrayOutput)
}

func (o GetVmcLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmcLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetVmcLinkArrayOutput struct{ *pulumi.OutputState }

func (GetVmcLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVmcLink)(nil)).Elem()
}

func (o GetVmcLinkArrayOutput) ToGetVmcLinkArrayOutput() GetVmcLinkArrayOutput {
	return o
}

func (o GetVmcLinkArrayOutput) ToGetVmcLinkArrayOutputWithContext(ctx context.Context) GetVmcLinkArrayOutput {
	return o
}

func (o GetVmcLinkArrayOutput) Index(i pulumi.IntInput) GetVmcLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVmcLink {
		return vs[0].([]GetVmcLink)[vs[1].(int)]
	}).(GetVmcLinkOutput)
}

type GetVmcTag struct {
	// Tag’s key.
	Key string `pulumi:"key"`
	// Tag’s value.
	Value string `pulumi:"value"`
}

// GetVmcTagInput is an input type that accepts GetVmcTagArgs and GetVmcTagOutput values.
// You can construct a concrete instance of `GetVmcTagInput` via:
//
//          GetVmcTagArgs{...}
type GetVmcTagInput interface {
	pulumi.Input

	ToGetVmcTagOutput() GetVmcTagOutput
	ToGetVmcTagOutputWithContext(context.Context) GetVmcTagOutput
}

type GetVmcTagArgs struct {
	// Tag’s key.
	Key pulumi.StringInput `pulumi:"key"`
	// Tag’s value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVmcTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmcTag)(nil)).Elem()
}

func (i GetVmcTagArgs) ToGetVmcTagOutput() GetVmcTagOutput {
	return i.ToGetVmcTagOutputWithContext(context.Background())
}

func (i GetVmcTagArgs) ToGetVmcTagOutputWithContext(ctx context.Context) GetVmcTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVmcTagOutput)
}

// GetVmcTagArrayInput is an input type that accepts GetVmcTagArray and GetVmcTagArrayOutput values.
// You can construct a concrete instance of `GetVmcTagArrayInput` via:
//
//          GetVmcTagArray{ GetVmcTagArgs{...} }
type GetVmcTagArrayInput interface {
	pulumi.Input

	ToGetVmcTagArrayOutput() GetVmcTagArrayOutput
	ToGetVmcTagArrayOutputWithContext(context.Context) GetVmcTagArrayOutput
}

type GetVmcTagArray []GetVmcTagInput

func (GetVmcTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVmcTag)(nil)).Elem()
}

func (i GetVmcTagArray) ToGetVmcTagArrayOutput() GetVmcTagArrayOutput {
	return i.ToGetVmcTagArrayOutputWithContext(context.Background())
}

func (i GetVmcTagArray) ToGetVmcTagArrayOutputWithContext(ctx context.Context) GetVmcTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVmcTagArrayOutput)
}

type GetVmcTagOutput struct{ *pulumi.OutputState }

func (GetVmcTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmcTag)(nil)).Elem()
}

func (o GetVmcTagOutput) ToGetVmcTagOutput() GetVmcTagOutput {
	return o
}

func (o GetVmcTagOutput) ToGetVmcTagOutputWithContext(ctx context.Context) GetVmcTagOutput {
	return o
}

// Tag’s key.
func (o GetVmcTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmcTag) string { return v.Key }).(pulumi.StringOutput)
}

// Tag’s value.
func (o GetVmcTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmcTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetVmcTagArrayOutput struct{ *pulumi.OutputState }

func (GetVmcTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVmcTag)(nil)).Elem()
}

func (o GetVmcTagArrayOutput) ToGetVmcTagArrayOutput() GetVmcTagArrayOutput {
	return o
}

func (o GetVmcTagArrayOutput) ToGetVmcTagArrayOutputWithContext(ctx context.Context) GetVmcTagArrayOutput {
	return o
}

func (o GetVmcTagArrayOutput) Index(i pulumi.IntInput) GetVmcTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVmcTag {
		return vs[0].([]GetVmcTag)[vs[1].(int)]
	}).(GetVmcTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLinkInput)(nil)).Elem(), AwsLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsLinkArrayInput)(nil)).Elem(), AwsLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsTagInput)(nil)).Elem(), AwsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsTagArrayInput)(nil)).Elem(), AwsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureLinkInput)(nil)).Elem(), AzureLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureLinkArrayInput)(nil)).Elem(), AzureLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTagInput)(nil)).Elem(), AzureTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureTagArrayInput)(nil)).Elem(), AzureTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpLinkInput)(nil)).Elem(), GcpLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpLinkArrayInput)(nil)).Elem(), GcpLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpTagInput)(nil)).Elem(), GcpTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpTagArrayInput)(nil)).Elem(), GcpTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtLinkInput)(nil)).Elem(), NsxtLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtLinkArrayInput)(nil)).Elem(), NsxtLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtTagInput)(nil)).Elem(), NsxtTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxtTagArrayInput)(nil)).Elem(), NsxtTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvLinkInput)(nil)).Elem(), NsxvLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvLinkArrayInput)(nil)).Elem(), NsxvLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvTagInput)(nil)).Elem(), NsxvTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NsxvTagArrayInput)(nil)).Elem(), NsxvTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereLinkInput)(nil)).Elem(), VSphereLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereLinkArrayInput)(nil)).Elem(), VSphereLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereTagInput)(nil)).Elem(), VSphereTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VSphereTagArrayInput)(nil)).Elem(), VSphereTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmcLinkInput)(nil)).Elem(), VmcLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmcLinkArrayInput)(nil)).Elem(), VmcLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmcTagInput)(nil)).Elem(), VmcTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmcTagArrayInput)(nil)).Elem(), VmcTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsLinkInput)(nil)).Elem(), GetAwsLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsLinkArrayInput)(nil)).Elem(), GetAwsLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsTagInput)(nil)).Elem(), GetAwsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAwsTagArrayInput)(nil)).Elem(), GetAwsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureLinkInput)(nil)).Elem(), GetAzureLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureLinkArrayInput)(nil)).Elem(), GetAzureLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureTagInput)(nil)).Elem(), GetAzureTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAzureTagArrayInput)(nil)).Elem(), GetAzureTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpLinkInput)(nil)).Elem(), GetGcpLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpLinkArrayInput)(nil)).Elem(), GetGcpLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpTagInput)(nil)).Elem(), GetGcpTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGcpTagArrayInput)(nil)).Elem(), GetGcpTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxtLinkInput)(nil)).Elem(), GetNsxtLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxtLinkArrayInput)(nil)).Elem(), GetNsxtLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxtTagInput)(nil)).Elem(), GetNsxtTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxtTagArrayInput)(nil)).Elem(), GetNsxtTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxvLinkInput)(nil)).Elem(), GetNsxvLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxvLinkArrayInput)(nil)).Elem(), GetNsxvLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxvTagInput)(nil)).Elem(), GetNsxvTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNsxvTagArrayInput)(nil)).Elem(), GetNsxvTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVSphereLinkInput)(nil)).Elem(), GetVSphereLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVSphereLinkArrayInput)(nil)).Elem(), GetVSphereLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVSphereTagInput)(nil)).Elem(), GetVSphereTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVSphereTagArrayInput)(nil)).Elem(), GetVSphereTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVmcLinkInput)(nil)).Elem(), GetVmcLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVmcLinkArrayInput)(nil)).Elem(), GetVmcLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVmcTagInput)(nil)).Elem(), GetVmcTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVmcTagArrayInput)(nil)).Elem(), GetVmcTagArray{})
	pulumi.RegisterOutputType(AwsLinkOutput{})
	pulumi.RegisterOutputType(AwsLinkArrayOutput{})
	pulumi.RegisterOutputType(AwsTagOutput{})
	pulumi.RegisterOutputType(AwsTagArrayOutput{})
	pulumi.RegisterOutputType(AzureLinkOutput{})
	pulumi.RegisterOutputType(AzureLinkArrayOutput{})
	pulumi.RegisterOutputType(AzureTagOutput{})
	pulumi.RegisterOutputType(AzureTagArrayOutput{})
	pulumi.RegisterOutputType(GcpLinkOutput{})
	pulumi.RegisterOutputType(GcpLinkArrayOutput{})
	pulumi.RegisterOutputType(GcpTagOutput{})
	pulumi.RegisterOutputType(GcpTagArrayOutput{})
	pulumi.RegisterOutputType(NsxtLinkOutput{})
	pulumi.RegisterOutputType(NsxtLinkArrayOutput{})
	pulumi.RegisterOutputType(NsxtTagOutput{})
	pulumi.RegisterOutputType(NsxtTagArrayOutput{})
	pulumi.RegisterOutputType(NsxvLinkOutput{})
	pulumi.RegisterOutputType(NsxvLinkArrayOutput{})
	pulumi.RegisterOutputType(NsxvTagOutput{})
	pulumi.RegisterOutputType(NsxvTagArrayOutput{})
	pulumi.RegisterOutputType(VSphereLinkOutput{})
	pulumi.RegisterOutputType(VSphereLinkArrayOutput{})
	pulumi.RegisterOutputType(VSphereTagOutput{})
	pulumi.RegisterOutputType(VSphereTagArrayOutput{})
	pulumi.RegisterOutputType(VmcLinkOutput{})
	pulumi.RegisterOutputType(VmcLinkArrayOutput{})
	pulumi.RegisterOutputType(VmcTagOutput{})
	pulumi.RegisterOutputType(VmcTagArrayOutput{})
	pulumi.RegisterOutputType(GetAwsLinkOutput{})
	pulumi.RegisterOutputType(GetAwsLinkArrayOutput{})
	pulumi.RegisterOutputType(GetAwsTagOutput{})
	pulumi.RegisterOutputType(GetAwsTagArrayOutput{})
	pulumi.RegisterOutputType(GetAzureLinkOutput{})
	pulumi.RegisterOutputType(GetAzureLinkArrayOutput{})
	pulumi.RegisterOutputType(GetAzureTagOutput{})
	pulumi.RegisterOutputType(GetAzureTagArrayOutput{})
	pulumi.RegisterOutputType(GetGcpLinkOutput{})
	pulumi.RegisterOutputType(GetGcpLinkArrayOutput{})
	pulumi.RegisterOutputType(GetGcpTagOutput{})
	pulumi.RegisterOutputType(GetGcpTagArrayOutput{})
	pulumi.RegisterOutputType(GetNsxtLinkOutput{})
	pulumi.RegisterOutputType(GetNsxtLinkArrayOutput{})
	pulumi.RegisterOutputType(GetNsxtTagOutput{})
	pulumi.RegisterOutputType(GetNsxtTagArrayOutput{})
	pulumi.RegisterOutputType(GetNsxvLinkOutput{})
	pulumi.RegisterOutputType(GetNsxvLinkArrayOutput{})
	pulumi.RegisterOutputType(GetNsxvTagOutput{})
	pulumi.RegisterOutputType(GetNsxvTagArrayOutput{})
	pulumi.RegisterOutputType(GetVSphereLinkOutput{})
	pulumi.RegisterOutputType(GetVSphereLinkArrayOutput{})
	pulumi.RegisterOutputType(GetVSphereTagOutput{})
	pulumi.RegisterOutputType(GetVSphereTagArrayOutput{})
	pulumi.RegisterOutputType(GetVmcLinkOutput{})
	pulumi.RegisterOutputType(GetVmcLinkArrayOutput{})
	pulumi.RegisterOutputType(GetVmcTagOutput{})
	pulumi.RegisterOutputType(GetVmcTagArrayOutput{})
}
