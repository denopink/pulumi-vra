// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### S
 * This is an example of how to create a network profile resource.
 *
 * **Network profile:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@schmidtw/vra";
 *
 * const simple = new vra.NetworkProfile("simple", {
 *     description: "Simple Network Profile with no isolation.",
 *     regionId: data.vra_region["this"].id,
 *     fabricNetworkIds: [
 *         data.vra_fabric_network.subnet_1.id,
 *         data.vra_fabric_network.subnet_2.id,
 *     ],
 *     isolationType: "NONE",
 *     tags: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 * });
 * ```
 *
 * A network profile resource supports the following arguments:
 */
export class NetworkProfile extends pulumi.CustomResource {
    /**
     * Get an existing NetworkProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkProfileState, opts?: pulumi.CustomResourceOptions): NetworkProfile {
        return new NetworkProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/networkProfile:NetworkProfile';

    /**
     * Returns true if the given object is an instance of NetworkProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkProfile.__pulumiType;
    }

    /**
     * The ID of the cloud account this entity belongs to.
     */
    public /*out*/ readonly cloudAccountId!: pulumi.Output<string>;
    /**
     * Date when  entity was created. Date and time format is ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.
     */
    public readonly customProperties!: pulumi.Output<{[key: string]: any}>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The external regionId of the resource.
     */
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    /**
     * A list of fabric network Ids which are assigned to the network profile.
     * example:[ "6543" ]
     */
    public readonly fabricNetworkIds!: pulumi.Output<string[] | undefined>;
    /**
     * The id of the fabric network used for outbound access.
     */
    public readonly isolatedExternalFabricNetworkId!: pulumi.Output<string | undefined>;
    /**
     * The CIDR prefix length to be used for the isolated networks that are created with the network profile.
     */
    public readonly isolatedNetworkCidrPrefix!: pulumi.Output<number | undefined>;
    /**
     * CIDR of the isolation network domain.
     */
    public readonly isolatedNetworkDomainCidr!: pulumi.Output<string | undefined>;
    /**
     * The id of the network domain used for creating isolated networks.
     */
    public readonly isolatedNetworkDomainId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the isolation type e.g. none, subnet or security group
     */
    public readonly isolationType!: pulumi.Output<string | undefined>;
    /**
     * HATEOAS of the entity
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.NetworkProfileLink[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of organization that entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to. Deprecated, refer to orgId instead.
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * A list of security group Ids which are assigned to the network profile.
     * example:[ "6545" ]
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    public readonly tags!: pulumi.Output<outputs.NetworkProfileTag[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a NetworkProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkProfileArgs | NetworkProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkProfileState | undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["fabricNetworkIds"] = state ? state.fabricNetworkIds : undefined;
            resourceInputs["isolatedExternalFabricNetworkId"] = state ? state.isolatedExternalFabricNetworkId : undefined;
            resourceInputs["isolatedNetworkCidrPrefix"] = state ? state.isolatedNetworkCidrPrefix : undefined;
            resourceInputs["isolatedNetworkDomainCidr"] = state ? state.isolatedNetworkDomainCidr : undefined;
            resourceInputs["isolatedNetworkDomainId"] = state ? state.isolatedNetworkDomainId : undefined;
            resourceInputs["isolationType"] = state ? state.isolationType : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as NetworkProfileArgs | undefined;
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fabricNetworkIds"] = args ? args.fabricNetworkIds : undefined;
            resourceInputs["isolatedExternalFabricNetworkId"] = args ? args.isolatedExternalFabricNetworkId : undefined;
            resourceInputs["isolatedNetworkCidrPrefix"] = args ? args.isolatedNetworkCidrPrefix : undefined;
            resourceInputs["isolatedNetworkDomainCidr"] = args ? args.isolatedNetworkDomainCidr : undefined;
            resourceInputs["isolatedNetworkDomainId"] = args ? args.isolatedNetworkDomainId : undefined;
            resourceInputs["isolationType"] = args ? args.isolationType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudAccountId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkProfile resources.
 */
export interface NetworkProfileState {
    /**
     * The ID of the cloud account this entity belongs to.
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * Date when  entity was created. Date and time format is ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.
     */
    customProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * The external regionId of the resource.
     */
    externalRegionId?: pulumi.Input<string>;
    /**
     * A list of fabric network Ids which are assigned to the network profile.
     * example:[ "6543" ]
     */
    fabricNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the fabric network used for outbound access.
     */
    isolatedExternalFabricNetworkId?: pulumi.Input<string>;
    /**
     * The CIDR prefix length to be used for the isolated networks that are created with the network profile.
     */
    isolatedNetworkCidrPrefix?: pulumi.Input<number>;
    /**
     * CIDR of the isolation network domain.
     */
    isolatedNetworkDomainCidr?: pulumi.Input<string>;
    /**
     * The id of the network domain used for creating isolated networks.
     */
    isolatedNetworkDomainId?: pulumi.Input<string>;
    /**
     * Specifies the isolation type e.g. none, subnet or security group
     */
    isolationType?: pulumi.Input<string>;
    /**
     * HATEOAS of the entity
     */
    links?: pulumi.Input<pulumi.Input<inputs.NetworkProfileLink>[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of organization that entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to. Deprecated, refer to orgId instead.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId?: pulumi.Input<string>;
    /**
     * A list of security group Ids which are assigned to the network profile.
     * example:[ "6545" ]
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkProfileTag>[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkProfile resource.
 */
export interface NetworkProfileArgs {
    /**
     * Additional properties that may be used to extend the Network Profile object that is produced from this specification. For isolationType security group, datastoreId identifies the Compute Resource Edge datastore. computeCluster and resourcePoolId identify the Compute Resource Edge cluster. For isolationType subnet, distributedLogicalRouterStateLink identifies the on-demand network distributed local router. onDemandNetworkIPAssignmentType identifies the on-demand network IP range assignment type static, dynamic, or mixed.
     */
    customProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of fabric network Ids which are assigned to the network profile.
     * example:[ "6543" ]
     */
    fabricNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the fabric network used for outbound access.
     */
    isolatedExternalFabricNetworkId?: pulumi.Input<string>;
    /**
     * The CIDR prefix length to be used for the isolated networks that are created with the network profile.
     */
    isolatedNetworkCidrPrefix?: pulumi.Input<number>;
    /**
     * CIDR of the isolation network domain.
     */
    isolatedNetworkDomainCidr?: pulumi.Input<string>;
    /**
     * The id of the network domain used for creating isolated networks.
     */
    isolatedNetworkDomainId?: pulumi.Input<string>;
    /**
     * Specifies the isolation type e.g. none, subnet or security group
     */
    isolationType?: pulumi.Input<string>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId: pulumi.Input<string>;
    /**
     * A list of security group Ids which are assigned to the network profile.
     * example:[ "6545" ]
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkProfileTag>[]>;
}
