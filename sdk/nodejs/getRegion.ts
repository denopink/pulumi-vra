// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This is an example of how to lookup a region data source:
 *
 * **Region data source by id:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getRegion({
 *     id: _var.vra_region_id,
 * });
 * ```
 *
 * **Region data source by filter:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const thisRegion = pulumi.output(vra.getRegion({
 *     filter: `name eq '${var_vra_region_name}'`,
 * }));
 * ```
 *
 * **Region data source by cloud account id and region:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getRegion({
 *     cloudAccountId: _var.vra_cloud_account_id,
 *     region: _var.vra_region_external_id,
 * });
 * ```
 */
export function getRegion(args?: GetRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:index/getRegion:getRegion", {
        "cloudAccountId": args.cloudAccountId,
        "filter": args.filter,
        "id": args.id,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionArgs {
    /**
     * The id of the cloud account the region belongs to.
     */
    cloudAccountId?: string;
    /**
     * Search criteria to narrow down Regions.
     */
    filter?: string;
    /**
     * The id of the region instance.
     */
    id?: string;
    /**
     * The specific region associated with the cloud account. On vSphere, this is the external ID.
     */
    region?: string;
}

/**
 * A collection of values returned by getRegion.
 */
export interface GetRegionResult {
    readonly cloudAccountId: string;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    readonly createdAt: string;
    /**
     * Unique identifier of region on the provider side.
     */
    readonly externalRegionId: string;
    readonly filter?: string;
    readonly id: string;
    /**
     * Name of region on the provider side. In vSphere, the name of the region is different from its id.
     */
    readonly name: string;
    /**
     * The id of the organization this entity belongs to.
     */
    readonly orgId: string;
    /**
     * Email of the user that owns the entity.
     */
    readonly owner: string;
    readonly region?: string;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    readonly updatedAt: string;
}

export function getRegionOutput(args?: GetRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegionResult> {
    return pulumi.output(args).apply(a => getRegion(a, opts))
}

/**
 * A collection of arguments for invoking getRegion.
 */
export interface GetRegionOutputArgs {
    /**
     * The id of the cloud account the region belongs to.
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * Search criteria to narrow down Regions.
     */
    filter?: pulumi.Input<string>;
    /**
     * The id of the region instance.
     */
    id?: pulumi.Input<string>;
    /**
     * The specific region associated with the cloud account. On vSphere, this is the external ID.
     */
    region?: pulumi.Input<string>;
}
