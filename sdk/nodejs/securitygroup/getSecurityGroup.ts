// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### S
 * This is an example of how to lookup security groups.
 *
 * **Security groups by filter query:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * // Lookup Security groups using its name
 * const thisSecurityGroup = pulumi.output(vra.securitygroup.getSecurityGroup({
 *     filter: `name eq '${var_name}'`,
 * }));
 * ```
 *
 * A Security group supports the following arguments:
 */
export function getSecurityGroup(args: GetSecurityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGroupResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:securitygroup/getSecurityGroup:getSecurityGroup", {
        "filter": args.filter,
        "rules": args.rules,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupArgs {
    /**
     * Search criteria to narrow down the Security groups.
     */
    filter: string;
    /**
     * List of security rules.
     */
    rules?: inputs.securitygroup.GetSecurityGroupRule[];
}

/**
 * A collection of values returned by getSecurityGroup.
 */
export interface GetSecurityGroupResult {
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    readonly createdAt: string;
    /**
     * A human-friendly description of the security groups.
     */
    readonly description: string;
    /**
     * External entity Id on the provider side.
     */
    readonly externalId: string;
    /**
     * The id of the region for which this entity is defined.
     */
    readonly externalRegionId: string;
    readonly filter: string;
    /**
     * ID of the security group.
     */
    readonly id: string;
    /**
     * HATEOAS of the entity
     */
    readonly links: outputs.securitygroup.GetSecurityGroupLink[];
    /**
     * Name of the security group.
     */
    readonly name: string;
    /**
     * ID of organization that entity belongs to.
     */
    readonly organizationId: string;
    readonly owner: string;
    /**
     * List of security rules.
     */
    readonly rules?: outputs.securitygroup.GetSecurityGroupRule[];
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    readonly updatedAt: string;
}

export function getSecurityGroupOutput(args: GetSecurityGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityGroupResult> {
    return pulumi.output(args).apply(a => getSecurityGroup(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupOutputArgs {
    /**
     * Search criteria to narrow down the Security groups.
     */
    filter: pulumi.Input<string>;
    /**
     * List of security rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.securitygroup.GetSecurityGroupRuleArgs>[]>;
}
