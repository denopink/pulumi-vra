// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### S
 * This is an example of how to lookup fabric vSphere storage policies.
 *
 * **Fabric vSphere storage policy by Id:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getFabricStoragePolicyVsphere({
 *     id: _var.fabric_storage_policy_vsphere_id,
 * });
 * ```
 *
 * **Fabric vSphere storage policy by filter query:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * // Lookup fabric vSphere storage policy using its name
 * const thisFabricStoragePolicyVsphere = pulumi.output(vra.getFabricStoragePolicyVsphere({
 *     filter: `name eq '${var_name}'`,
 * }));
 * ```
 *
 * A fabric vSphere storage policy supports the following arguments:
 */
export function getFabricStoragePolicyVsphere(args?: GetFabricStoragePolicyVsphereArgs, opts?: pulumi.InvokeOptions): Promise<GetFabricStoragePolicyVsphereResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:index/getFabricStoragePolicyVsphere:getFabricStoragePolicyVsphere", {
        "filter": args.filter,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getFabricStoragePolicyVsphere.
 */
export interface GetFabricStoragePolicyVsphereArgs {
    /**
     * Search criteria to narrow down the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.
     */
    filter?: string;
    /**
     * The id of the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.
     */
    id?: string;
}

/**
 * A collection of values returned by getFabricStoragePolicyVsphere.
 */
export interface GetFabricStoragePolicyVsphereResult {
    /**
     * Set of ids of the cloud accounts this entity belongs to.
     */
    readonly cloudAccountIds: string[];
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    readonly createdAt: string;
    /**
     * External entity Id on the provider side.
     */
    readonly externalId: string;
    /**
     * The id of the region for which this entity is defined.
     */
    readonly externalRegionId: string;
    readonly filter?: string;
    readonly id: string;
    /**
     * HATEOAS of the entity
     */
    readonly links: outputs.GetFabricStoragePolicyVsphereLink[];
    /**
     * A human-friendly name used as an identifier in APIs that support this option.  Only one of 'filter', 'id', 'name' or 'region_id' must be specified.
     */
    readonly name: string;
    /**
     * The id of the organization this entity belongs to.
     */
    readonly orgId: string;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    readonly updatedAt: string;
}

export function getFabricStoragePolicyVsphereOutput(args?: GetFabricStoragePolicyVsphereOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFabricStoragePolicyVsphereResult> {
    return pulumi.output(args).apply(a => getFabricStoragePolicyVsphere(a, opts))
}

/**
 * A collection of arguments for invoking getFabricStoragePolicyVsphere.
 */
export interface GetFabricStoragePolicyVsphereOutputArgs {
    /**
     * Search criteria to narrow down the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.
     */
    filter?: pulumi.Input<string>;
    /**
     * The id of the fabric vSphere storage policy. Only one of 'filter' or 'id' must be specified.
     */
    id?: pulumi.Input<string>;
}
