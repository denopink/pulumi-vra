// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source provides information about a catalog item entitlement in vRA.
 *
 * ## Example Usage
 * ### S
 *
 * This is an example of how to get a vRA catalog item entitlement by its id:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.catalog.getItemEntitlement({
 *     id: _var.catalog_item_entitlement_id,
 *     projectId: _var.project_id,
 * });
 * ```
 *
 * This is an example of how to get a vRA catalog item entitlement by its catalog item id:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.catalog.getItemEntitlement({
 *     catalogItemId: _var.catalog_item_id,
 *     projectId: _var.project_id,
 * });
 * ```
 */
export function getItemEntitlement(args: GetItemEntitlementArgs, opts?: pulumi.InvokeOptions): Promise<GetItemEntitlementResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:catalog/getItemEntitlement:getItemEntitlement", {
        "catalogItemId": args.catalogItemId,
        "id": args.id,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getItemEntitlement.
 */
export interface GetItemEntitlementArgs {
    /**
     * The id of the catalog item to find the entitlement. One of `catalogItemId` or `id` must be provided.
     */
    catalogItemId?: string;
    /**
     * The id of entitlement. One of `catalogItemId` or `id` must be provided.
     */
    id?: string;
    /**
     * The id of the project that this entitlement belongs to.
     */
    projectId: string;
}

/**
 * A collection of values returned by getItemEntitlement.
 */
export interface GetItemEntitlementResult {
    readonly catalogItemId?: string;
    /**
     * Represents a catalog item that is linked to a project via an entitlement.
     */
    readonly definitions: outputs.catalog.GetItemEntitlementDefinition[];
    /**
     * Id of the catalog item.
     */
    readonly id?: string;
    readonly projectId: string;
}

export function getItemEntitlementOutput(args: GetItemEntitlementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetItemEntitlementResult> {
    return pulumi.output(args).apply(a => getItemEntitlement(a, opts))
}

/**
 * A collection of arguments for invoking getItemEntitlement.
 */
export interface GetItemEntitlementOutputArgs {
    /**
     * The id of the catalog item to find the entitlement. One of `catalogItemId` or `id` must be provided.
     */
    catalogItemId?: pulumi.Input<string>;
    /**
     * The id of entitlement. One of `catalogItemId` or `id` must be provided.
     */
    id?: pulumi.Input<string>;
    /**
     * The id of the project that this entitlement belongs to.
     */
    projectId: pulumi.Input<string>;
}
