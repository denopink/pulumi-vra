// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source provides information about a catalog source of type cloud template (blueprint) in vRA.
 *
 * ## Example Usage
 * ### S
 *
 * This is an example of how to get a vRA cloud template catalog source by its name.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getCatalogSourceBlueprint({
 *     name: _var.catalog_source_name,
 * });
 * ```
 *
 * This is an example of how to get a vRA cloud template catalog source by its id.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getCatalogSourceBlueprint({
 *     id: _var.catalog_source_id,
 * });
 * ```
 *
 * This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.getCatalogSourceBlueprint({
 *     projectId: _var.project_id,
 * });
 * ```
 */
export function getCatalogSourceBlueprint(args?: GetCatalogSourceBlueprintArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalogSourceBlueprintResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:index/getCatalogSourceBlueprint:getCatalogSourceBlueprint", {
        "config": args.config,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogSourceBlueprint.
 */
export interface GetCatalogSourceBlueprintArgs {
    /**
     * Custom configuration of the catalog source as a map of key values.
     */
    config?: {[key: string]: string};
    /**
     * Catalog source description.
     */
    description?: string;
    /**
     * The id of catalog source. One of `id`, `name` or `projectId`  must be provided.
     */
    id?: string;
    /**
     * Name of the catalog source. One of `id`, `name` or `projectId` must be provided.
     */
    name?: string;
    /**
     * The id of the project.  One of `id`, `name` or `projectId` must be provided.
     */
    projectId?: string;
}

/**
 * A collection of values returned by getCatalogSourceBlueprint.
 */
export interface GetCatalogSourceBlueprintResult {
    /**
     * Custom configuration of the catalog source as a map of key values.
     */
    readonly config: {[key: string]: string};
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    readonly createdAt: string;
    /**
     * The user the entity was created by.
     */
    readonly createdBy: string;
    /**
     * Catalog source description.
     */
    readonly description?: string;
    /**
     * A flag indicating that all the items can be requested across all projects.
     */
    readonly global: boolean;
    readonly id?: string;
    /**
     * Number of items found in the catalog source.
     */
    readonly itemsFound: string;
    /**
     * Number of items imported from the catalog source.
     */
    readonly itemsImported: string;
    /**
     * Time at which the last import was completed at.
     */
    readonly lastImportCompletedAt: string;
    /**
     * A list of errors seen at last time the catalog source is imported.
     */
    readonly lastImportErrors: string[];
    /**
     * Time at which the last import was started at.
     */
    readonly lastImportStartedAt: string;
    /**
     * The user that last updated the catalog source.
     */
    readonly lastUpdatedBy: string;
    readonly name: string;
    readonly projectId: string;
    /**
     * Type of catalog source. Example: `blueprint`, `CFT`, etc.
     */
    readonly typeId: string;
}

export function getCatalogSourceBlueprintOutput(args?: GetCatalogSourceBlueprintOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCatalogSourceBlueprintResult> {
    return pulumi.output(args).apply(a => getCatalogSourceBlueprint(a, opts))
}

/**
 * A collection of arguments for invoking getCatalogSourceBlueprint.
 */
export interface GetCatalogSourceBlueprintOutputArgs {
    /**
     * Custom configuration of the catalog source as a map of key values.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Catalog source description.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of catalog source. One of `id`, `name` or `projectId`  must be provided.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the catalog source. One of `id`, `name` or `projectId` must be provided.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the project.  One of `id`, `name` or `projectId` must be provided.
     */
    projectId?: pulumi.Input<string>;
}
