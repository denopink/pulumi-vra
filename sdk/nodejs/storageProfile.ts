// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### S
 * This is an example of how to create a storage profile resource.
 *
 * **Vra storage profile:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumiverse/vra";
 *
 * // vSphere storage profile using generic vra_storage_profile resource.
 * const thisStorageProfile = new vra.StorageProfile("thisStorageProfile", {
 *     description: "vSphere Storage Profile with standard independent non-persistent disk.",
 *     regionId: data.vra_region["this"].id,
 *     defaultItem: false,
 *     diskProperties: {
 *         independent: "true",
 *         persistent: "false",
 *         limitIops: "2000",
 *         provisioningType: "eagerZeroedThick",
 *         sharesLevel: "custom",
 *         shares: "1500",
 *     },
 *     diskTargetProperties: {
 *         datastoreId: data.vra_fabric_datastore_vsphere["this"].id,
 *         storagePolicyId: data.vra_fabric_storage_policy_vsphere["this"].id,
 *     },
 *     tags: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 * });
 * // AWS storage profile using generic vra_storage_profile resource.
 * const thisIndex_storageProfileStorageProfile = new vra.StorageProfile("thisIndex/storageProfileStorageProfile", {
 *     description: "AWS Storage Profile with instance store device type.",
 *     regionId: data.vra_region["this"].id,
 *     defaultItem: false,
 *     diskProperties: {
 *         deviceType: "instance-store",
 *     },
 *     tags: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 * });
 * // Azure storage profile using generic vra_storage_profile resource.
 * const thisVraIndex_storageProfileStorageProfile = new vra.StorageProfile("thisVraIndex/storageProfileStorageProfile", {
 *     description: "Azure Storage Profile with managed disks.",
 *     regionId: data.vra_region["this"].id,
 *     defaultItem: false,
 *     supportsEncryption: false,
 *     diskProperties: {
 *         azureDataDiskCaching: "None",
 *         azureManagedDiskType: "Standard_LRS",
 *         azureOsDiskCaching: "None",
 *     },
 *     tags: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 * });
 * ```
 *
 * A storage profile resource supports the following arguments:
 */
export class StorageProfile extends pulumi.CustomResource {
    /**
     * Get an existing StorageProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageProfileState, opts?: pulumi.CustomResourceOptions): StorageProfile {
        return new StorageProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/storageProfile:StorageProfile';

    /**
     * Returns true if the given object is an instance of StorageProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageProfile.__pulumiType;
    }

    /**
     * Id of the cloud account this storage profile belongs to.
     */
    public /*out*/ readonly cloudAccountId!: pulumi.Output<string>;
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates if this storage profile is a default profile.
     */
    public readonly defaultItem!: pulumi.Output<boolean>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Map of storage properties that are to be applied on disk while provisioning.
     */
    public readonly diskProperties!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Map of storage placements to know where the disk is provisioned.
     */
    public readonly diskTargetProperties!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The id of the region as seen in the cloud provider for which this profile is defined.
     */
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    /**
     * HATEOAS of the entity
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.StorageProfileLink[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    public readonly supportsEncryption!: pulumi.Output<boolean>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    public readonly tags!: pulumi.Output<outputs.StorageProfileTag[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a StorageProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageProfileArgs | StorageProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageProfileState | undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["defaultItem"] = state ? state.defaultItem : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskProperties"] = state ? state.diskProperties : undefined;
            resourceInputs["diskTargetProperties"] = state ? state.diskTargetProperties : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["supportsEncryption"] = state ? state.supportsEncryption : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as StorageProfileArgs | undefined;
            if ((!args || args.defaultItem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultItem'");
            }
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            resourceInputs["defaultItem"] = args ? args.defaultItem : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskProperties"] = args ? args.diskProperties : undefined;
            resourceInputs["diskTargetProperties"] = args ? args.diskTargetProperties : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["supportsEncryption"] = args ? args.supportsEncryption : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudAccountId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageProfile resources.
 */
export interface StorageProfileState {
    /**
     * Id of the cloud account this storage profile belongs to.
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if this storage profile is a default profile.
     */
    defaultItem?: pulumi.Input<boolean>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Map of storage properties that are to be applied on disk while provisioning.
     */
    diskProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Map of storage placements to know where the disk is provisioned.
     */
    diskTargetProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * The id of the region as seen in the cloud provider for which this profile is defined.
     */
    externalRegionId?: pulumi.Input<string>;
    /**
     * HATEOAS of the entity
     */
    links?: pulumi.Input<pulumi.Input<inputs.StorageProfileLink>[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.StorageProfileTag>[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageProfile resource.
 */
export interface StorageProfileArgs {
    /**
     * Indicates if this storage profile is a default profile.
     */
    defaultItem: pulumi.Input<boolean>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Map of storage properties that are to be applied on disk while provisioning.
     */
    diskProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Map of storage placements to know where the disk is provisioned.
     */
    diskTargetProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.StorageProfileTag>[]>;
}
