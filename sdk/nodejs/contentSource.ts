// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resource provides a way to create a content source vRealize Automation(vRA).
 *
 * ## Example Usage
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@schmidtw/vra";
 *
 * const _this = new vra.ContentSource("this", {
 *     projectId: _var.project_id,
 *     typeId: "com.gitlab",
 *     description: "Some content Source",
 *     syncEnabled: false,
 *     config: {
 *         path: "blueprint01",
 *         branch: "master",
 *         repository: "vracontent/vra8_content_source_test",
 *         contentType: "BLUEPRINT",
 *         projectName: _var.project_name,
 *         integrationId: _var.integration_id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Content source can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import vra:index/contentSource:ContentSource this 05956583-6488-4e7d-84c9-92a7b7219a15`
 * ```
 */
export class ContentSource extends pulumi.CustomResource {
    /**
     * Get an existing ContentSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentSourceState, opts?: pulumi.CustomResourceOptions): ContentSource {
        return new ContentSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/contentSource:ContentSource';

    /**
     * Returns true if the given object is an instance of ContentSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentSource.__pulumiType;
    }

    /**
     * Content source custom configuration.
     */
    public readonly config!: pulumi.Output<outputs.ContentSourceConfig>;
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The user the entity was created by.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Date when the entity was last updated. The date is in ISO 6801 and UTC.
     */
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    /**
     * The user the entity was last updated by.
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * A human-friendly name for content source used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The id of the project this entity belongs to.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Flag indicating whether sync is enabled for this content source.
     */
    public readonly syncEnabled!: pulumi.Output<boolean>;
    /**
     * Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
     */
    public readonly typeId!: pulumi.Output<string>;

    /**
     * Create a ContentSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentSourceArgs | ContentSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentSourceState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["syncEnabled"] = state ? state.syncEnabled : undefined;
            resourceInputs["typeId"] = state ? state.typeId : undefined;
        } else {
            const args = argsOrState as ContentSourceArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.syncEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncEnabled'");
            }
            if ((!args || args.typeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["syncEnabled"] = args ? args.syncEnabled : undefined;
            resourceInputs["typeId"] = args ? args.typeId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContentSource resources.
 */
export interface ContentSourceState {
    /**
     * Content source custom configuration.
     */
    config?: pulumi.Input<inputs.ContentSourceConfig>;
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The user the entity was created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Date when the entity was last updated. The date is in ISO 6801 and UTC.
     */
    lastUpdatedAt?: pulumi.Input<string>;
    /**
     * The user the entity was last updated by.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * A human-friendly name for content source used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The id of the project this entity belongs to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Flag indicating whether sync is enabled for this content source.
     */
    syncEnabled?: pulumi.Input<boolean>;
    /**
     * Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
     */
    typeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentSource resource.
 */
export interface ContentSourceArgs {
    /**
     * Content source custom configuration.
     */
    config: pulumi.Input<inputs.ContentSourceConfig>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * A human-friendly name for content source used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the project this entity belongs to.
     */
    projectId: pulumi.Input<string>;
    /**
     * Flag indicating whether sync is enabled for this content source.
     */
    syncEnabled: pulumi.Input<boolean>;
    /**
     * Content Source type. Supported values are `com.gitlab`, `com.github`, `com.vmware.marketplace`, `org.bitbucket`.
     */
    typeId: pulumi.Input<string>;
}
