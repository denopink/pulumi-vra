// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Creates a VMware vRealize Automation VMC cloud account resource.
 *
 * ## Example Usage
 * ### S
 *
 * **Create VMC cloud account:**
 *
 * The following example shows how to create a VMC cloud account resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumiverse/vra";
 *
 * const _this = new vra.cloudaccount.Vmc("this", {
 *     description: "tf test vmc cloud account",
 *     apiToken: _var.api_token,
 *     sddcName: _var.sddc_name,
 *     vcenterHostname: _var.vcenter_hostname,
 *     vcenterPassword: _var.vcenter_password,
 *     vcenterUsername: _var.vcenter_username,
 *     nsxHostname: _var.nsx_hostname,
 *     dcId: _var.data_collector_id,
 *     regions: _var.regions,
 *     acceptSelfSignedCert: true,
 *     tags: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * To import the VMC cloud account, use the ID as in the following example
 *
 * ```sh
 *  $ pulumi import vra:cloudaccount/vmc:Vmc new_vmc 05956583-6488-4e7d-84c9-92a7b7219a15`
 * ```
 */
export class Vmc extends pulumi.CustomResource {
    /**
     * Get an existing Vmc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmcState, opts?: pulumi.CustomResourceOptions): Vmc {
        return new Vmc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:cloudaccount/vmc:Vmc';

    /**
     * Returns true if the given object is an instance of Vmc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vmc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vmc.__pulumiType;
    }

    /**
     * Accept self-signed certificate when connecting to the cloud account.
     */
    public readonly acceptSelfSignedCert!: pulumi.Output<boolean | undefined>;
    /**
     * VMC API access key.
     */
    public readonly apiToken!: pulumi.Output<string>;
    /**
     * Date when entity was created. Date and time format is ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
     */
    public readonly dcId!: pulumi.Output<string | undefined>;
    /**
     * Human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * HATEOAS of entity.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.cloudaccount.VmcLink[]>;
    /**
     * Human-friendly name used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IP address of the NSX Manager server in the specified SDDC / FQDN.
     */
    public readonly nsxHostname!: pulumi.Output<string>;
    /**
     * ID of organization that entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of entity owner.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Set of region names enabled for the cloud account.
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
     */
    public readonly sddcName!: pulumi.Output<string>;
    /**
     * Set of tag keys and values to apply to the cloud account.  
     * Example:[ { "key" : "vmware", "value": "provider" } ]
     */
    public readonly tags!: pulumi.Output<outputs.cloudaccount.VmcTag[]>;
    /**
     * Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
     */
    public readonly vcenterHostname!: pulumi.Output<string>;
    /**
     * Password used to authenticate to the cloud Account.
     */
    public readonly vcenterPassword!: pulumi.Output<string>;
    /**
     * vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
     */
    public readonly vcenterUsername!: pulumi.Output<string>;

    /**
     * Create a Vmc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmcArgs | VmcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmcState | undefined;
            resourceInputs["acceptSelfSignedCert"] = state ? state.acceptSelfSignedCert : undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dcId"] = state ? state.dcId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxHostname"] = state ? state.nsxHostname : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["sddcName"] = state ? state.sddcName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vcenterHostname"] = state ? state.vcenterHostname : undefined;
            resourceInputs["vcenterPassword"] = state ? state.vcenterPassword : undefined;
            resourceInputs["vcenterUsername"] = state ? state.vcenterUsername : undefined;
        } else {
            const args = argsOrState as VmcArgs | undefined;
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            if ((!args || args.nsxHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxHostname'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if ((!args || args.sddcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sddcName'");
            }
            if ((!args || args.vcenterHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterHostname'");
            }
            if ((!args || args.vcenterPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterPassword'");
            }
            if ((!args || args.vcenterUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterUsername'");
            }
            resourceInputs["acceptSelfSignedCert"] = args ? args.acceptSelfSignedCert : undefined;
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["dcId"] = args ? args.dcId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxHostname"] = args ? args.nsxHostname : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["sddcName"] = args ? args.sddcName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vcenterHostname"] = args ? args.vcenterHostname : undefined;
            resourceInputs["vcenterPassword"] = args ? args.vcenterPassword : undefined;
            resourceInputs["vcenterUsername"] = args ? args.vcenterUsername : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vmc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vmc resources.
 */
export interface VmcState {
    /**
     * Accept self-signed certificate when connecting to the cloud account.
     */
    acceptSelfSignedCert?: pulumi.Input<boolean>;
    /**
     * VMC API access key.
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Date when entity was created. Date and time format is ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
     */
    dcId?: pulumi.Input<string>;
    /**
     * Human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * HATEOAS of entity.
     */
    links?: pulumi.Input<pulumi.Input<inputs.cloudaccount.VmcLink>[]>;
    /**
     * Human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * IP address of the NSX Manager server in the specified SDDC / FQDN.
     */
    nsxHostname?: pulumi.Input<string>;
    /**
     * ID of organization that entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of entity owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Set of region names enabled for the cloud account.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
     */
    sddcName?: pulumi.Input<string>;
    /**
     * Set of tag keys and values to apply to the cloud account.  
     * Example:[ { "key" : "vmware", "value": "provider" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.cloudaccount.VmcTag>[]>;
    /**
     * Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
     */
    vcenterHostname?: pulumi.Input<string>;
    /**
     * Password used to authenticate to the cloud Account.
     */
    vcenterPassword?: pulumi.Input<string>;
    /**
     * vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
     */
    vcenterUsername?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vmc resource.
 */
export interface VmcArgs {
    /**
     * Accept self-signed certificate when connecting to the cloud account.
     */
    acceptSelfSignedCert?: pulumi.Input<boolean>;
    /**
     * VMC API access key.
     */
    apiToken: pulumi.Input<string>;
    /**
     * Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
     */
    dcId?: pulumi.Input<string>;
    /**
     * Human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * IP address of the NSX Manager server in the specified SDDC / FQDN.
     */
    nsxHostname: pulumi.Input<string>;
    /**
     * Set of region names enabled for the cloud account.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
     */
    sddcName: pulumi.Input<string>;
    /**
     * Set of tag keys and values to apply to the cloud account.  
     * Example:[ { "key" : "vmware", "value": "provider" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.cloudaccount.VmcTag>[]>;
    /**
     * IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
     */
    vcenterHostname: pulumi.Input<string>;
    /**
     * Password used to authenticate to the cloud Account.
     */
    vcenterPassword: pulumi.Input<string>;
    /**
     * vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
     */
    vcenterUsername: pulumi.Input<string>;
}
