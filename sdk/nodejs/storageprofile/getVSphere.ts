// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### S
 * This is an example of how to create a storage profile vsphere data source.
 *
 * **Storage profile vsphere data source by its id:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.storageprofile.getVSphere({
 *     id: vra_storage_profile_vsphere["this"].id,
 * });
 * ```
 *
 * **Vra storage profile data source filter by external region id:**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const thisVSphere = pulumi.output(vra.storageprofile.getVSphere({
 *     filter: "externalRegionId eq 'foobar'",
 * }));
 * ```
 *
 * A storage profile vsphere data source supports the following arguments:
 */
export function getVSphere(args?: GetVSphereArgs, opts?: pulumi.InvokeOptions): Promise<GetVSphereResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:storageprofile/getVSphere:getVSphere", {
        "filter": args.filter,
        "id": args.id,
        "sharesLevel": args.sharesLevel,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getVSphere.
 */
export interface GetVSphereArgs {
    /**
     * Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
     */
    filter?: string;
    /**
     * The id of the image profile instance.
     */
    id?: string;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    sharesLevel?: string;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: inputs.storageprofile.GetVSphereTag[];
}

/**
 * A collection of values returned by getVSphere.
 */
export interface GetVSphereResult {
    /**
     * Id of the cloud account this storage profile belongs to.
     */
    readonly cloudAccountId: string;
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    readonly createdAt: string;
    /**
     * Indicates if this storage profile is a default profile.
     */
    readonly defaultItem: boolean;
    /**
     * A human-friendly description.
     */
    readonly description: string;
    /**
     * Type of mode for the disk.
     */
    readonly diskMode: string;
    /**
     * Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
     */
    readonly diskType: string;
    /**
     * The id of the region as seen in the cloud provider for which this profile is defined.
     */
    readonly externalRegionId: string;
    readonly filter?: string;
    readonly id: string;
    /**
     * The upper bound for the I/O operations per second allocated for each virtual disk.
     */
    readonly limitIops: string;
    /**
     * HATEOAS of the entity
     */
    readonly links: outputs.storageprofile.GetVSphereLink[];
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    readonly name: string;
    /**
     * The id of the organization this entity belongs to.
     */
    readonly orgId: string;
    /**
     * Email of the user that owns the entity.
     */
    readonly owner: string;
    /**
     * Type of provisioning policy for the disk.
     */
    readonly provisioningType: string;
    /**
     * A specific number of shares assigned to each virtual machine.
     */
    readonly shares: string;
    readonly sharesLevel?: string;
    /**
     * Indicates whether this storage policy should support encryption or not.
     */
    readonly supportsEncryption: boolean;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    readonly tags: outputs.storageprofile.GetVSphereTag[];
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    readonly updatedAt: string;
}

export function getVSphereOutput(args?: GetVSphereOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVSphereResult> {
    return pulumi.output(args).apply(a => getVSphere(a, opts))
}

/**
 * A collection of arguments for invoking getVSphere.
 */
export interface GetVSphereOutputArgs {
    /**
     * Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
     */
    filter?: pulumi.Input<string>;
    /**
     * The id of the image profile instance.
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    sharesLevel?: pulumi.Input<string>;
    /**
     * A set of tag keys and optional values that were set on this Network Profile.
     * example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.storageprofile.GetVSphereTagArgs>[]>;
}
