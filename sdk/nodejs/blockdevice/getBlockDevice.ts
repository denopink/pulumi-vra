// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * ## ---layout: "vra"
 *
 * page_title: "VMware vRealize Automation: vra.blockdevice.BlockDevice"
 * description: |-
 *   Provides a data lookup for vra_block_device.
 * ---
 *
 * # Data Source: vra.blockdevice.BlockDevice
 *
 * Provides a data lookup for a vra_block_device.
 *
 * ## Example Usage
 * ### S
 *
 * **Block device data source by its id:**
 *
 * This is an example of how to read a block device data source using its ID.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const this = vra.blockdevice.getBlockDevice({
 *     id: _var.block_device_id,
 * });
 * ```
 *
 * **Block device data source filter by name:**
 *
 * This is an example of how to read a block device data source using its name.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vra from "@pulumi/vra";
 *
 * const thisBlockDevice = pulumi.output(vra.blockdevice.getBlockDevice({
 *     filter: `name eq '${var_block_device_name}'`,
 * }));
 * ```
 */
export function getBlockDevice(args?: GetBlockDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockDeviceResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vra:blockdevice/getBlockDevice:getBlockDevice", {
        "description": args.description,
        "expandSnapshots": args.expandSnapshots,
        "filter": args.filter,
        "id": args.id,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getBlockDevice.
 */
export interface GetBlockDeviceArgs {
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    description?: string;
    /**
     * Indicates whether the snapshots of the block-devices should be included in the state. Applicable only for first class block devices.
     */
    expandSnapshots?: boolean;
    /**
     * Search criteria to filter the list of block devices.
     */
    filter?: string;
    /**
     * The id of the block device.
     */
    id?: string;
    /**
     * A set of tag keys and optional values that were set on this resource instance.
     * example:[ { "key" : "vmware.enumeration.type", "value": "nebsBlock" } ]
     */
    tags?: inputs.blockdevice.GetBlockDeviceTag[];
}

/**
 * A collection of values returned by getBlockDevice.
 */
export interface GetBlockDeviceResult {
    /**
     * Capacity of the block device in GB.
     */
    readonly capacityInGb: number;
    /**
     * Set of ids of the cloud accounts this entity belongs to.
     */
    readonly cloudAccountIds: string[];
    /**
     * Date when the entity was created. The date is in ISO 6801 and UTC.
     */
    readonly createdAt: string;
    /**
     * Additional custom properties that may be used to extend the machine.
     */
    readonly customProperties: {[key: string]: any};
    /**
     * The id of the deployment that is associated with this resource.
     */
    readonly deploymentId: string;
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    readonly description?: string;
    readonly expandSnapshots?: boolean;
    /**
     * External entity Id on the provider side.
     */
    readonly externalId: string;
    /**
     * The external regionId of the resource.
     */
    readonly externalRegionId: string;
    /**
     * The external zoneId of the resource.
     */
    readonly externalZoneId: string;
    readonly filter?: string;
    readonly id: string;
    /**
     * HATEOAS of the entity.
     */
    readonly links: outputs.blockdevice.GetBlockDeviceLink[];
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    readonly name: string;
    /**
     * The id of the organization this entity belongs to.
     */
    readonly orgId: string;
    /**
     * Email of the user that owns the entity.
     */
    readonly owner: string;
    /**
     * Indicates whether the block device survives a delete action.
     */
    readonly persistent: boolean;
    /**
     * The id of the project the current user belongs to.
     */
    readonly projectId: string;
    readonly snapshots: outputs.blockdevice.GetBlockDeviceSnapshot[];
    /**
     * Status of the block device.
     */
    readonly status: string;
    /**
     * A set of tag keys and optional values that were set on this resource instance.
     * example:[ { "key" : "vmware.enumeration.type", "value": "nebsBlock" } ]
     */
    readonly tags: outputs.blockdevice.GetBlockDeviceTag[];
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    readonly updatedAt: string;
}

export function getBlockDeviceOutput(args?: GetBlockDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockDeviceResult> {
    return pulumi.output(args).apply(a => getBlockDevice(a, opts))
}

/**
 * A collection of arguments for invoking getBlockDevice.
 */
export interface GetBlockDeviceOutputArgs {
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates whether the snapshots of the block-devices should be included in the state. Applicable only for first class block devices.
     */
    expandSnapshots?: pulumi.Input<boolean>;
    /**
     * Search criteria to filter the list of block devices.
     */
    filter?: pulumi.Input<string>;
    /**
     * The id of the block device.
     */
    id?: pulumi.Input<string>;
    /**
     * A set of tag keys and optional values that were set on this resource instance.
     * example:[ { "key" : "vmware.enumeration.type", "value": "nebsBlock" } ]
     */
    tags?: pulumi.Input<pulumi.Input<inputs.blockdevice.GetBlockDeviceTagArgs>[]>;
}
