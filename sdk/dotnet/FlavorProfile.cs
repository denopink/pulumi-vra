// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace schmidtw.Vra
{
    /// <summary>
    /// ## Example Usage
    /// ### S
    /// This is an example of how to create a flavor profile resource.
    /// 
    /// **Flavor profile:**
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Vra = schmidtw.Vra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_flavor_profile = new Vra.FlavorProfile("my-flavor-profile", new()
    ///     {
    ///         Description = "my flavor",
    ///         FlavorMappings = new[]
    ///         {
    ///             new Vra.Inputs.FlavorProfileFlavorMappingArgs
    ///             {
    ///                 InstanceType = "t2.small",
    ///                 Name = "small",
    ///             },
    ///             new Vra.Inputs.FlavorProfileFlavorMappingArgs
    ///             {
    ///                 InstanceType = "t2.medium",
    ///                 Name = "medium",
    ///             },
    ///         },
    ///         RegionId = data.Vra_region.Us_east_1_region.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// An flavor profile resource supports the following arguments:
    /// </summary>
    [VraResourceType("vra:index/flavorProfile:FlavorProfile")]
    public partial class FlavorProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the cloud account this entity belongs to.
        /// </summary>
        [Output("cloudAccountId")]
        public Output<string> CloudAccountId { get; private set; } = null!;

        /// <summary>
        /// Date when  entity was created. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the external region that is associated with the flavor profile.
        /// </summary>
        [Output("externalRegionId")]
        public Output<string> ExternalRegionId { get; private set; } = null!;

        /// <summary>
        /// Map between global fabric flavor keys and fabric flavor descriptions.
        /// </summary>
        [Output("flavorMappings")]
        public Output<ImmutableArray<Outputs.FlavorProfileFlavorMapping>> FlavorMappings { get; private set; } = null!;

        /// <summary>
        /// HATEOAS of entity.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.FlavorProfileLink>> Links { get; private set; } = null!;

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of organization that entity belongs to.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Email of entity owner.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The id of the region for which this profile is defined as in vRealize Automation(vRA).
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a FlavorProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlavorProfile(string name, FlavorProfileArgs args, CustomResourceOptions? options = null)
            : base("vra:index/flavorProfile:FlavorProfile", name, args ?? new FlavorProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlavorProfile(string name, Input<string> id, FlavorProfileState? state = null, CustomResourceOptions? options = null)
            : base("vra:index/flavorProfile:FlavorProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/schmidtw/pulumi-vra/releases/download/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlavorProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlavorProfile Get(string name, Input<string> id, FlavorProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new FlavorProfile(name, id, state, options);
        }
    }

    public sealed class FlavorProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("flavorMappings")]
        private InputList<Inputs.FlavorProfileFlavorMappingArgs>? _flavorMappings;

        /// <summary>
        /// Map between global fabric flavor keys and fabric flavor descriptions.
        /// </summary>
        public InputList<Inputs.FlavorProfileFlavorMappingArgs> FlavorMappings
        {
            get => _flavorMappings ?? (_flavorMappings = new InputList<Inputs.FlavorProfileFlavorMappingArgs>());
            set => _flavorMappings = value;
        }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the region for which this profile is defined as in vRealize Automation(vRA).
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        public FlavorProfileArgs()
        {
        }
        public static new FlavorProfileArgs Empty => new FlavorProfileArgs();
    }

    public sealed class FlavorProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the cloud account this entity belongs to.
        /// </summary>
        [Input("cloudAccountId")]
        public Input<string>? CloudAccountId { get; set; }

        /// <summary>
        /// Date when  entity was created. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the external region that is associated with the flavor profile.
        /// </summary>
        [Input("externalRegionId")]
        public Input<string>? ExternalRegionId { get; set; }

        [Input("flavorMappings")]
        private InputList<Inputs.FlavorProfileFlavorMappingGetArgs>? _flavorMappings;

        /// <summary>
        /// Map between global fabric flavor keys and fabric flavor descriptions.
        /// </summary>
        public InputList<Inputs.FlavorProfileFlavorMappingGetArgs> FlavorMappings
        {
            get => _flavorMappings ?? (_flavorMappings = new InputList<Inputs.FlavorProfileFlavorMappingGetArgs>());
            set => _flavorMappings = value;
        }

        [Input("links")]
        private InputList<Inputs.FlavorProfileLinkGetArgs>? _links;

        /// <summary>
        /// HATEOAS of entity.
        /// </summary>
        public InputList<Inputs.FlavorProfileLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.FlavorProfileLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of organization that entity belongs to.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Email of entity owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The id of the region for which this profile is defined as in vRealize Automation(vRA).
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public FlavorProfileState()
        {
        }
        public static new FlavorProfileState Empty => new FlavorProfileState();
    }
}
