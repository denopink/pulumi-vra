// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vra.Catalog
{
    public static class GetSourceBlueprint
    {
        /// <summary>
        /// This data source provides information about a catalog source of type cloud template (blueprint) in vRA.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by its name.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         Name = @var.Catalog_source_name,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by its id.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         Id = @var.Catalog_source_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         ProjectId = @var.Project_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSourceBlueprintResult> InvokeAsync(GetSourceBlueprintArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSourceBlueprintResult>("vra:catalog/getSourceBlueprint:getSourceBlueprint", args ?? new GetSourceBlueprintArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides information about a catalog source of type cloud template (blueprint) in vRA.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by its name.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         Name = @var.Catalog_source_name,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by its id.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         Id = @var.Catalog_source_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Catalog.GetSourceBlueprint.Invoke(new()
        ///     {
        ///         ProjectId = @var.Project_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSourceBlueprintResult> Invoke(GetSourceBlueprintInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSourceBlueprintResult>("vra:catalog/getSourceBlueprint:getSourceBlueprint", args ?? new GetSourceBlueprintInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSourceBlueprintArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        private Dictionary<string, string>? _config;

        /// <summary>
        /// Custom configuration of the catalog source as a map of key values.
        /// </summary>
        public Dictionary<string, string> Config
        {
            get => _config ?? (_config = new Dictionary<string, string>());
            set => _config = value;
        }

        /// <summary>
        /// Catalog source description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The id of catalog source. One of `id`, `name` or `project_id`  must be provided.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the catalog source. One of `id`, `name` or `project_id` must be provided.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The id of the project.  One of `id`, `name` or `project_id` must be provided.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetSourceBlueprintArgs()
        {
        }
        public static new GetSourceBlueprintArgs Empty => new GetSourceBlueprintArgs();
    }

    public sealed class GetSourceBlueprintInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// Custom configuration of the catalog source as a map of key values.
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set => _config = value;
        }

        /// <summary>
        /// Catalog source description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of catalog source. One of `id`, `name` or `project_id`  must be provided.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the catalog source. One of `id`, `name` or `project_id` must be provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the project.  One of `id`, `name` or `project_id` must be provided.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetSourceBlueprintInvokeArgs()
        {
        }
        public static new GetSourceBlueprintInvokeArgs Empty => new GetSourceBlueprintInvokeArgs();
    }


    [OutputType]
    public sealed class GetSourceBlueprintResult
    {
        /// <summary>
        /// Custom configuration of the catalog source as a map of key values.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Config;
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The user the entity was created by.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// Catalog source description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A flag indicating that all the items can be requested across all projects.
        /// </summary>
        public readonly bool Global;
        public readonly string? Id;
        /// <summary>
        /// Number of items found in the catalog source.
        /// </summary>
        public readonly string ItemsFound;
        /// <summary>
        /// Number of items imported from the catalog source.
        /// </summary>
        public readonly string ItemsImported;
        /// <summary>
        /// Time at which the last import was completed at.
        /// </summary>
        public readonly string LastImportCompletedAt;
        /// <summary>
        /// A list of errors seen at last time the catalog source is imported.
        /// </summary>
        public readonly ImmutableArray<string> LastImportErrors;
        /// <summary>
        /// Time at which the last import was started at.
        /// </summary>
        public readonly string LastImportStartedAt;
        /// <summary>
        /// The user that last updated the catalog source.
        /// </summary>
        public readonly string LastUpdatedBy;
        public readonly string Name;
        public readonly string ProjectId;
        /// <summary>
        /// Type of catalog source. Example: `blueprint`, `CFT`, etc.
        /// </summary>
        public readonly string TypeId;

        [OutputConstructor]
        private GetSourceBlueprintResult(
            ImmutableDictionary<string, string> config,

            string createdAt,

            string createdBy,

            string? description,

            bool global,

            string? id,

            string itemsFound,

            string itemsImported,

            string lastImportCompletedAt,

            ImmutableArray<string> lastImportErrors,

            string lastImportStartedAt,

            string lastUpdatedBy,

            string name,

            string projectId,

            string typeId)
        {
            Config = config;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            Description = description;
            Global = global;
            Id = id;
            ItemsFound = itemsFound;
            ItemsImported = itemsImported;
            LastImportCompletedAt = lastImportCompletedAt;
            LastImportErrors = lastImportErrors;
            LastImportStartedAt = lastImportStartedAt;
            LastUpdatedBy = lastUpdatedBy;
            Name = name;
            ProjectId = projectId;
            TypeId = typeId;
        }
    }
}
