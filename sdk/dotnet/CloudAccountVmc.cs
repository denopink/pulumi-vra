// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace pulumiverse.Vra
{
    /// <summary>
    /// Creates a VMware vRealize Automation VMC cloud account resource.
    /// 
    /// ## Example Usage
    /// ### S
    /// 
    /// **Create VMC cloud account:**
    /// 
    /// The following example shows how to create a VMC cloud account resource.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Vra = pulumiverse.Vra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Vra.CloudAccountVmc("this", new()
    ///     {
    ///         Description = "tf test vmc cloud account",
    ///         ApiToken = @var.Api_token,
    ///         SddcName = @var.Sddc_name,
    ///         VcenterHostname = @var.Vcenter_hostname,
    ///         VcenterPassword = @var.Vcenter_password,
    ///         VcenterUsername = @var.Vcenter_username,
    ///         NsxHostname = @var.Nsx_hostname,
    ///         DcId = @var.Data_collector_id,
    ///         Regions = @var.Regions,
    ///         AcceptSelfSignedCert = true,
    ///         Tags = new[]
    ///         {
    ///             new Vra.Inputs.CloudAccountVmcTagArgs
    ///             {
    ///                 Key = "foo",
    ///                 Value = "bar",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// To import the VMC cloud account, use the ID as in the following example
    /// 
    /// ```sh
    ///  $ pulumi import vra:index/cloudAccountVmc:CloudAccountVmc new_vmc 05956583-6488-4e7d-84c9-92a7b7219a15`
    /// ```
    /// </summary>
    [VraResourceType("vra:index/cloudAccountVmc:CloudAccountVmc")]
    public partial class CloudAccountVmc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Accept self-signed certificate when connecting to the cloud account.
        /// </summary>
        [Output("acceptSelfSignedCert")]
        public Output<bool?> AcceptSelfSignedCert { get; private set; } = null!;

        /// <summary>
        /// VMC API access key.
        /// </summary>
        [Output("apiToken")]
        public Output<string> ApiToken { get; private set; } = null!;

        /// <summary>
        /// Date when entity was created. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        /// </summary>
        [Output("dcId")]
        public Output<string?> DcId { get; private set; } = null!;

        /// <summary>
        /// Human-friendly description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// HATEOAS of entity.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.CloudAccountVmcLink>> Links { get; private set; } = null!;

        /// <summary>
        /// Human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IP address of the NSX Manager server in the specified SDDC / FQDN.
        /// </summary>
        [Output("nsxHostname")]
        public Output<string> NsxHostname { get; private set; } = null!;

        /// <summary>
        /// ID of organization that entity belongs to.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Email of entity owner.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Set of region names enabled for the cloud account.
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        /// </summary>
        [Output("sddcName")]
        public Output<string> SddcName { get; private set; } = null!;

        /// <summary>
        /// Set of tag keys and values to apply to the cloud account.  
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.CloudAccountVmcTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        /// </summary>
        [Output("vcenterHostname")]
        public Output<string> VcenterHostname { get; private set; } = null!;

        /// <summary>
        /// Password used to authenticate to the cloud Account.
        /// </summary>
        [Output("vcenterPassword")]
        public Output<string> VcenterPassword { get; private set; } = null!;

        /// <summary>
        /// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        /// </summary>
        [Output("vcenterUsername")]
        public Output<string> VcenterUsername { get; private set; } = null!;


        /// <summary>
        /// Create a CloudAccountVmc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudAccountVmc(string name, CloudAccountVmcArgs args, CustomResourceOptions? options = null)
            : base("vra:index/cloudAccountVmc:CloudAccountVmc", name, args ?? new CloudAccountVmcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudAccountVmc(string name, Input<string> id, CloudAccountVmcState? state = null, CustomResourceOptions? options = null)
            : base("vra:index/cloudAccountVmc:CloudAccountVmc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudAccountVmc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudAccountVmc Get(string name, Input<string> id, CloudAccountVmcState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudAccountVmc(name, id, state, options);
        }
    }

    public sealed class CloudAccountVmcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Accept self-signed certificate when connecting to the cloud account.
        /// </summary>
        [Input("acceptSelfSignedCert")]
        public Input<bool>? AcceptSelfSignedCert { get; set; }

        /// <summary>
        /// VMC API access key.
        /// </summary>
        [Input("apiToken", required: true)]
        public Input<string> ApiToken { get; set; } = null!;

        /// <summary>
        /// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        /// </summary>
        [Input("dcId")]
        public Input<string>? DcId { get; set; }

        /// <summary>
        /// Human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IP address of the NSX Manager server in the specified SDDC / FQDN.
        /// </summary>
        [Input("nsxHostname", required: true)]
        public Input<string> NsxHostname { get; set; } = null!;

        [Input("regions", required: true)]
        private InputList<string>? _regions;

        /// <summary>
        /// Set of region names enabled for the cloud account.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        /// </summary>
        [Input("sddcName", required: true)]
        public Input<string> SddcName { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.CloudAccountVmcTagArgs>? _tags;

        /// <summary>
        /// Set of tag keys and values to apply to the cloud account.  
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        public InputList<Inputs.CloudAccountVmcTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.CloudAccountVmcTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        /// </summary>
        [Input("vcenterHostname", required: true)]
        public Input<string> VcenterHostname { get; set; } = null!;

        /// <summary>
        /// Password used to authenticate to the cloud Account.
        /// </summary>
        [Input("vcenterPassword", required: true)]
        public Input<string> VcenterPassword { get; set; } = null!;

        /// <summary>
        /// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        /// </summary>
        [Input("vcenterUsername", required: true)]
        public Input<string> VcenterUsername { get; set; } = null!;

        public CloudAccountVmcArgs()
        {
        }
        public static new CloudAccountVmcArgs Empty => new CloudAccountVmcArgs();
    }

    public sealed class CloudAccountVmcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Accept self-signed certificate when connecting to the cloud account.
        /// </summary>
        [Input("acceptSelfSignedCert")]
        public Input<bool>? AcceptSelfSignedCert { get; set; }

        /// <summary>
        /// VMC API access key.
        /// </summary>
        [Input("apiToken")]
        public Input<string>? ApiToken { get; set; }

        /// <summary>
        /// Date when entity was created. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        /// </summary>
        [Input("dcId")]
        public Input<string>? DcId { get; set; }

        /// <summary>
        /// Human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("links")]
        private InputList<Inputs.CloudAccountVmcLinkGetArgs>? _links;

        /// <summary>
        /// HATEOAS of entity.
        /// </summary>
        public InputList<Inputs.CloudAccountVmcLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.CloudAccountVmcLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IP address of the NSX Manager server in the specified SDDC / FQDN.
        /// </summary>
        [Input("nsxHostname")]
        public Input<string>? NsxHostname { get; set; }

        /// <summary>
        /// ID of organization that entity belongs to.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Email of entity owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// Set of region names enabled for the cloud account.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        /// </summary>
        [Input("sddcName")]
        public Input<string>? SddcName { get; set; }

        [Input("tags")]
        private InputList<Inputs.CloudAccountVmcTagGetArgs>? _tags;

        /// <summary>
        /// Set of tag keys and values to apply to the cloud account.  
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        public InputList<Inputs.CloudAccountVmcTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.CloudAccountVmcTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        /// </summary>
        [Input("vcenterHostname")]
        public Input<string>? VcenterHostname { get; set; }

        /// <summary>
        /// Password used to authenticate to the cloud Account.
        /// </summary>
        [Input("vcenterPassword")]
        public Input<string>? VcenterPassword { get; set; }

        /// <summary>
        /// vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        /// </summary>
        [Input("vcenterUsername")]
        public Input<string>? VcenterUsername { get; set; }

        public CloudAccountVmcState()
        {
        }
        public static new CloudAccountVmcState Empty => new CloudAccountVmcState();
    }
}
