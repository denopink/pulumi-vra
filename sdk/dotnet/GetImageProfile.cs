// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace schmidtw.Vra
{
    public static class GetImageProfile
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to read an image profile as data source.
        /// 
        /// **Image profile data source by its id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetImageProfile.Invoke(new()
        ///     {
        ///         Filter = "name eq 'foobar'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Vra image profile data source filter by region id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetImageProfile.Invoke(new()
        ///     {
        ///         RegionId = vra_image_profile.This.Region_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// An image profile data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageProfileResult> InvokeAsync(GetImageProfileArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageProfileResult>("vra:index/getImageProfile:getImageProfile", args ?? new GetImageProfileArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to read an image profile as data source.
        /// 
        /// **Image profile data source by its id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetImageProfile.Invoke(new()
        ///     {
        ///         Filter = "name eq 'foobar'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Vra image profile data source filter by region id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetImageProfile.Invoke(new()
        ///     {
        ///         RegionId = vra_image_profile.This.Region_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// An image profile data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetImageProfileResult> Invoke(GetImageProfileInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetImageProfileResult>("vra:index/getImageProfile:getImageProfile", args ?? new GetImageProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '&lt;regionId&gt;' and cloudAccountId eq '&lt;cloudAccountId&gt;'.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The id of the image profile instance.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("imageMappings")]
        private List<Inputs.GetImageProfileImageMappingArgs>? _imageMappings;

        /// <summary>
        /// Image mapping defined for the corresponding region.
        /// </summary>
        public List<Inputs.GetImageProfileImageMappingArgs> ImageMappings
        {
            get => _imageMappings ?? (_imageMappings = new List<Inputs.GetImageProfileImageMappingArgs>());
            set => _imageMappings = value;
        }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The id of the region for which this profile is defined as in vRealize Automation(vRA).
        /// </summary>
        [Input("regionId")]
        public string? RegionId { get; set; }

        public GetImageProfileArgs()
        {
        }
        public static new GetImageProfileArgs Empty => new GetImageProfileArgs();
    }

    public sealed class GetImageProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '&lt;regionId&gt;' and cloudAccountId eq '&lt;cloudAccountId&gt;'.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The id of the image profile instance.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("imageMappings")]
        private InputList<Inputs.GetImageProfileImageMappingInputArgs>? _imageMappings;

        /// <summary>
        /// Image mapping defined for the corresponding region.
        /// </summary>
        public InputList<Inputs.GetImageProfileImageMappingInputArgs> ImageMappings
        {
            get => _imageMappings ?? (_imageMappings = new InputList<Inputs.GetImageProfileImageMappingInputArgs>());
            set => _imageMappings = value;
        }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the region for which this profile is defined as in vRealize Automation(vRA).
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        public GetImageProfileInvokeArgs()
        {
        }
        public static new GetImageProfileInvokeArgs Empty => new GetImageProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageProfileResult
    {
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// A human-friendly description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The external regionId of the resource.
        /// </summary>
        public readonly string ExternalRegionId;
        public readonly string? Filter;
        public readonly string Id;
        /// <summary>
        /// Image mapping defined for the corresponding region.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageProfileImageMappingResult> ImageMappings;
        public readonly string Name;
        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        public readonly string Owner;
        public readonly string RegionId;
        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetImageProfileResult(
            string createdAt,

            string? description,

            string externalRegionId,

            string? filter,

            string id,

            ImmutableArray<Outputs.GetImageProfileImageMappingResult> imageMappings,

            string name,

            string owner,

            string regionId,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Description = description;
            ExternalRegionId = externalRegionId;
            Filter = filter;
            Id = id;
            ImageMappings = imageMappings;
            Name = name;
            Owner = owner;
            RegionId = regionId;
            UpdatedAt = updatedAt;
        }
    }
}
