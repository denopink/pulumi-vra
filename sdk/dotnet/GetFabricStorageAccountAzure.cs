// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace pulumiverse.Vra
{
    public static class GetFabricStorageAccountAzure
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to lookup fabric Azure storage account.
        /// 
        /// **Fabric Azure storage account by Id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetFabricStorageAccountAzure.Invoke(new()
        ///     {
        ///         Id = @var.Fabric_storage_account_azure_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Fabric Azure storage by filter query:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetFabricStorageAccountAzure.Invoke(new()
        ///     {
        ///         Filter = $"name eq '{@var.Name}'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A fabric Azure storage account supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFabricStorageAccountAzureResult> InvokeAsync(GetFabricStorageAccountAzureArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFabricStorageAccountAzureResult>("vra:index/getFabricStorageAccountAzure:getFabricStorageAccountAzure", args ?? new GetFabricStorageAccountAzureArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to lookup fabric Azure storage account.
        /// 
        /// **Fabric Azure storage account by Id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetFabricStorageAccountAzure.Invoke(new()
        ///     {
        ///         Id = @var.Fabric_storage_account_azure_id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Fabric Azure storage by filter query:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetFabricStorageAccountAzure.Invoke(new()
        ///     {
        ///         Filter = $"name eq '{@var.Name}'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A fabric Azure storage account supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFabricStorageAccountAzureResult> Invoke(GetFabricStorageAccountAzureInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFabricStorageAccountAzureResult>("vra:index/getFabricStorageAccountAzure:getFabricStorageAccountAzure", args ?? new GetFabricStorageAccountAzureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFabricStorageAccountAzureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Search criteria to narrow down the fabric Azure storage accounts. Only one of 'filter' or 'id' must be specified.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The id of the fabric Azure storage account. Only one of 'filter' or 'id' must be specified.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetFabricStorageAccountAzureArgs()
        {
        }
        public static new GetFabricStorageAccountAzureArgs Empty => new GetFabricStorageAccountAzureArgs();
    }

    public sealed class GetFabricStorageAccountAzureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Search criteria to narrow down the fabric Azure storage accounts. Only one of 'filter' or 'id' must be specified.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The id of the fabric Azure storage account. Only one of 'filter' or 'id' must be specified.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetFabricStorageAccountAzureInvokeArgs()
        {
        }
        public static new GetFabricStorageAccountAzureInvokeArgs Empty => new GetFabricStorageAccountAzureInvokeArgs();
    }


    [OutputType]
    public sealed class GetFabricStorageAccountAzureResult
    {
        /// <summary>
        /// Set of ids of the cloud accounts this entity belongs to.
        /// </summary>
        public readonly ImmutableArray<string> CloudAccountIds;
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// A human-friendly description of the fabric Azure storage account.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// External entity Id on the provider side.
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// The id of the region for which this entity is defined.
        /// </summary>
        public readonly string ExternalRegionId;
        public readonly string? Filter;
        public readonly string Id;
        /// <summary>
        /// HATEOAS of the entity
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFabricStorageAccountAzureLinkResult> Links;
        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The id of the organization this entity belongs to.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed. example: Standard_LRS / Premium_LRS
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetFabricStorageAccountAzureResult(
            ImmutableArray<string> cloudAccountIds,

            string createdAt,

            string description,

            string externalId,

            string externalRegionId,

            string? filter,

            string id,

            ImmutableArray<Outputs.GetFabricStorageAccountAzureLinkResult> links,

            string name,

            string orgId,

            string owner,

            string type,

            string updatedAt)
        {
            CloudAccountIds = cloudAccountIds;
            CreatedAt = createdAt;
            Description = description;
            ExternalId = externalId;
            ExternalRegionId = externalRegionId;
            Filter = filter;
            Id = id;
            Links = links;
            Name = name;
            OrgId = orgId;
            Owner = owner;
            Type = type;
            UpdatedAt = updatedAt;
        }
    }
}
