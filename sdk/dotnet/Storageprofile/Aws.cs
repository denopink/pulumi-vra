// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vra.Storageprofile
{
    /// <summary>
    /// ## Example Usage
    /// ### S
    /// This is an example of how to create a storage profile aws resource.
    /// 
    /// **Vra storage profile aws:**
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Vra = Pulumiverse.Vra;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // AWS storage profile using vra_storage_profile_aws resource and EBS disk type.
    ///     var thisAws = new Vra.Storageprofile.Aws("thisAws", new()
    ///     {
    ///         Description = "AWS Storage Profile with instance store device type.",
    ///         RegionId = data.Vra_region.This.Id,
    ///         DefaultItem = false,
    ///         SupportsEncryption = false,
    ///         DeviceType = "ebs",
    ///         VolumeType = "io1",
    ///         Iops = "1000",
    ///         Tags = new[]
    ///         {
    ///             new Vra.Storageprofile.Inputs.AwsTagArgs
    ///             {
    ///                 Key = "foo",
    ///                 Value = "bar",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // AWS storage profile using vra_storage_profile_aws resource and instance store disk type.
    ///     var thisStorageprofile_awsAws = new Vra.Storageprofile.Aws("thisStorageprofile/awsAws", new()
    ///     {
    ///         Description = "AWS Storage Profile with instance store device type.",
    ///         RegionId = data.Vra_region.This.Id,
    ///         DefaultItem = false,
    ///         DeviceType = "instance-store",
    ///         Tags = new[]
    ///         {
    ///             new Vra.Storageprofile.Inputs.AwsTagArgs
    ///             {
    ///                 Key = "foo",
    ///                 Value = "bar",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// A storage profile aws resource supports the following arguments:
    /// </summary>
    [VraResourceType("vra:storageprofile/aws:Aws")]
    public partial class Aws : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Indicates if this storage profile is a default profile.
        /// </summary>
        [Output("defaultItem")]
        public Output<bool> DefaultItem { get; private set; } = null!;

        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of storage device.
        /// </summary>
        [Output("deviceType")]
        public Output<string> DeviceType { get; private set; } = null!;

        /// <summary>
        /// The id of the region as seen in the cloud provider for which this profile is defined.
        /// </summary>
        [Output("externalRegionId")]
        public Output<string> ExternalRegionId { get; private set; } = null!;

        /// <summary>
        /// Indicates maximum I/O operations per second in range(1-20,000).
        /// </summary>
        [Output("iops")]
        public Output<string> Iops { get; private set; } = null!;

        /// <summary>
        /// HATEOAS of the entity
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.AwsLink>> Links { get; private set; } = null!;

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the organization this entity belongs to.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// A link to the region that is associated with the storage profile.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this storage profile supports encryption or not.
        /// </summary>
        [Output("supportsEncryption")]
        public Output<bool> SupportsEncryption { get; private set; } = null!;

        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AwsTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of volume associated with type of storage.
        /// </summary>
        [Output("volumeType")]
        public Output<string> VolumeType { get; private set; } = null!;


        /// <summary>
        /// Create a Aws resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Aws(string name, AwsArgs args, CustomResourceOptions? options = null)
            : base("vra:storageprofile/aws:Aws", name, args ?? new AwsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Aws(string name, Input<string> id, AwsState? state = null, CustomResourceOptions? options = null)
            : base("vra:storageprofile/aws:Aws", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Aws resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Aws Get(string name, Input<string> id, AwsState? state = null, CustomResourceOptions? options = null)
        {
            return new Aws(name, id, state, options);
        }
    }

    public sealed class AwsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if this storage profile is a default profile.
        /// </summary>
        [Input("defaultItem", required: true)]
        public Input<bool> DefaultItem { get; set; } = null!;

        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates the type of storage device.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// Indicates maximum I/O operations per second in range(1-20,000).
        /// </summary>
        [Input("iops")]
        public Input<string>? Iops { get; set; }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A link to the region that is associated with the storage profile.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        /// <summary>
        /// Indicates whether this storage profile supports encryption or not.
        /// </summary>
        [Input("supportsEncryption")]
        public Input<bool>? SupportsEncryption { get; set; }

        [Input("tags")]
        private InputList<Inputs.AwsTagArgs>? _tags;

        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        public InputList<Inputs.AwsTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AwsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates the type of volume associated with type of storage.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public AwsArgs()
        {
        }
        public static new AwsArgs Empty => new AwsArgs();
    }

    public sealed class AwsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Indicates if this storage profile is a default profile.
        /// </summary>
        [Input("defaultItem")]
        public Input<bool>? DefaultItem { get; set; }

        /// <summary>
        /// A human-friendly description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates the type of storage device.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// The id of the region as seen in the cloud provider for which this profile is defined.
        /// </summary>
        [Input("externalRegionId")]
        public Input<string>? ExternalRegionId { get; set; }

        /// <summary>
        /// Indicates maximum I/O operations per second in range(1-20,000).
        /// </summary>
        [Input("iops")]
        public Input<string>? Iops { get; set; }

        [Input("links")]
        private InputList<Inputs.AwsLinkGetArgs>? _links;

        /// <summary>
        /// HATEOAS of the entity
        /// </summary>
        public InputList<Inputs.AwsLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.AwsLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the organization this entity belongs to.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// A link to the region that is associated with the storage profile.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// Indicates whether this storage profile supports encryption or not.
        /// </summary>
        [Input("supportsEncryption")]
        public Input<bool>? SupportsEncryption { get; set; }

        [Input("tags")]
        private InputList<Inputs.AwsTagGetArgs>? _tags;

        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        public InputList<Inputs.AwsTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AwsTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Indicates the type of volume associated with type of storage.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public AwsState()
        {
        }
        public static new AwsState Empty => new AwsState();
    }
}
