// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace pulumiverse.Vra
{
    public static class GetStorageProfileVsphere
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to create a storage profile vsphere data source.
        /// 
        /// **Storage profile vsphere data source by its id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetStorageProfileVsphere.Invoke(new()
        ///     {
        ///         Id = vra_storage_profile_vsphere.This.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Vra storage profile data source filter by external region id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetStorageProfileVsphere.Invoke(new()
        ///     {
        ///         Filter = "externalRegionId eq 'foobar'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A storage profile vsphere data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStorageProfileVsphereResult> InvokeAsync(GetStorageProfileVsphereArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStorageProfileVsphereResult>("vra:index/getStorageProfileVsphere:getStorageProfileVsphere", args ?? new GetStorageProfileVsphereArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to create a storage profile vsphere data source.
        /// 
        /// **Storage profile vsphere data source by its id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetStorageProfileVsphere.Invoke(new()
        ///     {
        ///         Id = vra_storage_profile_vsphere.This.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **Vra storage profile data source filter by external region id:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.GetStorageProfileVsphere.Invoke(new()
        ///     {
        ///         Filter = "externalRegionId eq 'foobar'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A storage profile vsphere data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetStorageProfileVsphereResult> Invoke(GetStorageProfileVsphereInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStorageProfileVsphereResult>("vra:index/getStorageProfileVsphere:getStorageProfileVsphere", args ?? new GetStorageProfileVsphereInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageProfileVsphereArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '&lt;regionId&gt;' and cloudAccountId eq '&lt;cloudAccountId&gt;'.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// The id of the image profile instance.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Indicates whether this storage profile supports encryption or not.
        /// </summary>
        [Input("sharesLevel")]
        public string? SharesLevel { get; set; }

        [Input("tags")]
        private List<Inputs.GetStorageProfileVsphereTagArgs>? _tags;

        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        public List<Inputs.GetStorageProfileVsphereTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetStorageProfileVsphereTagArgs>());
            set => _tags = value;
        }

        public GetStorageProfileVsphereArgs()
        {
        }
        public static new GetStorageProfileVsphereArgs Empty => new GetStorageProfileVsphereArgs();
    }

    public sealed class GetStorageProfileVsphereInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '&lt;regionId&gt;' and cloudAccountId eq '&lt;cloudAccountId&gt;'.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The id of the image profile instance.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Indicates whether this storage profile supports encryption or not.
        /// </summary>
        [Input("sharesLevel")]
        public Input<string>? SharesLevel { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetStorageProfileVsphereTagInputArgs>? _tags;

        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        public InputList<Inputs.GetStorageProfileVsphereTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetStorageProfileVsphereTagInputArgs>());
            set => _tags = value;
        }

        public GetStorageProfileVsphereInvokeArgs()
        {
        }
        public static new GetStorageProfileVsphereInvokeArgs Empty => new GetStorageProfileVsphereInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageProfileVsphereResult
    {
        /// <summary>
        /// Id of the cloud account this storage profile belongs to.
        /// </summary>
        public readonly string CloudAccountId;
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Indicates if this storage profile is a default profile.
        /// </summary>
        public readonly bool DefaultItem;
        /// <summary>
        /// A human-friendly description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Type of mode for the disk.
        /// </summary>
        public readonly string DiskMode;
        /// <summary>
        /// Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// The id of the region as seen in the cloud provider for which this profile is defined.
        /// </summary>
        public readonly string ExternalRegionId;
        public readonly string? Filter;
        public readonly string Id;
        /// <summary>
        /// The upper bound for the I/O operations per second allocated for each virtual disk.
        /// </summary>
        public readonly string LimitIops;
        /// <summary>
        /// HATEOAS of the entity
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStorageProfileVsphereLinkResult> Links;
        /// <summary>
        /// A human-friendly name used as an identifier in APIs that support this option.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The id of the organization this entity belongs to.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Type of provisioning policy for the disk.
        /// </summary>
        public readonly string ProvisioningType;
        /// <summary>
        /// A specific number of shares assigned to each virtual machine.
        /// </summary>
        public readonly string Shares;
        public readonly string? SharesLevel;
        /// <summary>
        /// Indicates whether this storage policy should support encryption or not.
        /// </summary>
        public readonly bool SupportsEncryption;
        /// <summary>
        /// A set of tag keys and optional values that were set on this Network Profile.
        /// example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStorageProfileVsphereTagResult> Tags;
        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetStorageProfileVsphereResult(
            string cloudAccountId,

            string createdAt,

            bool defaultItem,

            string description,

            string diskMode,

            string diskType,

            string externalRegionId,

            string? filter,

            string id,

            string limitIops,

            ImmutableArray<Outputs.GetStorageProfileVsphereLinkResult> links,

            string name,

            string orgId,

            string owner,

            string provisioningType,

            string shares,

            string? sharesLevel,

            bool supportsEncryption,

            ImmutableArray<Outputs.GetStorageProfileVsphereTagResult> tags,

            string updatedAt)
        {
            CloudAccountId = cloudAccountId;
            CreatedAt = createdAt;
            DefaultItem = defaultItem;
            Description = description;
            DiskMode = diskMode;
            DiskType = diskType;
            ExternalRegionId = externalRegionId;
            Filter = filter;
            Id = id;
            LimitIops = limitIops;
            Links = links;
            Name = name;
            OrgId = orgId;
            Owner = owner;
            ProvisioningType = provisioningType;
            Shares = shares;
            SharesLevel = sharesLevel;
            SupportsEncryption = supportsEncryption;
            Tags = tags;
            UpdatedAt = updatedAt;
        }
    }
}
