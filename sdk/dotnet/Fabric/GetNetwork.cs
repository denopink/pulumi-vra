// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Vra.Fabric
{
    public static class GetNetwork
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to lookup fabric networks.
        /// 
        /// **Fabric network by filter query:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Fabric.GetNetwork.Invoke(new()
        ///     {
        ///         Filter = $"name eq '{@var.Name}' and externalRegionId eq '{@var.External_region_id}'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A fabric network data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("vra:fabric/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### S
        /// This is an example of how to lookup fabric networks.
        /// 
        /// **Fabric network by filter query:**
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vra = Pulumi.Vra;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Vra.Fabric.GetNetwork.Invoke(new()
        ///     {
        ///         Filter = $"name eq '{@var.Name}' and externalRegionId eq '{@var.External_region_id}'",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A fabric network data source supports the following arguments:
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("vra:fabric/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API.
        /// </summary>
        [Input("filter", required: true)]
        public string Filter { get; set; } = null!;

        [Input("tags")]
        private List<Inputs.GetNetworkTagArgs>? _tags;

        /// <summary>
        /// Set of tag keys and values to apply to the resource.
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        public List<Inputs.GetNetworkTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetNetworkTagArgs>());
            set => _tags = value;
        }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter query string that is supported by vRA multi-cloud IaaS API.
        /// </summary>
        [Input("filter", required: true)]
        public Input<string> Filter { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.GetNetworkTagInputArgs>? _tags;

        /// <summary>
        /// Set of tag keys and values to apply to the resource.
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        public InputList<Inputs.GetNetworkTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetNetworkTagInputArgs>());
            set => _tags = value;
        }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// Network CIDR to be used.
        /// </summary>
        public readonly string Cidr;
        /// <summary>
        /// Set of ids of the cloud accounts this entity belongs to.
        /// </summary>
        public readonly ImmutableArray<string> CloudAccountIds;
        /// <summary>
        /// Date when the entity was created. The date is in ISO 6801 and UTC.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Additional properties that may be used to extend the base resource.
        /// </summary>
        public readonly ImmutableDictionary<string, object> CustomProperties;
        /// <summary>
        /// State object representing a network on a external cloud provider.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// External entity Id on the provider side.
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// The id of the region for which this network is defined.
        /// </summary>
        public readonly string ExternalRegionId;
        public readonly string Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether this is the default subnet for the zone.
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// Indicates whether the sub-network supports public IP assignment.
        /// </summary>
        public readonly bool IsPublic;
        /// <summary>
        /// HATEOAS of the entity
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkLinkResult> Links;
        /// <summary>
        /// Name of the fabric network.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of organization that entity belongs to.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// Email of the user that owns the entity.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Set of tag keys and values to apply to the resource.
        /// Example:[ { "key" : "vmware", "value": "provider" } ]
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkTagResult> Tags;
        /// <summary>
        /// Date when the entity was last updated. The date is ISO 8601 and UTC.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetNetworkResult(
            string cidr,

            ImmutableArray<string> cloudAccountIds,

            string createdAt,

            ImmutableDictionary<string, object> customProperties,

            string description,

            string externalId,

            string externalRegionId,

            string filter,

            string id,

            bool isDefault,

            bool isPublic,

            ImmutableArray<Outputs.GetNetworkLinkResult> links,

            string name,

            string organizationId,

            string owner,

            ImmutableArray<Outputs.GetNetworkTagResult> tags,

            string updatedAt)
        {
            Cidr = cidr;
            CloudAccountIds = cloudAccountIds;
            CreatedAt = createdAt;
            CustomProperties = customProperties;
            Description = description;
            ExternalId = externalId;
            ExternalRegionId = externalRegionId;
            Filter = filter;
            Id = id;
            IsDefault = isDefault;
            IsPublic = isPublic;
            Links = links;
            Name = name;
            OrganizationId = organizationId;
            Owner = owner;
            Tags = tags;
            UpdatedAt = updatedAt;
        }
    }
}
